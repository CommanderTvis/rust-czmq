/* automatically generated by rust-bindgen */

pub type czmq_destructor =
    unsafe extern "C" fn(item: *mut *mut ::std::os::raw::c_void);
pub type czmq_duplicator =
    unsafe extern "C" fn(item: *const ::std::os::raw::c_void)
        -> *mut ::std::os::raw::c_void;
pub type czmq_comparator =
    unsafe extern "C" fn(item1: *const ::std::os::raw::c_void,
                         item2: *const ::std::os::raw::c_void)
        -> ::std::os::raw::c_int;
pub type errno_t = ::std::os::raw::c_int;
pub type __int8_t = ::std::os::raw::c_char;
pub type __uint8_t = ::std::os::raw::c_uchar;
pub type __int16_t = ::std::os::raw::c_short;
pub type __uint16_t = ::std::os::raw::c_ushort;
pub type __int32_t = ::std::os::raw::c_int;
pub type __uint32_t = ::std::os::raw::c_uint;
pub type __int64_t = ::std::os::raw::c_longlong;
pub type __uint64_t = ::std::os::raw::c_ulonglong;
pub type __darwin_intptr_t = ::std::os::raw::c_long;
pub type __darwin_natural_t = ::std::os::raw::c_uint;
pub type __darwin_ct_rune_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Copy)]
pub struct Union_Unnamed1 {
    pub _bindgen_data_: [u64; 16usize],
}
impl Union_Unnamed1 {
    pub unsafe fn __mbstate8(&mut self)
     -> *mut [::std::os::raw::c_char; 128usize] {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn _mbstateL(&mut self) -> *mut ::std::os::raw::c_longlong {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
}
impl ::std::clone::Clone for Union_Unnamed1 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Union_Unnamed1 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type __mbstate_t = Union_Unnamed1;
pub type __darwin_mbstate_t = __mbstate_t;
pub type __darwin_ptrdiff_t = ::std::os::raw::c_long;
pub type __darwin_size_t = ::std::os::raw::c_ulong;
pub type __darwin_va_list = __builtin_va_list;
pub type __darwin_wchar_t = ::std::os::raw::c_int;
pub type __darwin_rune_t = __darwin_wchar_t;
pub type __darwin_wint_t = ::std::os::raw::c_int;
pub type __darwin_clock_t = ::std::os::raw::c_ulong;
pub type __darwin_socklen_t = __uint32_t;
pub type __darwin_ssize_t = ::std::os::raw::c_long;
pub type __darwin_time_t = ::std::os::raw::c_long;
pub type __darwin_blkcnt_t = __int64_t;
pub type __darwin_blksize_t = __int32_t;
pub type __darwin_dev_t = __int32_t;
pub type __darwin_fsblkcnt_t = ::std::os::raw::c_uint;
pub type __darwin_fsfilcnt_t = ::std::os::raw::c_uint;
pub type __darwin_gid_t = __uint32_t;
pub type __darwin_id_t = __uint32_t;
pub type __darwin_ino64_t = __uint64_t;
pub type __darwin_ino_t = __darwin_ino64_t;
pub type __darwin_mach_port_name_t = __darwin_natural_t;
pub type __darwin_mach_port_t = __darwin_mach_port_name_t;
pub type __darwin_mode_t = __uint16_t;
pub type __darwin_off_t = __int64_t;
pub type __darwin_pid_t = __int32_t;
pub type __darwin_sigset_t = __uint32_t;
pub type __darwin_suseconds_t = __int32_t;
pub type __darwin_uid_t = __uint32_t;
pub type __darwin_useconds_t = __uint32_t;
pub type __darwin_uuid_t = [::std::os::raw::c_uchar; 16usize];
pub type __darwin_uuid_string_t = [::std::os::raw::c_char; 37usize];
#[repr(C)]
#[derive(Copy)]
pub struct Struct___darwin_pthread_handler_rec {
    pub __routine: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                  *mut ::std::os::raw::c_void)>,
    pub __arg: *mut ::std::os::raw::c_void,
    pub __next: *mut Struct___darwin_pthread_handler_rec,
}
impl ::std::clone::Clone for Struct___darwin_pthread_handler_rec {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct___darwin_pthread_handler_rec {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct__opaque_pthread_attr_t {
    pub __sig: ::std::os::raw::c_long,
    pub __opaque: [::std::os::raw::c_char; 56usize],
}
impl ::std::clone::Clone for Struct__opaque_pthread_attr_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct__opaque_pthread_attr_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct__opaque_pthread_cond_t {
    pub __sig: ::std::os::raw::c_long,
    pub __opaque: [::std::os::raw::c_char; 40usize],
}
impl ::std::clone::Clone for Struct__opaque_pthread_cond_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct__opaque_pthread_cond_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct__opaque_pthread_condattr_t {
    pub __sig: ::std::os::raw::c_long,
    pub __opaque: [::std::os::raw::c_char; 8usize],
}
impl ::std::clone::Clone for Struct__opaque_pthread_condattr_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct__opaque_pthread_condattr_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct__opaque_pthread_mutex_t {
    pub __sig: ::std::os::raw::c_long,
    pub __opaque: [::std::os::raw::c_char; 56usize],
}
impl ::std::clone::Clone for Struct__opaque_pthread_mutex_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct__opaque_pthread_mutex_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct__opaque_pthread_mutexattr_t {
    pub __sig: ::std::os::raw::c_long,
    pub __opaque: [::std::os::raw::c_char; 8usize],
}
impl ::std::clone::Clone for Struct__opaque_pthread_mutexattr_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct__opaque_pthread_mutexattr_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct__opaque_pthread_once_t {
    pub __sig: ::std::os::raw::c_long,
    pub __opaque: [::std::os::raw::c_char; 8usize],
}
impl ::std::clone::Clone for Struct__opaque_pthread_once_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct__opaque_pthread_once_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct__opaque_pthread_rwlock_t {
    pub __sig: ::std::os::raw::c_long,
    pub __opaque: [::std::os::raw::c_char; 192usize],
}
impl ::std::clone::Clone for Struct__opaque_pthread_rwlock_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct__opaque_pthread_rwlock_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct__opaque_pthread_rwlockattr_t {
    pub __sig: ::std::os::raw::c_long,
    pub __opaque: [::std::os::raw::c_char; 16usize],
}
impl ::std::clone::Clone for Struct__opaque_pthread_rwlockattr_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct__opaque_pthread_rwlockattr_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct__opaque_pthread_t {
    pub __sig: ::std::os::raw::c_long,
    pub __cleanup_stack: *mut Struct___darwin_pthread_handler_rec,
    pub __opaque: [::std::os::raw::c_char; 8176usize],
}
impl ::std::clone::Clone for Struct__opaque_pthread_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct__opaque_pthread_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type __darwin_pthread_attr_t = Struct__opaque_pthread_attr_t;
pub type __darwin_pthread_cond_t = Struct__opaque_pthread_cond_t;
pub type __darwin_pthread_condattr_t = Struct__opaque_pthread_condattr_t;
pub type __darwin_pthread_key_t = ::std::os::raw::c_ulong;
pub type __darwin_pthread_mutex_t = Struct__opaque_pthread_mutex_t;
pub type __darwin_pthread_mutexattr_t = Struct__opaque_pthread_mutexattr_t;
pub type __darwin_pthread_once_t = Struct__opaque_pthread_once_t;
pub type __darwin_pthread_rwlock_t = Struct__opaque_pthread_rwlock_t;
pub type __darwin_pthread_rwlockattr_t = Struct__opaque_pthread_rwlockattr_t;
pub type __darwin_pthread_t = *mut Struct__opaque_pthread_t;
pub type __darwin_nl_item = ::std::os::raw::c_int;
pub type __darwin_wctrans_t = ::std::os::raw::c_int;
pub type __darwin_wctype_t = __uint32_t;
pub type ptrdiff_t = __darwin_ptrdiff_t;
pub type rsize_t = __darwin_size_t;
pub type size_t = __darwin_size_t;
pub type wchar_t = __darwin_wchar_t;
pub type wint_t = __darwin_wint_t;
pub type max_align_t = ::std::os::raw::c_double;
pub type va_list = __builtin_va_list;
pub type fpos_t = __darwin_off_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct___sbuf {
    pub _base: *mut ::std::os::raw::c_uchar,
    pub _size: ::std::os::raw::c_int,
}
impl ::std::clone::Clone for Struct___sbuf {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct___sbuf {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub enum Struct___sFILEX { }
#[repr(C)]
#[derive(Copy)]
pub struct Struct___sFILE {
    pub _p: *mut ::std::os::raw::c_uchar,
    pub _r: ::std::os::raw::c_int,
    pub _w: ::std::os::raw::c_int,
    pub _flags: ::std::os::raw::c_short,
    pub _file: ::std::os::raw::c_short,
    pub _bf: Struct___sbuf,
    pub _lbfsize: ::std::os::raw::c_int,
    pub _cookie: *mut ::std::os::raw::c_void,
    pub _close: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                               *mut ::std::os::raw::c_void)
                                          -> ::std::os::raw::c_int>,
    pub _read: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                              *mut ::std::os::raw::c_void,
                                                          arg2:
                                                              *mut ::std::os::raw::c_char,
                                                          arg3:
                                                              ::std::os::raw::c_int)
                                         -> ::std::os::raw::c_int>,
    pub _seek: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                              *mut ::std::os::raw::c_void,
                                                          arg2: fpos_t,
                                                          arg3:
                                                              ::std::os::raw::c_int)
                                         -> fpos_t>,
    pub _write: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                               *mut ::std::os::raw::c_void,
                                                           arg2:
                                                               *const ::std::os::raw::c_char,
                                                           arg3:
                                                               ::std::os::raw::c_int)
                                          -> ::std::os::raw::c_int>,
    pub _ub: Struct___sbuf,
    pub _extra: *mut Struct___sFILEX,
    pub _ur: ::std::os::raw::c_int,
    pub _ubuf: [::std::os::raw::c_uchar; 3usize],
    pub _nbuf: [::std::os::raw::c_uchar; 1usize],
    pub _lb: Struct___sbuf,
    pub _blksize: ::std::os::raw::c_int,
    pub _offset: fpos_t,
}
impl ::std::clone::Clone for Struct___sFILE {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct___sFILE {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type FILE = Struct___sFILE;
pub type off_t = __darwin_off_t;
pub type ssize_t = __darwin_ssize_t;
pub type int8_t = ::std::os::raw::c_char;
pub type int16_t = ::std::os::raw::c_short;
pub type int32_t = ::std::os::raw::c_int;
pub type int64_t = ::std::os::raw::c_longlong;
pub type uint8_t = ::std::os::raw::c_uchar;
pub type uint16_t = ::std::os::raw::c_ushort;
pub type uint32_t = ::std::os::raw::c_uint;
pub type uint64_t = ::std::os::raw::c_ulonglong;
pub type int_least8_t = int8_t;
pub type int_least16_t = int16_t;
pub type int_least32_t = int32_t;
pub type int_least64_t = int64_t;
pub type uint_least8_t = uint8_t;
pub type uint_least16_t = uint16_t;
pub type uint_least32_t = uint32_t;
pub type uint_least64_t = uint64_t;
pub type int_fast8_t = int8_t;
pub type int_fast16_t = int16_t;
pub type int_fast32_t = int32_t;
pub type int_fast64_t = int64_t;
pub type uint_fast8_t = uint8_t;
pub type uint_fast16_t = uint16_t;
pub type uint_fast32_t = uint32_t;
pub type uint_fast64_t = uint64_t;
pub type intptr_t = __darwin_intptr_t;
pub type uintptr_t = ::std::os::raw::c_ulong;
pub type intmax_t = ::std::os::raw::c_long;
pub type uintmax_t = ::std::os::raw::c_ulong;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_zmq_msg_t {
    pub unnamed_field1: [::std::os::raw::c_uchar; 64usize],
}
impl ::std::clone::Clone for Struct_zmq_msg_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_zmq_msg_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type zmq_msg_t = Struct_zmq_msg_t;
pub type zmq_free_fn =
    unsafe extern "C" fn(data: *mut ::std::os::raw::c_void,
                         hint: *mut ::std::os::raw::c_void);
#[repr(C)]
#[derive(Copy)]
pub struct Struct_zmq_pollitem_t {
    pub socket: *mut ::std::os::raw::c_void,
    pub fd: ::std::os::raw::c_int,
    pub events: ::std::os::raw::c_short,
    pub revents: ::std::os::raw::c_short,
}
impl ::std::clone::Clone for Struct_zmq_pollitem_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_zmq_pollitem_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type zmq_pollitem_t = Struct_zmq_pollitem_t;
pub type zmq_thread_fn =
    unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void);
pub type ct_rune_t = __darwin_ct_rune_t;
pub type rune_t = __darwin_rune_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed2 {
    pub __min: __darwin_rune_t,
    pub __max: __darwin_rune_t,
    pub __map: __darwin_rune_t,
    pub __types: *mut __uint32_t,
}
impl ::std::clone::Clone for Struct_Unnamed2 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed2 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type _RuneEntry = Struct_Unnamed2;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed3 {
    pub __nranges: ::std::os::raw::c_int,
    pub __ranges: *mut _RuneEntry,
}
impl ::std::clone::Clone for Struct_Unnamed3 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed3 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type _RuneRange = Struct_Unnamed3;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed4 {
    pub __name: [::std::os::raw::c_char; 14usize],
    pub __mask: __uint32_t,
}
impl ::std::clone::Clone for Struct_Unnamed4 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed4 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type _RuneCharClass = Struct_Unnamed4;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed5 {
    pub __magic: [::std::os::raw::c_char; 8usize],
    pub __encoding: [::std::os::raw::c_char; 32usize],
    pub __sgetrune: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                   *const ::std::os::raw::c_char,
                                                               arg2:
                                                                   __darwin_size_t,
                                                               arg3:
                                                                   *mut *const ::std::os::raw::c_char)
                                              -> __darwin_rune_t>,
    pub __sputrune: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                   __darwin_rune_t,
                                                               arg2:
                                                                   *mut ::std::os::raw::c_char,
                                                               arg3:
                                                                   __darwin_size_t,
                                                               arg4:
                                                                   *mut *mut ::std::os::raw::c_char)
                                              -> ::std::os::raw::c_int>,
    pub __invalid_rune: __darwin_rune_t,
    pub __runetype: [__uint32_t; 256usize],
    pub __maplower: [__darwin_rune_t; 256usize],
    pub __mapupper: [__darwin_rune_t; 256usize],
    pub __runetype_ext: _RuneRange,
    pub __maplower_ext: _RuneRange,
    pub __mapupper_ext: _RuneRange,
    pub __variable: *mut ::std::os::raw::c_void,
    pub __variable_len: ::std::os::raw::c_int,
    pub __ncharclasses: ::std::os::raw::c_int,
    pub __charclasses: *mut _RuneCharClass,
}
impl ::std::clone::Clone for Struct_Unnamed5 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed5 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type _RuneLocale = Struct_Unnamed5;
pub type __gnuc_va_list = __builtin_va_list;
#[derive(Clone, Copy)]
#[repr(u32)]
pub enum Enum_Unnamed6 { P_ALL = 0, P_PID = 1, P_PGID = 2, }
pub type idtype_t = Enum_Unnamed6;
pub type pid_t = __darwin_pid_t;
pub type id_t = __darwin_id_t;
pub type sig_atomic_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Copy)]
pub struct Struct___darwin_i386_thread_state {
    pub __eax: ::std::os::raw::c_uint,
    pub __ebx: ::std::os::raw::c_uint,
    pub __ecx: ::std::os::raw::c_uint,
    pub __edx: ::std::os::raw::c_uint,
    pub __edi: ::std::os::raw::c_uint,
    pub __esi: ::std::os::raw::c_uint,
    pub __ebp: ::std::os::raw::c_uint,
    pub __esp: ::std::os::raw::c_uint,
    pub __ss: ::std::os::raw::c_uint,
    pub __eflags: ::std::os::raw::c_uint,
    pub __eip: ::std::os::raw::c_uint,
    pub __cs: ::std::os::raw::c_uint,
    pub __ds: ::std::os::raw::c_uint,
    pub __es: ::std::os::raw::c_uint,
    pub __fs: ::std::os::raw::c_uint,
    pub __gs: ::std::os::raw::c_uint,
}
impl ::std::clone::Clone for Struct___darwin_i386_thread_state {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct___darwin_i386_thread_state {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct___darwin_fp_control {
    pub _bindgen_bitfield_1_: ::std::os::raw::c_ushort,
}
impl ::std::clone::Clone for Struct___darwin_fp_control {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct___darwin_fp_control {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type __darwin_fp_control_t = Struct___darwin_fp_control;
#[repr(C)]
#[derive(Copy)]
pub struct Struct___darwin_fp_status {
    pub _bindgen_bitfield_1_: ::std::os::raw::c_ushort,
}
impl ::std::clone::Clone for Struct___darwin_fp_status {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct___darwin_fp_status {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type __darwin_fp_status_t = Struct___darwin_fp_status;
#[repr(C)]
#[derive(Copy)]
pub struct Struct___darwin_mmst_reg {
    pub __mmst_reg: [::std::os::raw::c_char; 10usize],
    pub __mmst_rsrv: [::std::os::raw::c_char; 6usize],
}
impl ::std::clone::Clone for Struct___darwin_mmst_reg {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct___darwin_mmst_reg {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct___darwin_xmm_reg {
    pub __xmm_reg: [::std::os::raw::c_char; 16usize],
}
impl ::std::clone::Clone for Struct___darwin_xmm_reg {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct___darwin_xmm_reg {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct___darwin_i386_float_state {
    pub __fpu_reserved: [::std::os::raw::c_int; 2usize],
    pub __fpu_fcw: Struct___darwin_fp_control,
    pub __fpu_fsw: Struct___darwin_fp_status,
    pub __fpu_ftw: __uint8_t,
    pub __fpu_rsrv1: __uint8_t,
    pub __fpu_fop: __uint16_t,
    pub __fpu_ip: __uint32_t,
    pub __fpu_cs: __uint16_t,
    pub __fpu_rsrv2: __uint16_t,
    pub __fpu_dp: __uint32_t,
    pub __fpu_ds: __uint16_t,
    pub __fpu_rsrv3: __uint16_t,
    pub __fpu_mxcsr: __uint32_t,
    pub __fpu_mxcsrmask: __uint32_t,
    pub __fpu_stmm0: Struct___darwin_mmst_reg,
    pub __fpu_stmm1: Struct___darwin_mmst_reg,
    pub __fpu_stmm2: Struct___darwin_mmst_reg,
    pub __fpu_stmm3: Struct___darwin_mmst_reg,
    pub __fpu_stmm4: Struct___darwin_mmst_reg,
    pub __fpu_stmm5: Struct___darwin_mmst_reg,
    pub __fpu_stmm6: Struct___darwin_mmst_reg,
    pub __fpu_stmm7: Struct___darwin_mmst_reg,
    pub __fpu_xmm0: Struct___darwin_xmm_reg,
    pub __fpu_xmm1: Struct___darwin_xmm_reg,
    pub __fpu_xmm2: Struct___darwin_xmm_reg,
    pub __fpu_xmm3: Struct___darwin_xmm_reg,
    pub __fpu_xmm4: Struct___darwin_xmm_reg,
    pub __fpu_xmm5: Struct___darwin_xmm_reg,
    pub __fpu_xmm6: Struct___darwin_xmm_reg,
    pub __fpu_xmm7: Struct___darwin_xmm_reg,
    pub __fpu_rsrv4: [::std::os::raw::c_char; 224usize],
    pub __fpu_reserved1: ::std::os::raw::c_int,
}
impl ::std::clone::Clone for Struct___darwin_i386_float_state {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct___darwin_i386_float_state {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct___darwin_i386_avx_state {
    pub __fpu_reserved: [::std::os::raw::c_int; 2usize],
    pub __fpu_fcw: Struct___darwin_fp_control,
    pub __fpu_fsw: Struct___darwin_fp_status,
    pub __fpu_ftw: __uint8_t,
    pub __fpu_rsrv1: __uint8_t,
    pub __fpu_fop: __uint16_t,
    pub __fpu_ip: __uint32_t,
    pub __fpu_cs: __uint16_t,
    pub __fpu_rsrv2: __uint16_t,
    pub __fpu_dp: __uint32_t,
    pub __fpu_ds: __uint16_t,
    pub __fpu_rsrv3: __uint16_t,
    pub __fpu_mxcsr: __uint32_t,
    pub __fpu_mxcsrmask: __uint32_t,
    pub __fpu_stmm0: Struct___darwin_mmst_reg,
    pub __fpu_stmm1: Struct___darwin_mmst_reg,
    pub __fpu_stmm2: Struct___darwin_mmst_reg,
    pub __fpu_stmm3: Struct___darwin_mmst_reg,
    pub __fpu_stmm4: Struct___darwin_mmst_reg,
    pub __fpu_stmm5: Struct___darwin_mmst_reg,
    pub __fpu_stmm6: Struct___darwin_mmst_reg,
    pub __fpu_stmm7: Struct___darwin_mmst_reg,
    pub __fpu_xmm0: Struct___darwin_xmm_reg,
    pub __fpu_xmm1: Struct___darwin_xmm_reg,
    pub __fpu_xmm2: Struct___darwin_xmm_reg,
    pub __fpu_xmm3: Struct___darwin_xmm_reg,
    pub __fpu_xmm4: Struct___darwin_xmm_reg,
    pub __fpu_xmm5: Struct___darwin_xmm_reg,
    pub __fpu_xmm6: Struct___darwin_xmm_reg,
    pub __fpu_xmm7: Struct___darwin_xmm_reg,
    pub __fpu_rsrv4: [::std::os::raw::c_char; 224usize],
    pub __fpu_reserved1: ::std::os::raw::c_int,
    pub __avx_reserved1: [::std::os::raw::c_char; 64usize],
    pub __fpu_ymmh0: Struct___darwin_xmm_reg,
    pub __fpu_ymmh1: Struct___darwin_xmm_reg,
    pub __fpu_ymmh2: Struct___darwin_xmm_reg,
    pub __fpu_ymmh3: Struct___darwin_xmm_reg,
    pub __fpu_ymmh4: Struct___darwin_xmm_reg,
    pub __fpu_ymmh5: Struct___darwin_xmm_reg,
    pub __fpu_ymmh6: Struct___darwin_xmm_reg,
    pub __fpu_ymmh7: Struct___darwin_xmm_reg,
}
impl ::std::clone::Clone for Struct___darwin_i386_avx_state {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct___darwin_i386_avx_state {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct___darwin_i386_exception_state {
    pub __trapno: __uint16_t,
    pub __cpu: __uint16_t,
    pub __err: __uint32_t,
    pub __faultvaddr: __uint32_t,
}
impl ::std::clone::Clone for Struct___darwin_i386_exception_state {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct___darwin_i386_exception_state {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct___darwin_x86_debug_state32 {
    pub __dr0: ::std::os::raw::c_uint,
    pub __dr1: ::std::os::raw::c_uint,
    pub __dr2: ::std::os::raw::c_uint,
    pub __dr3: ::std::os::raw::c_uint,
    pub __dr4: ::std::os::raw::c_uint,
    pub __dr5: ::std::os::raw::c_uint,
    pub __dr6: ::std::os::raw::c_uint,
    pub __dr7: ::std::os::raw::c_uint,
}
impl ::std::clone::Clone for Struct___darwin_x86_debug_state32 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct___darwin_x86_debug_state32 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct___darwin_x86_thread_state64 {
    pub __rax: __uint64_t,
    pub __rbx: __uint64_t,
    pub __rcx: __uint64_t,
    pub __rdx: __uint64_t,
    pub __rdi: __uint64_t,
    pub __rsi: __uint64_t,
    pub __rbp: __uint64_t,
    pub __rsp: __uint64_t,
    pub __r8: __uint64_t,
    pub __r9: __uint64_t,
    pub __r10: __uint64_t,
    pub __r11: __uint64_t,
    pub __r12: __uint64_t,
    pub __r13: __uint64_t,
    pub __r14: __uint64_t,
    pub __r15: __uint64_t,
    pub __rip: __uint64_t,
    pub __rflags: __uint64_t,
    pub __cs: __uint64_t,
    pub __fs: __uint64_t,
    pub __gs: __uint64_t,
}
impl ::std::clone::Clone for Struct___darwin_x86_thread_state64 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct___darwin_x86_thread_state64 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct___darwin_x86_float_state64 {
    pub __fpu_reserved: [::std::os::raw::c_int; 2usize],
    pub __fpu_fcw: Struct___darwin_fp_control,
    pub __fpu_fsw: Struct___darwin_fp_status,
    pub __fpu_ftw: __uint8_t,
    pub __fpu_rsrv1: __uint8_t,
    pub __fpu_fop: __uint16_t,
    pub __fpu_ip: __uint32_t,
    pub __fpu_cs: __uint16_t,
    pub __fpu_rsrv2: __uint16_t,
    pub __fpu_dp: __uint32_t,
    pub __fpu_ds: __uint16_t,
    pub __fpu_rsrv3: __uint16_t,
    pub __fpu_mxcsr: __uint32_t,
    pub __fpu_mxcsrmask: __uint32_t,
    pub __fpu_stmm0: Struct___darwin_mmst_reg,
    pub __fpu_stmm1: Struct___darwin_mmst_reg,
    pub __fpu_stmm2: Struct___darwin_mmst_reg,
    pub __fpu_stmm3: Struct___darwin_mmst_reg,
    pub __fpu_stmm4: Struct___darwin_mmst_reg,
    pub __fpu_stmm5: Struct___darwin_mmst_reg,
    pub __fpu_stmm6: Struct___darwin_mmst_reg,
    pub __fpu_stmm7: Struct___darwin_mmst_reg,
    pub __fpu_xmm0: Struct___darwin_xmm_reg,
    pub __fpu_xmm1: Struct___darwin_xmm_reg,
    pub __fpu_xmm2: Struct___darwin_xmm_reg,
    pub __fpu_xmm3: Struct___darwin_xmm_reg,
    pub __fpu_xmm4: Struct___darwin_xmm_reg,
    pub __fpu_xmm5: Struct___darwin_xmm_reg,
    pub __fpu_xmm6: Struct___darwin_xmm_reg,
    pub __fpu_xmm7: Struct___darwin_xmm_reg,
    pub __fpu_xmm8: Struct___darwin_xmm_reg,
    pub __fpu_xmm9: Struct___darwin_xmm_reg,
    pub __fpu_xmm10: Struct___darwin_xmm_reg,
    pub __fpu_xmm11: Struct___darwin_xmm_reg,
    pub __fpu_xmm12: Struct___darwin_xmm_reg,
    pub __fpu_xmm13: Struct___darwin_xmm_reg,
    pub __fpu_xmm14: Struct___darwin_xmm_reg,
    pub __fpu_xmm15: Struct___darwin_xmm_reg,
    pub __fpu_rsrv4: [::std::os::raw::c_char; 96usize],
    pub __fpu_reserved1: ::std::os::raw::c_int,
}
impl ::std::clone::Clone for Struct___darwin_x86_float_state64 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct___darwin_x86_float_state64 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct___darwin_x86_avx_state64 {
    pub __fpu_reserved: [::std::os::raw::c_int; 2usize],
    pub __fpu_fcw: Struct___darwin_fp_control,
    pub __fpu_fsw: Struct___darwin_fp_status,
    pub __fpu_ftw: __uint8_t,
    pub __fpu_rsrv1: __uint8_t,
    pub __fpu_fop: __uint16_t,
    pub __fpu_ip: __uint32_t,
    pub __fpu_cs: __uint16_t,
    pub __fpu_rsrv2: __uint16_t,
    pub __fpu_dp: __uint32_t,
    pub __fpu_ds: __uint16_t,
    pub __fpu_rsrv3: __uint16_t,
    pub __fpu_mxcsr: __uint32_t,
    pub __fpu_mxcsrmask: __uint32_t,
    pub __fpu_stmm0: Struct___darwin_mmst_reg,
    pub __fpu_stmm1: Struct___darwin_mmst_reg,
    pub __fpu_stmm2: Struct___darwin_mmst_reg,
    pub __fpu_stmm3: Struct___darwin_mmst_reg,
    pub __fpu_stmm4: Struct___darwin_mmst_reg,
    pub __fpu_stmm5: Struct___darwin_mmst_reg,
    pub __fpu_stmm6: Struct___darwin_mmst_reg,
    pub __fpu_stmm7: Struct___darwin_mmst_reg,
    pub __fpu_xmm0: Struct___darwin_xmm_reg,
    pub __fpu_xmm1: Struct___darwin_xmm_reg,
    pub __fpu_xmm2: Struct___darwin_xmm_reg,
    pub __fpu_xmm3: Struct___darwin_xmm_reg,
    pub __fpu_xmm4: Struct___darwin_xmm_reg,
    pub __fpu_xmm5: Struct___darwin_xmm_reg,
    pub __fpu_xmm6: Struct___darwin_xmm_reg,
    pub __fpu_xmm7: Struct___darwin_xmm_reg,
    pub __fpu_xmm8: Struct___darwin_xmm_reg,
    pub __fpu_xmm9: Struct___darwin_xmm_reg,
    pub __fpu_xmm10: Struct___darwin_xmm_reg,
    pub __fpu_xmm11: Struct___darwin_xmm_reg,
    pub __fpu_xmm12: Struct___darwin_xmm_reg,
    pub __fpu_xmm13: Struct___darwin_xmm_reg,
    pub __fpu_xmm14: Struct___darwin_xmm_reg,
    pub __fpu_xmm15: Struct___darwin_xmm_reg,
    pub __fpu_rsrv4: [::std::os::raw::c_char; 96usize],
    pub __fpu_reserved1: ::std::os::raw::c_int,
    pub __avx_reserved1: [::std::os::raw::c_char; 64usize],
    pub __fpu_ymmh0: Struct___darwin_xmm_reg,
    pub __fpu_ymmh1: Struct___darwin_xmm_reg,
    pub __fpu_ymmh2: Struct___darwin_xmm_reg,
    pub __fpu_ymmh3: Struct___darwin_xmm_reg,
    pub __fpu_ymmh4: Struct___darwin_xmm_reg,
    pub __fpu_ymmh5: Struct___darwin_xmm_reg,
    pub __fpu_ymmh6: Struct___darwin_xmm_reg,
    pub __fpu_ymmh7: Struct___darwin_xmm_reg,
    pub __fpu_ymmh8: Struct___darwin_xmm_reg,
    pub __fpu_ymmh9: Struct___darwin_xmm_reg,
    pub __fpu_ymmh10: Struct___darwin_xmm_reg,
    pub __fpu_ymmh11: Struct___darwin_xmm_reg,
    pub __fpu_ymmh12: Struct___darwin_xmm_reg,
    pub __fpu_ymmh13: Struct___darwin_xmm_reg,
    pub __fpu_ymmh14: Struct___darwin_xmm_reg,
    pub __fpu_ymmh15: Struct___darwin_xmm_reg,
}
impl ::std::clone::Clone for Struct___darwin_x86_avx_state64 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct___darwin_x86_avx_state64 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct___darwin_x86_exception_state64 {
    pub __trapno: __uint16_t,
    pub __cpu: __uint16_t,
    pub __err: __uint32_t,
    pub __faultvaddr: __uint64_t,
}
impl ::std::clone::Clone for Struct___darwin_x86_exception_state64 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct___darwin_x86_exception_state64 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct___darwin_x86_debug_state64 {
    pub __dr0: __uint64_t,
    pub __dr1: __uint64_t,
    pub __dr2: __uint64_t,
    pub __dr3: __uint64_t,
    pub __dr4: __uint64_t,
    pub __dr5: __uint64_t,
    pub __dr6: __uint64_t,
    pub __dr7: __uint64_t,
}
impl ::std::clone::Clone for Struct___darwin_x86_debug_state64 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct___darwin_x86_debug_state64 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct___darwin_mcontext32 {
    pub __es: Struct___darwin_i386_exception_state,
    pub __ss: Struct___darwin_i386_thread_state,
    pub __fs: Struct___darwin_i386_float_state,
}
impl ::std::clone::Clone for Struct___darwin_mcontext32 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct___darwin_mcontext32 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct___darwin_mcontext_avx32 {
    pub __es: Struct___darwin_i386_exception_state,
    pub __ss: Struct___darwin_i386_thread_state,
    pub __fs: Struct___darwin_i386_avx_state,
}
impl ::std::clone::Clone for Struct___darwin_mcontext_avx32 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct___darwin_mcontext_avx32 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct___darwin_mcontext64 {
    pub __es: Struct___darwin_x86_exception_state64,
    pub __ss: Struct___darwin_x86_thread_state64,
    pub __fs: Struct___darwin_x86_float_state64,
}
impl ::std::clone::Clone for Struct___darwin_mcontext64 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct___darwin_mcontext64 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct___darwin_mcontext_avx64 {
    pub __es: Struct___darwin_x86_exception_state64,
    pub __ss: Struct___darwin_x86_thread_state64,
    pub __fs: Struct___darwin_x86_avx_state64,
}
impl ::std::clone::Clone for Struct___darwin_mcontext_avx64 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct___darwin_mcontext_avx64 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type mcontext_t = *mut Struct___darwin_mcontext64;
pub type pthread_attr_t = __darwin_pthread_attr_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct___darwin_sigaltstack {
    pub ss_sp: *mut ::std::os::raw::c_void,
    pub ss_size: __darwin_size_t,
    pub ss_flags: ::std::os::raw::c_int,
}
impl ::std::clone::Clone for Struct___darwin_sigaltstack {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct___darwin_sigaltstack {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type stack_t = Struct___darwin_sigaltstack;
#[repr(C)]
#[derive(Copy)]
pub struct Struct___darwin_ucontext {
    pub uc_onstack: ::std::os::raw::c_int,
    pub uc_sigmask: __darwin_sigset_t,
    pub uc_stack: Struct___darwin_sigaltstack,
    pub uc_link: *mut Struct___darwin_ucontext,
    pub uc_mcsize: __darwin_size_t,
    pub uc_mcontext: *mut Struct___darwin_mcontext64,
}
impl ::std::clone::Clone for Struct___darwin_ucontext {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct___darwin_ucontext {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type ucontext_t = Struct___darwin_ucontext;
pub type sigset_t = __darwin_sigset_t;
pub type uid_t = __darwin_uid_t;
#[repr(C)]
#[derive(Copy)]
pub struct Union_sigval {
    pub _bindgen_data_: [u64; 1usize],
}
impl Union_sigval {
    pub unsafe fn sival_int(&mut self) -> *mut ::std::os::raw::c_int {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn sival_ptr(&mut self) -> *mut *mut ::std::os::raw::c_void {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
}
impl ::std::clone::Clone for Union_sigval {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Union_sigval {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_sigevent {
    pub sigev_notify: ::std::os::raw::c_int,
    pub sigev_signo: ::std::os::raw::c_int,
    pub sigev_value: Union_sigval,
    pub sigev_notify_function: ::std::option::Option<extern "C" fn(arg1:
                                                                       Union_sigval)>,
    pub sigev_notify_attributes: *mut pthread_attr_t,
}
impl ::std::clone::Clone for Struct_sigevent {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_sigevent {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct___siginfo {
    pub si_signo: ::std::os::raw::c_int,
    pub si_errno: ::std::os::raw::c_int,
    pub si_code: ::std::os::raw::c_int,
    pub si_pid: pid_t,
    pub si_uid: uid_t,
    pub si_status: ::std::os::raw::c_int,
    pub si_addr: *mut ::std::os::raw::c_void,
    pub si_value: Union_sigval,
    pub si_band: ::std::os::raw::c_long,
    pub __pad: [::std::os::raw::c_ulong; 7usize],
}
impl ::std::clone::Clone for Struct___siginfo {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct___siginfo {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type siginfo_t = Struct___siginfo;
#[repr(C)]
#[derive(Copy)]
pub struct Union___sigaction_u {
    pub _bindgen_data_: [u64; 1usize],
}
impl Union___sigaction_u {
    pub unsafe fn __sa_handler(&mut self)
     ->
         *mut ::std::option::Option<extern "C" fn(arg1:
                                                      ::std::os::raw::c_int)> {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn __sa_sigaction(&mut self)
     ->
         *mut ::std::option::Option<unsafe extern "C" fn(arg1:
                                                             ::std::os::raw::c_int,
                                                         arg2:
                                                             *mut Struct___siginfo,
                                                         arg3:
                                                             *mut ::std::os::raw::c_void)> {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
}
impl ::std::clone::Clone for Union___sigaction_u {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Union___sigaction_u {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct___sigaction {
    pub __sigaction_u: Union___sigaction_u,
    pub sa_tramp: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                 *mut ::std::os::raw::c_void,
                                                             arg2:
                                                                 ::std::os::raw::c_int,
                                                             arg3:
                                                                 ::std::os::raw::c_int,
                                                             arg4:
                                                                 *mut siginfo_t,
                                                             arg5:
                                                                 *mut ::std::os::raw::c_void)>,
    pub sa_mask: sigset_t,
    pub sa_flags: ::std::os::raw::c_int,
}
impl ::std::clone::Clone for Struct___sigaction {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct___sigaction {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_sigaction {
    pub __sigaction_u: Union___sigaction_u,
    pub sa_mask: sigset_t,
    pub sa_flags: ::std::os::raw::c_int,
}
impl ::std::clone::Clone for Struct_sigaction {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_sigaction {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type sig_t =
    ::std::option::Option<extern "C" fn(arg1: ::std::os::raw::c_int)>;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_sigvec {
    pub sv_handler: ::std::option::Option<extern "C" fn(arg1:
                                                            ::std::os::raw::c_int)>,
    pub sv_mask: ::std::os::raw::c_int,
    pub sv_flags: ::std::os::raw::c_int,
}
impl ::std::clone::Clone for Struct_sigvec {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_sigvec {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_sigstack {
    pub ss_sp: *mut ::std::os::raw::c_char,
    pub ss_onstack: ::std::os::raw::c_int,
}
impl ::std::clone::Clone for Struct_sigstack {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_sigstack {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_timeval {
    pub tv_sec: __darwin_time_t,
    pub tv_usec: __darwin_suseconds_t,
}
impl ::std::clone::Clone for Struct_timeval {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_timeval {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type rlim_t = __uint64_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_rusage {
    pub ru_utime: Struct_timeval,
    pub ru_stime: Struct_timeval,
    pub ru_maxrss: ::std::os::raw::c_long,
    pub ru_ixrss: ::std::os::raw::c_long,
    pub ru_idrss: ::std::os::raw::c_long,
    pub ru_isrss: ::std::os::raw::c_long,
    pub ru_minflt: ::std::os::raw::c_long,
    pub ru_majflt: ::std::os::raw::c_long,
    pub ru_nswap: ::std::os::raw::c_long,
    pub ru_inblock: ::std::os::raw::c_long,
    pub ru_oublock: ::std::os::raw::c_long,
    pub ru_msgsnd: ::std::os::raw::c_long,
    pub ru_msgrcv: ::std::os::raw::c_long,
    pub ru_nsignals: ::std::os::raw::c_long,
    pub ru_nvcsw: ::std::os::raw::c_long,
    pub ru_nivcsw: ::std::os::raw::c_long,
}
impl ::std::clone::Clone for Struct_rusage {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_rusage {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type rusage_info_t = *mut ::std::os::raw::c_void;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_rusage_info_v0 {
    pub ri_uuid: [uint8_t; 16usize],
    pub ri_user_time: uint64_t,
    pub ri_system_time: uint64_t,
    pub ri_pkg_idle_wkups: uint64_t,
    pub ri_interrupt_wkups: uint64_t,
    pub ri_pageins: uint64_t,
    pub ri_wired_size: uint64_t,
    pub ri_resident_size: uint64_t,
    pub ri_phys_footprint: uint64_t,
    pub ri_proc_start_abstime: uint64_t,
    pub ri_proc_exit_abstime: uint64_t,
}
impl ::std::clone::Clone for Struct_rusage_info_v0 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_rusage_info_v0 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_rusage_info_v1 {
    pub ri_uuid: [uint8_t; 16usize],
    pub ri_user_time: uint64_t,
    pub ri_system_time: uint64_t,
    pub ri_pkg_idle_wkups: uint64_t,
    pub ri_interrupt_wkups: uint64_t,
    pub ri_pageins: uint64_t,
    pub ri_wired_size: uint64_t,
    pub ri_resident_size: uint64_t,
    pub ri_phys_footprint: uint64_t,
    pub ri_proc_start_abstime: uint64_t,
    pub ri_proc_exit_abstime: uint64_t,
    pub ri_child_user_time: uint64_t,
    pub ri_child_system_time: uint64_t,
    pub ri_child_pkg_idle_wkups: uint64_t,
    pub ri_child_interrupt_wkups: uint64_t,
    pub ri_child_pageins: uint64_t,
    pub ri_child_elapsed_abstime: uint64_t,
}
impl ::std::clone::Clone for Struct_rusage_info_v1 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_rusage_info_v1 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_rusage_info_v2 {
    pub ri_uuid: [uint8_t; 16usize],
    pub ri_user_time: uint64_t,
    pub ri_system_time: uint64_t,
    pub ri_pkg_idle_wkups: uint64_t,
    pub ri_interrupt_wkups: uint64_t,
    pub ri_pageins: uint64_t,
    pub ri_wired_size: uint64_t,
    pub ri_resident_size: uint64_t,
    pub ri_phys_footprint: uint64_t,
    pub ri_proc_start_abstime: uint64_t,
    pub ri_proc_exit_abstime: uint64_t,
    pub ri_child_user_time: uint64_t,
    pub ri_child_system_time: uint64_t,
    pub ri_child_pkg_idle_wkups: uint64_t,
    pub ri_child_interrupt_wkups: uint64_t,
    pub ri_child_pageins: uint64_t,
    pub ri_child_elapsed_abstime: uint64_t,
    pub ri_diskio_bytesread: uint64_t,
    pub ri_diskio_byteswritten: uint64_t,
}
impl ::std::clone::Clone for Struct_rusage_info_v2 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_rusage_info_v2 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_rusage_info_v3 {
    pub ri_uuid: [uint8_t; 16usize],
    pub ri_user_time: uint64_t,
    pub ri_system_time: uint64_t,
    pub ri_pkg_idle_wkups: uint64_t,
    pub ri_interrupt_wkups: uint64_t,
    pub ri_pageins: uint64_t,
    pub ri_wired_size: uint64_t,
    pub ri_resident_size: uint64_t,
    pub ri_phys_footprint: uint64_t,
    pub ri_proc_start_abstime: uint64_t,
    pub ri_proc_exit_abstime: uint64_t,
    pub ri_child_user_time: uint64_t,
    pub ri_child_system_time: uint64_t,
    pub ri_child_pkg_idle_wkups: uint64_t,
    pub ri_child_interrupt_wkups: uint64_t,
    pub ri_child_pageins: uint64_t,
    pub ri_child_elapsed_abstime: uint64_t,
    pub ri_diskio_bytesread: uint64_t,
    pub ri_diskio_byteswritten: uint64_t,
    pub ri_cpu_time_qos_default: uint64_t,
    pub ri_cpu_time_qos_maintenance: uint64_t,
    pub ri_cpu_time_qos_background: uint64_t,
    pub ri_cpu_time_qos_utility: uint64_t,
    pub ri_cpu_time_qos_legacy: uint64_t,
    pub ri_cpu_time_qos_user_initiated: uint64_t,
    pub ri_cpu_time_qos_user_interactive: uint64_t,
    pub ri_billed_system_time: uint64_t,
    pub ri_serviced_system_time: uint64_t,
}
impl ::std::clone::Clone for Struct_rusage_info_v3 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_rusage_info_v3 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type rusage_info_current = Struct_rusage_info_v3;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_rlimit {
    pub rlim_cur: rlim_t,
    pub rlim_max: rlim_t,
}
impl ::std::clone::Clone for Struct_rlimit {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_rlimit {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_proc_rlimit_control_wakeupmon {
    pub wm_flags: uint32_t,
    pub wm_rate: int32_t,
}
impl ::std::clone::Clone for Struct_proc_rlimit_control_wakeupmon {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_proc_rlimit_control_wakeupmon {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Union_wait {
    pub _bindgen_data_: [u32; 1usize],
}
impl Union_wait {
    pub unsafe fn w_status(&mut self) -> *mut ::std::os::raw::c_int {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn w_T(&mut self) -> *mut Struct_Unnamed7 {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn w_S(&mut self) -> *mut Struct_Unnamed8 {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
}
impl ::std::clone::Clone for Union_wait {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Union_wait {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed7 {
    pub _bindgen_bitfield_1_: ::std::os::raw::c_uint,
}
impl ::std::clone::Clone for Struct_Unnamed7 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed7 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed8 {
    pub _bindgen_bitfield_1_: ::std::os::raw::c_uint,
}
impl ::std::clone::Clone for Struct_Unnamed8 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed8 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed9 {
    pub quot: ::std::os::raw::c_int,
    pub rem: ::std::os::raw::c_int,
}
impl ::std::clone::Clone for Struct_Unnamed9 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed9 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type div_t = Struct_Unnamed9;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed10 {
    pub quot: ::std::os::raw::c_long,
    pub rem: ::std::os::raw::c_long,
}
impl ::std::clone::Clone for Struct_Unnamed10 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed10 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type ldiv_t = Struct_Unnamed10;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed11 {
    pub quot: ::std::os::raw::c_longlong,
    pub rem: ::std::os::raw::c_longlong,
}
impl ::std::clone::Clone for Struct_Unnamed11 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed11 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type lldiv_t = Struct_Unnamed11;
pub type u_int8_t = ::std::os::raw::c_uchar;
pub type u_int16_t = ::std::os::raw::c_ushort;
pub type u_int32_t = ::std::os::raw::c_uint;
pub type u_int64_t = ::std::os::raw::c_ulonglong;
pub type register_t = int64_t;
pub type user_addr_t = u_int64_t;
pub type user_size_t = u_int64_t;
pub type user_ssize_t = int64_t;
pub type user_long_t = int64_t;
pub type user_ulong_t = u_int64_t;
pub type user_time_t = int64_t;
pub type user_off_t = int64_t;
pub type syscall_arg_t = u_int64_t;
pub type dev_t = __darwin_dev_t;
pub type mode_t = __darwin_mode_t;
pub type clock_t = __darwin_clock_t;
pub type time_t = __darwin_time_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_timespec {
    pub tv_sec: __darwin_time_t,
    pub tv_nsec: ::std::os::raw::c_long,
}
impl ::std::clone::Clone for Struct_timespec {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_timespec {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_tm {
    pub tm_sec: ::std::os::raw::c_int,
    pub tm_min: ::std::os::raw::c_int,
    pub tm_hour: ::std::os::raw::c_int,
    pub tm_mday: ::std::os::raw::c_int,
    pub tm_mon: ::std::os::raw::c_int,
    pub tm_year: ::std::os::raw::c_int,
    pub tm_wday: ::std::os::raw::c_int,
    pub tm_yday: ::std::os::raw::c_int,
    pub tm_isdst: ::std::os::raw::c_int,
    pub tm_gmtoff: ::std::os::raw::c_long,
    pub tm_zone: *mut ::std::os::raw::c_char,
}
impl ::std::clone::Clone for Struct_tm {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_tm {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type float_t = ::std::os::raw::c_float;
pub type double_t = ::std::os::raw::c_double;
#[repr(C)]
#[derive(Copy)]
pub struct Struct___float2 {
    pub __sinval: ::std::os::raw::c_float,
    pub __cosval: ::std::os::raw::c_float,
}
impl ::std::clone::Clone for Struct___float2 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct___float2 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct___double2 {
    pub __sinval: ::std::os::raw::c_double,
    pub __cosval: ::std::os::raw::c_double,
}
impl ::std::clone::Clone for Struct___double2 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct___double2 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_exception {
    pub _type: ::std::os::raw::c_int,
    pub name: *mut ::std::os::raw::c_char,
    pub arg1: ::std::os::raw::c_double,
    pub arg2: ::std::os::raw::c_double,
    pub retval: ::std::os::raw::c_double,
}
impl ::std::clone::Clone for Struct_exception {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_exception {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type pthread_t = __darwin_pthread_t;
pub type jmp_buf = [::std::os::raw::c_int; 37usize];
pub type sigjmp_buf = [::std::os::raw::c_int; 38usize];
#[repr(C)]
#[derive(Copy)]
pub struct Struct_flock {
    pub l_start: off_t,
    pub l_len: off_t,
    pub l_pid: pid_t,
    pub l_type: ::std::os::raw::c_short,
    pub l_whence: ::std::os::raw::c_short,
}
impl ::std::clone::Clone for Struct_flock {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_flock {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_flocktimeout {
    pub fl: Struct_flock,
    pub timeout: Struct_timespec,
}
impl ::std::clone::Clone for Struct_flocktimeout {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_flocktimeout {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_radvisory {
    pub ra_offset: off_t,
    pub ra_count: ::std::os::raw::c_int,
}
impl ::std::clone::Clone for Struct_radvisory {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_radvisory {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_fcodeblobs {
    pub f_cd_hash: *mut ::std::os::raw::c_void,
    pub f_hash_size: size_t,
    pub f_cd_buffer: *mut ::std::os::raw::c_void,
    pub f_cd_size: size_t,
    pub f_out_size: *mut ::std::os::raw::c_uint,
    pub f_arch: ::std::os::raw::c_int,
    pub __padding: ::std::os::raw::c_int,
}
impl ::std::clone::Clone for Struct_fcodeblobs {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_fcodeblobs {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type fcodeblobs_t = Struct_fcodeblobs;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_fsignatures {
    pub fs_file_start: off_t,
    pub fs_blob_start: *mut ::std::os::raw::c_void,
    pub fs_blob_size: size_t,
}
impl ::std::clone::Clone for Struct_fsignatures {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_fsignatures {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type fsignatures_t = Struct_fsignatures;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_fstore {
    pub fst_flags: ::std::os::raw::c_uint,
    pub fst_posmode: ::std::os::raw::c_int,
    pub fst_offset: off_t,
    pub fst_length: off_t,
    pub fst_bytesalloc: off_t,
}
impl ::std::clone::Clone for Struct_fstore {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_fstore {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type fstore_t = Struct_fstore;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_fbootstraptransfer {
    pub fbt_offset: off_t,
    pub fbt_length: size_t,
    pub fbt_buffer: *mut ::std::os::raw::c_void,
}
impl ::std::clone::Clone for Struct_fbootstraptransfer {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_fbootstraptransfer {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type fbootstraptransfer_t = Struct_fbootstraptransfer;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_log2phys {
    pub l2p_flags: ::std::os::raw::c_uint,
    pub l2p_contigbytes: off_t,
    pub l2p_devoffset: off_t,
}
impl ::std::clone::Clone for Struct_log2phys {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_log2phys {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub enum Struct__filesec { }
pub type filesec_t = *mut Struct__filesec;
#[derive(Clone, Copy)]
#[repr(u32)]
pub enum Enum_Unnamed12 {
    FILESEC_OWNER = 1,
    FILESEC_GROUP = 2,
    FILESEC_UUID = 3,
    FILESEC_MODE = 4,
    FILESEC_ACL = 5,
    FILESEC_GRPUUID = 6,
    FILESEC_ACL_RAW = 100,
    FILESEC_ACL_ALLOCSIZE = 101,
}
pub type filesec_property_t = Enum_Unnamed12;
pub type socklen_t = __darwin_socklen_t;
pub type in_addr_t = __uint32_t;
pub type in_port_t = __uint16_t;
pub type u_char = ::std::os::raw::c_uchar;
pub type u_short = ::std::os::raw::c_ushort;
pub type u_int = ::std::os::raw::c_uint;
pub type u_long = ::std::os::raw::c_ulong;
pub type ushort = ::std::os::raw::c_ushort;
pub type _uint = ::std::os::raw::c_uint;
pub type u_quad_t = u_int64_t;
pub type quad_t = int64_t;
pub type qaddr_t = *mut quad_t;
pub type caddr_t = *mut ::std::os::raw::c_char;
pub type daddr_t = int32_t;
pub type fixpt_t = u_int32_t;
pub type blkcnt_t = __darwin_blkcnt_t;
pub type blksize_t = __darwin_blksize_t;
pub type gid_t = __darwin_gid_t;
pub type ino_t = __darwin_ino_t;
pub type ino64_t = __darwin_ino64_t;
pub type key_t = __int32_t;
pub type nlink_t = __uint16_t;
pub type segsz_t = int32_t;
pub type swblk_t = int32_t;
pub type useconds_t = __darwin_useconds_t;
pub type suseconds_t = __darwin_suseconds_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_fd_set {
    pub fds_bits: [__int32_t; 32usize],
}
impl ::std::clone::Clone for Struct_fd_set {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_fd_set {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type fd_set = Struct_fd_set;
pub type fd_mask = __int32_t;
pub type pthread_cond_t = __darwin_pthread_cond_t;
pub type pthread_condattr_t = __darwin_pthread_condattr_t;
pub type pthread_mutex_t = __darwin_pthread_mutex_t;
pub type pthread_mutexattr_t = __darwin_pthread_mutexattr_t;
pub type pthread_once_t = __darwin_pthread_once_t;
pub type pthread_rwlock_t = __darwin_pthread_rwlock_t;
pub type pthread_rwlockattr_t = __darwin_pthread_rwlockattr_t;
pub type pthread_key_t = __darwin_pthread_key_t;
pub type fsblkcnt_t = __darwin_fsblkcnt_t;
pub type fsfilcnt_t = __darwin_fsfilcnt_t;
pub type sa_family_t = __uint8_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_iovec {
    pub iov_base: *mut ::std::os::raw::c_void,
    pub iov_len: size_t,
}
impl ::std::clone::Clone for Struct_iovec {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_iovec {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type sae_associd_t = __uint32_t;
pub type sae_connid_t = __uint32_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_sa_endpoints {
    pub sae_srcif: ::std::os::raw::c_uint,
    pub sae_srcaddr: *mut Struct_sockaddr,
    pub sae_srcaddrlen: socklen_t,
    pub sae_dstaddr: *mut Struct_sockaddr,
    pub sae_dstaddrlen: socklen_t,
}
impl ::std::clone::Clone for Struct_sa_endpoints {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_sa_endpoints {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type sa_endpoints_t = Struct_sa_endpoints;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_linger {
    pub l_onoff: ::std::os::raw::c_int,
    pub l_linger: ::std::os::raw::c_int,
}
impl ::std::clone::Clone for Struct_linger {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_linger {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_so_np_extensions {
    pub npx_flags: u_int32_t,
    pub npx_mask: u_int32_t,
}
impl ::std::clone::Clone for Struct_so_np_extensions {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_so_np_extensions {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_sockaddr {
    pub sa_len: __uint8_t,
    pub sa_family: sa_family_t,
    pub sa_data: [::std::os::raw::c_char; 14usize],
}
impl ::std::clone::Clone for Struct_sockaddr {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_sockaddr {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_sockproto {
    pub sp_family: __uint16_t,
    pub sp_protocol: __uint16_t,
}
impl ::std::clone::Clone for Struct_sockproto {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_sockproto {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_sockaddr_storage {
    pub ss_len: __uint8_t,
    pub ss_family: sa_family_t,
    pub __ss_pad1: [::std::os::raw::c_char; 6usize],
    pub __ss_align: __int64_t,
    pub __ss_pad2: [::std::os::raw::c_char; 112usize],
}
impl ::std::clone::Clone for Struct_sockaddr_storage {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_sockaddr_storage {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_msghdr {
    pub msg_name: *mut ::std::os::raw::c_void,
    pub msg_namelen: socklen_t,
    pub msg_iov: *mut Struct_iovec,
    pub msg_iovlen: ::std::os::raw::c_int,
    pub msg_control: *mut ::std::os::raw::c_void,
    pub msg_controllen: socklen_t,
    pub msg_flags: ::std::os::raw::c_int,
}
impl ::std::clone::Clone for Struct_msghdr {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_msghdr {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_cmsghdr {
    pub cmsg_len: socklen_t,
    pub cmsg_level: ::std::os::raw::c_int,
    pub cmsg_type: ::std::os::raw::c_int,
}
impl ::std::clone::Clone for Struct_cmsghdr {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_cmsghdr {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_sf_hdtr {
    pub headers: *mut Struct_iovec,
    pub hdr_cnt: ::std::os::raw::c_int,
    pub trailers: *mut Struct_iovec,
    pub trl_cnt: ::std::os::raw::c_int,
}
impl ::std::clone::Clone for Struct_sf_hdtr {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_sf_hdtr {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_in_addr {
    pub s_addr: in_addr_t,
}
impl ::std::clone::Clone for Struct_in_addr {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_in_addr {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_sockaddr_in {
    pub sin_len: __uint8_t,
    pub sin_family: sa_family_t,
    pub sin_port: in_port_t,
    pub sin_addr: Struct_in_addr,
    pub sin_zero: [::std::os::raw::c_char; 8usize],
}
impl ::std::clone::Clone for Struct_sockaddr_in {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_sockaddr_in {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_ip_opts {
    pub ip_dst: Struct_in_addr,
    pub ip_opts: [::std::os::raw::c_char; 40usize],
}
impl ::std::clone::Clone for Struct_ip_opts {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_ip_opts {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_ip_mreq {
    pub imr_multiaddr: Struct_in_addr,
    pub imr_interface: Struct_in_addr,
}
impl ::std::clone::Clone for Struct_ip_mreq {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_ip_mreq {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_ip_mreqn {
    pub imr_multiaddr: Struct_in_addr,
    pub imr_address: Struct_in_addr,
    pub imr_ifindex: ::std::os::raw::c_int,
}
impl ::std::clone::Clone for Struct_ip_mreqn {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_ip_mreqn {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_ip_mreq_source {
    pub imr_multiaddr: Struct_in_addr,
    pub imr_sourceaddr: Struct_in_addr,
    pub imr_interface: Struct_in_addr,
}
impl ::std::clone::Clone for Struct_ip_mreq_source {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_ip_mreq_source {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_group_req {
    pub gr_interface: uint32_t,
    pub gr_group: Struct_sockaddr_storage,
}
impl ::std::clone::Clone for Struct_group_req {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_group_req {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_group_source_req {
    pub gsr_interface: uint32_t,
    pub gsr_group: Struct_sockaddr_storage,
    pub gsr_source: Struct_sockaddr_storage,
}
impl ::std::clone::Clone for Struct_group_source_req {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_group_source_req {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct___msfilterreq {
    pub msfr_ifindex: uint32_t,
    pub msfr_fmode: uint32_t,
    pub msfr_nsrcs: uint32_t,
    pub __msfr_align: uint32_t,
    pub msfr_group: Struct_sockaddr_storage,
    pub msfr_srcs: *mut Struct_sockaddr_storage,
}
impl ::std::clone::Clone for Struct___msfilterreq {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct___msfilterreq {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_in_pktinfo {
    pub ipi_ifindex: ::std::os::raw::c_uint,
    pub ipi_spec_dst: Struct_in_addr,
    pub ipi_addr: Struct_in_addr,
}
impl ::std::clone::Clone for Struct_in_pktinfo {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_in_pktinfo {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_in6_addr {
    pub __u6_addr: Union_Unnamed13,
}
impl ::std::clone::Clone for Struct_in6_addr {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_in6_addr {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Union_Unnamed13 {
    pub _bindgen_data_: [u32; 4usize],
}
impl Union_Unnamed13 {
    pub unsafe fn __u6_addr8(&mut self) -> *mut [__uint8_t; 16usize] {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn __u6_addr16(&mut self) -> *mut [__uint16_t; 8usize] {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn __u6_addr32(&mut self) -> *mut [__uint32_t; 4usize] {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
}
impl ::std::clone::Clone for Union_Unnamed13 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Union_Unnamed13 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_sockaddr_in6 {
    pub sin6_len: __uint8_t,
    pub sin6_family: sa_family_t,
    pub sin6_port: in_port_t,
    pub sin6_flowinfo: __uint32_t,
    pub sin6_addr: Struct_in6_addr,
    pub sin6_scope_id: __uint32_t,
}
impl ::std::clone::Clone for Struct_sockaddr_in6 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_sockaddr_in6 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_ipv6_mreq {
    pub ipv6mr_multiaddr: Struct_in6_addr,
    pub ipv6mr_interface: ::std::os::raw::c_uint,
}
impl ::std::clone::Clone for Struct_ipv6_mreq {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_ipv6_mreq {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_in6_pktinfo {
    pub ipi6_addr: Struct_in6_addr,
    pub ipi6_ifindex: ::std::os::raw::c_uint,
}
impl ::std::clone::Clone for Struct_in6_pktinfo {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_in6_pktinfo {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_ip6_mtuinfo {
    pub ip6m_addr: Struct_sockaddr_in6,
    pub ip6m_mtu: uint32_t,
}
impl ::std::clone::Clone for Struct_ip6_mtuinfo {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_ip6_mtuinfo {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_hostent {
    pub h_name: *mut ::std::os::raw::c_char,
    pub h_aliases: *mut *mut ::std::os::raw::c_char,
    pub h_addrtype: ::std::os::raw::c_int,
    pub h_length: ::std::os::raw::c_int,
    pub h_addr_list: *mut *mut ::std::os::raw::c_char,
}
impl ::std::clone::Clone for Struct_hostent {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_hostent {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_netent {
    pub n_name: *mut ::std::os::raw::c_char,
    pub n_aliases: *mut *mut ::std::os::raw::c_char,
    pub n_addrtype: ::std::os::raw::c_int,
    pub n_net: uint32_t,
}
impl ::std::clone::Clone for Struct_netent {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_netent {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_servent {
    pub s_name: *mut ::std::os::raw::c_char,
    pub s_aliases: *mut *mut ::std::os::raw::c_char,
    pub s_port: ::std::os::raw::c_int,
    pub s_proto: *mut ::std::os::raw::c_char,
}
impl ::std::clone::Clone for Struct_servent {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_servent {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_protoent {
    pub p_name: *mut ::std::os::raw::c_char,
    pub p_aliases: *mut *mut ::std::os::raw::c_char,
    pub p_proto: ::std::os::raw::c_int,
}
impl ::std::clone::Clone for Struct_protoent {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_protoent {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_addrinfo {
    pub ai_flags: ::std::os::raw::c_int,
    pub ai_family: ::std::os::raw::c_int,
    pub ai_socktype: ::std::os::raw::c_int,
    pub ai_protocol: ::std::os::raw::c_int,
    pub ai_addrlen: socklen_t,
    pub ai_canonname: *mut ::std::os::raw::c_char,
    pub ai_addr: *mut Struct_sockaddr,
    pub ai_next: *mut Struct_addrinfo,
}
impl ::std::clone::Clone for Struct_addrinfo {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_addrinfo {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_rpcent {
    pub r_name: *mut ::std::os::raw::c_char,
    pub r_aliases: *mut *mut ::std::os::raw::c_char,
    pub r_number: ::std::os::raw::c_int,
}
impl ::std::clone::Clone for Struct_rpcent {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_rpcent {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_accessx_descriptor {
    pub ad_name_offset: ::std::os::raw::c_uint,
    pub ad_flags: ::std::os::raw::c_int,
    pub ad_pad: [::std::os::raw::c_int; 2usize],
}
impl ::std::clone::Clone for Struct_accessx_descriptor {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_accessx_descriptor {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type uuid_t = __darwin_uuid_t;
pub enum Struct_fssearchblock { }
pub enum Struct_searchstate { }
#[repr(C)]
#[derive(Copy)]
pub struct Struct_sched_param {
    pub sched_priority: ::std::os::raw::c_int,
    pub __opaque: [::std::os::raw::c_char; 4usize],
}
impl ::std::clone::Clone for Struct_sched_param {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_sched_param {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[derive(Clone, Copy)]
#[repr(u32)]
pub enum Enum_Unnamed14 {
    QOS_CLASS_USER_INTERACTIVE = 33,
    QOS_CLASS_USER_INITIATED = 25,
    QOS_CLASS_DEFAULT = 21,
    QOS_CLASS_UTILITY = 17,
    QOS_CLASS_BACKGROUND = 9,
    QOS_CLASS_UNSPECIFIED = 0,
}
pub type qos_class_t = ::std::os::raw::c_uint;
pub enum Struct_pthread_override_s { }
pub type pthread_override_t = *mut Struct_pthread_override_s;
pub type mach_port_t = __darwin_mach_port_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_dirent {
    pub d_ino: __uint64_t,
    pub d_seekoff: __uint64_t,
    pub d_reclen: __uint16_t,
    pub d_namlen: __uint16_t,
    pub d_type: __uint8_t,
    pub d_name: [::std::os::raw::c_char; 1024usize],
}
impl ::std::clone::Clone for Struct_dirent {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_dirent {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub enum Struct__telldir { }
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed15 {
    pub __dd_fd: ::std::os::raw::c_int,
    pub __dd_loc: ::std::os::raw::c_long,
    pub __dd_size: ::std::os::raw::c_long,
    pub __dd_buf: *mut ::std::os::raw::c_char,
    pub __dd_len: ::std::os::raw::c_int,
    pub __dd_seek: ::std::os::raw::c_long,
    pub __dd_rewind: ::std::os::raw::c_long,
    pub __dd_flags: ::std::os::raw::c_int,
    pub __dd_lock: __darwin_pthread_mutex_t,
    pub __dd_td: *mut Struct__telldir,
}
impl ::std::clone::Clone for Struct_Unnamed15 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed15 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type DIR = Struct_Unnamed15;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_passwd {
    pub pw_name: *mut ::std::os::raw::c_char,
    pub pw_passwd: *mut ::std::os::raw::c_char,
    pub pw_uid: uid_t,
    pub pw_gid: gid_t,
    pub pw_change: __darwin_time_t,
    pub pw_class: *mut ::std::os::raw::c_char,
    pub pw_gecos: *mut ::std::os::raw::c_char,
    pub pw_dir: *mut ::std::os::raw::c_char,
    pub pw_shell: *mut ::std::os::raw::c_char,
    pub pw_expire: __darwin_time_t,
}
impl ::std::clone::Clone for Struct_passwd {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_passwd {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type uuid_string_t = __darwin_uuid_string_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_group {
    pub gr_name: *mut ::std::os::raw::c_char,
    pub gr_passwd: *mut ::std::os::raw::c_char,
    pub gr_gid: gid_t,
    pub gr_mem: *mut *mut ::std::os::raw::c_char,
}
impl ::std::clone::Clone for Struct_group {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_group {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_utimbuf {
    pub actime: time_t,
    pub modtime: time_t,
}
impl ::std::clone::Clone for Struct_utimbuf {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_utimbuf {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed16 {
    pub quot: intmax_t,
    pub rem: intmax_t,
}
impl ::std::clone::Clone for Struct_Unnamed16 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed16 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type imaxdiv_t = Struct_Unnamed16;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_timeval64 {
    pub tv_sec: __int64_t,
    pub tv_usec: __int64_t,
}
impl ::std::clone::Clone for Struct_timeval64 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_timeval64 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_itimerval {
    pub it_interval: Struct_timeval,
    pub it_value: Struct_timeval,
}
impl ::std::clone::Clone for Struct_itimerval {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_itimerval {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_timezone {
    pub tz_minuteswest: ::std::os::raw::c_int,
    pub tz_dsttime: ::std::os::raw::c_int,
}
impl ::std::clone::Clone for Struct_timezone {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_timezone {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_clockinfo {
    pub hz: ::std::os::raw::c_int,
    pub tick: ::std::os::raw::c_int,
    pub tickadj: ::std::os::raw::c_int,
    pub stathz: ::std::os::raw::c_int,
    pub profhz: ::std::os::raw::c_int,
}
impl ::std::clone::Clone for Struct_clockinfo {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_clockinfo {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_ostat {
    pub st_dev: __uint16_t,
    pub st_ino: ino_t,
    pub st_mode: mode_t,
    pub st_nlink: nlink_t,
    pub st_uid: __uint16_t,
    pub st_gid: __uint16_t,
    pub st_rdev: __uint16_t,
    pub st_size: __int32_t,
    pub st_atimespec: Struct_timespec,
    pub st_mtimespec: Struct_timespec,
    pub st_ctimespec: Struct_timespec,
    pub st_blksize: __int32_t,
    pub st_blocks: __int32_t,
    pub st_flags: __uint32_t,
    pub st_gen: __uint32_t,
}
impl ::std::clone::Clone for Struct_ostat {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_ostat {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_stat {
    pub st_dev: dev_t,
    pub st_mode: mode_t,
    pub st_nlink: nlink_t,
    pub st_ino: __darwin_ino64_t,
    pub st_uid: uid_t,
    pub st_gid: gid_t,
    pub st_rdev: dev_t,
    pub st_atimespec: Struct_timespec,
    pub st_mtimespec: Struct_timespec,
    pub st_ctimespec: Struct_timespec,
    pub st_birthtimespec: Struct_timespec,
    pub st_size: off_t,
    pub st_blocks: blkcnt_t,
    pub st_blksize: blksize_t,
    pub st_flags: __uint32_t,
    pub st_gen: __uint32_t,
    pub st_lspare: __int32_t,
    pub st_qspare: [__int64_t; 2usize],
}
impl ::std::clone::Clone for Struct_stat {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_stat {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_stat64 {
    pub st_dev: dev_t,
    pub st_mode: mode_t,
    pub st_nlink: nlink_t,
    pub st_ino: __darwin_ino64_t,
    pub st_uid: uid_t,
    pub st_gid: gid_t,
    pub st_rdev: dev_t,
    pub st_atimespec: Struct_timespec,
    pub st_mtimespec: Struct_timespec,
    pub st_ctimespec: Struct_timespec,
    pub st_birthtimespec: Struct_timespec,
    pub st_size: off_t,
    pub st_blocks: blkcnt_t,
    pub st_blksize: blksize_t,
    pub st_flags: __uint32_t,
    pub st_gen: __uint32_t,
    pub st_lspare: __int32_t,
    pub st_qspare: [__int64_t; 2usize],
}
impl ::std::clone::Clone for Struct_stat64 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_stat64 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_winsize {
    pub ws_row: ::std::os::raw::c_ushort,
    pub ws_col: ::std::os::raw::c_ushort,
    pub ws_xpixel: ::std::os::raw::c_ushort,
    pub ws_ypixel: ::std::os::raw::c_ushort,
}
impl ::std::clone::Clone for Struct_winsize {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_winsize {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_ttysize {
    pub ts_lines: ::std::os::raw::c_ushort,
    pub ts_cols: ::std::os::raw::c_ushort,
    pub ts_xxx: ::std::os::raw::c_ushort,
    pub ts_yyy: ::std::os::raw::c_ushort,
}
impl ::std::clone::Clone for Struct_ttysize {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_ttysize {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub enum Struct_ucred { }
pub type kauth_cred_t = *mut Struct_ucred;
pub enum Struct_posix_cred { }
pub type posix_cred_t = *mut Struct_posix_cred;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_sockaddr_un {
    pub sun_len: ::std::os::raw::c_uchar,
    pub sun_family: sa_family_t,
    pub sun_path: [::std::os::raw::c_char; 104usize],
}
impl ::std::clone::Clone for Struct_sockaddr_un {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_sockaddr_un {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[derive(Clone, Copy)]
#[repr(u32)]
pub enum Enum_uio_rw { UIO_READ = 0, UIO_WRITE = 1, }
#[repr(C)]
#[derive(Copy)]
pub struct Struct_ifaddrs {
    pub ifa_next: *mut Struct_ifaddrs,
    pub ifa_name: *mut ::std::os::raw::c_char,
    pub ifa_flags: ::std::os::raw::c_uint,
    pub ifa_addr: *mut Struct_sockaddr,
    pub ifa_netmask: *mut Struct_sockaddr,
    pub ifa_dstaddr: *mut Struct_sockaddr,
    pub ifa_data: *mut ::std::os::raw::c_void,
}
impl ::std::clone::Clone for Struct_ifaddrs {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_ifaddrs {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_ifmaddrs {
    pub ifma_next: *mut Struct_ifmaddrs,
    pub ifma_name: *mut Struct_sockaddr,
    pub ifma_addr: *mut Struct_sockaddr,
    pub ifma_lladdr: *mut Struct_sockaddr,
}
impl ::std::clone::Clone for Struct_ifmaddrs {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_ifmaddrs {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type tcp_seq = __uint32_t;
pub type tcp_cc = __uint32_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_tcphdr {
    pub th_sport: ::std::os::raw::c_ushort,
    pub th_dport: ::std::os::raw::c_ushort,
    pub th_seq: tcp_seq,
    pub th_ack: tcp_seq,
    pub _bindgen_bitfield_1_: ::std::os::raw::c_uint,
    pub th_flags: ::std::os::raw::c_uchar,
    pub th_win: ::std::os::raw::c_ushort,
    pub th_sum: ::std::os::raw::c_ushort,
    pub th_urp: ::std::os::raw::c_ushort,
}
impl ::std::clone::Clone for Struct_tcphdr {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_tcphdr {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_tcp_connection_info {
    pub tcpi_state: u_int8_t,
    pub tcpi_snd_wscale: u_int8_t,
    pub tcpi_rcv_wscale: u_int8_t,
    pub __pad1: u_int8_t,
    pub tcpi_options: u_int32_t,
    pub tcpi_flags: u_int32_t,
    pub tcpi_rto: u_int32_t,
    pub tcpi_maxseg: u_int32_t,
    pub tcpi_snd_ssthresh: u_int32_t,
    pub tcpi_snd_cwnd: u_int32_t,
    pub tcpi_snd_wnd: u_int32_t,
    pub tcpi_snd_sbbytes: u_int32_t,
    pub tcpi_rcv_wnd: u_int32_t,
    pub tcpi_rttcur: u_int32_t,
    pub tcpi_srtt: u_int32_t,
    pub tcpi_rttvar: u_int32_t,
    pub _bindgen_bitfield_1_: u_int32_t,
    pub _bindgen_bitfield_2_: u_int32_t,
    pub _bindgen_bitfield_3_: u_int32_t,
    pub _bindgen_bitfield_4_: u_int32_t,
    pub _bindgen_bitfield_5_: u_int32_t,
    pub _bindgen_bitfield_6_: u_int32_t,
    pub _bindgen_bitfield_7_: u_int32_t,
    pub _bindgen_bitfield_8_: u_int32_t,
    pub _bindgen_bitfield_9_: u_int32_t,
    pub _bindgen_bitfield_10_: u_int32_t,
    pub tcpi_txpackets: u_int64_t,
    pub tcpi_txbytes: u_int64_t,
    pub tcpi_txretransmitbytes: u_int64_t,
    pub tcpi_rxpackets: u_int64_t,
    pub tcpi_rxbytes: u_int64_t,
    pub tcpi_rxoutoforderbytes: u_int64_t,
}
impl ::std::clone::Clone for Struct_tcp_connection_info {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_tcp_connection_info {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[derive(Clone, Copy)]
#[repr(u32)]
pub enum Enum_Unnamed17 {
    OSUnknownByteOrder = 0,
    OSLittleEndian = 1,
    OSBigEndian = 2,
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed18 {
    pub mig_vers: ::std::os::raw::c_uchar,
    pub if_vers: ::std::os::raw::c_uchar,
    pub reserved1: ::std::os::raw::c_uchar,
    pub mig_encoding: ::std::os::raw::c_uchar,
    pub int_rep: ::std::os::raw::c_uchar,
    pub char_rep: ::std::os::raw::c_uchar,
    pub float_rep: ::std::os::raw::c_uchar,
    pub reserved2: ::std::os::raw::c_uchar,
}
impl ::std::clone::Clone for Struct_Unnamed18 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed18 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type NDR_record_t = Struct_Unnamed18;
pub type boolean_t = ::std::os::raw::c_uint;
pub type kern_return_t = ::std::os::raw::c_int;
pub type natural_t = __darwin_natural_t;
pub type integer_t = ::std::os::raw::c_int;
pub type vm_offset_t = uintptr_t;
pub type vm_size_t = uintptr_t;
pub type mach_vm_address_t = uint64_t;
pub type mach_vm_offset_t = uint64_t;
pub type mach_vm_size_t = uint64_t;
pub type vm_map_offset_t = uint64_t;
pub type vm_map_address_t = uint64_t;
pub type vm_map_size_t = uint64_t;
pub type mach_port_context_t = mach_vm_address_t;
pub type mach_port_name_t = natural_t;
pub type mach_port_name_array_t = *mut mach_port_name_t;
pub type mach_port_array_t = *mut mach_port_t;
pub type mach_port_right_t = natural_t;
pub type mach_port_type_t = natural_t;
pub type mach_port_type_array_t = *mut mach_port_type_t;
pub type mach_port_urefs_t = natural_t;
pub type mach_port_delta_t = integer_t;
pub type mach_port_seqno_t = natural_t;
pub type mach_port_mscount_t = natural_t;
pub type mach_port_msgcount_t = natural_t;
pub type mach_port_rights_t = natural_t;
pub type mach_port_srights_t = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_mach_port_status {
    pub mps_pset: mach_port_rights_t,
    pub mps_seqno: mach_port_seqno_t,
    pub mps_mscount: mach_port_mscount_t,
    pub mps_qlimit: mach_port_msgcount_t,
    pub mps_msgcount: mach_port_msgcount_t,
    pub mps_sorights: mach_port_rights_t,
    pub mps_srights: boolean_t,
    pub mps_pdrequest: boolean_t,
    pub mps_nsrequest: boolean_t,
    pub mps_flags: natural_t,
}
impl ::std::clone::Clone for Struct_mach_port_status {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_mach_port_status {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type mach_port_status_t = Struct_mach_port_status;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_mach_port_limits {
    pub mpl_qlimit: mach_port_msgcount_t,
}
impl ::std::clone::Clone for Struct_mach_port_limits {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_mach_port_limits {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type mach_port_limits_t = Struct_mach_port_limits;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_mach_port_info_ext {
    pub mpie_status: mach_port_status_t,
    pub mpie_boost_cnt: mach_port_msgcount_t,
    pub reserved: [uint32_t; 6usize],
}
impl ::std::clone::Clone for Struct_mach_port_info_ext {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_mach_port_info_ext {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type mach_port_info_ext_t = Struct_mach_port_info_ext;
pub type mach_port_info_t = *mut integer_t;
pub type mach_port_flavor_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_mach_port_qos {
    pub _bindgen_bitfield_1_: ::std::os::raw::c_uint,
    pub _bindgen_bitfield_2_: boolean_t,
    pub len: natural_t,
}
impl ::std::clone::Clone for Struct_mach_port_qos {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_mach_port_qos {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type mach_port_qos_t = Struct_mach_port_qos;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_mach_port_options {
    pub flags: uint32_t,
    pub mpl: mach_port_limits_t,
    pub reserved: [uint64_t; 2usize],
}
impl ::std::clone::Clone for Struct_mach_port_options {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_mach_port_options {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type mach_port_options_t = Struct_mach_port_options;
pub type mach_port_options_ptr_t = *mut mach_port_options_t;
#[derive(Clone, Copy)]
#[repr(u32)]
pub enum Enum_mach_port_guard_exception_codes {
    kGUARD_EXC_DESTROY = 1,
    kGUARD_EXC_MOD_REFS = 2,
    kGUARD_EXC_SET_CONTEXT = 4,
    kGUARD_EXC_UNGUARDED = 8,
    kGUARD_EXC_INCORRECT_GUARD = 16,
}
pub type mach_msg_timeout_t = natural_t;
pub type mach_msg_bits_t = ::std::os::raw::c_uint;
pub type mach_msg_size_t = natural_t;
pub type mach_msg_id_t = integer_t;
pub type mach_msg_type_name_t = ::std::os::raw::c_uint;
pub type mach_msg_copy_options_t = ::std::os::raw::c_uint;
pub type mach_msg_descriptor_type_t = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed19 {
    pub pad1: natural_t,
    pub pad2: mach_msg_size_t,
    pub _bindgen_bitfield_1_: ::std::os::raw::c_uint,
    pub _bindgen_bitfield_2_: mach_msg_descriptor_type_t,
}
impl ::std::clone::Clone for Struct_Unnamed19 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed19 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type mach_msg_type_descriptor_t = Struct_Unnamed19;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed20 {
    pub name: mach_port_t,
    pub pad1: mach_msg_size_t,
    pub _bindgen_bitfield_1_: ::std::os::raw::c_uint,
    pub _bindgen_bitfield_2_: mach_msg_type_name_t,
    pub _bindgen_bitfield_3_: mach_msg_descriptor_type_t,
}
impl ::std::clone::Clone for Struct_Unnamed20 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed20 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type mach_msg_port_descriptor_t = Struct_Unnamed20;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed21 {
    pub address: uint32_t,
    pub size: mach_msg_size_t,
    pub _bindgen_bitfield_1_: boolean_t,
    pub _bindgen_bitfield_2_: mach_msg_copy_options_t,
    pub _bindgen_bitfield_3_: ::std::os::raw::c_uint,
    pub _bindgen_bitfield_4_: mach_msg_descriptor_type_t,
}
impl ::std::clone::Clone for Struct_Unnamed21 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed21 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type mach_msg_ool_descriptor32_t = Struct_Unnamed21;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed22 {
    pub address: uint64_t,
    pub _bindgen_bitfield_1_: boolean_t,
    pub _bindgen_bitfield_2_: mach_msg_copy_options_t,
    pub _bindgen_bitfield_3_: ::std::os::raw::c_uint,
    pub _bindgen_bitfield_4_: mach_msg_descriptor_type_t,
    pub size: mach_msg_size_t,
}
impl ::std::clone::Clone for Struct_Unnamed22 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed22 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type mach_msg_ool_descriptor64_t = Struct_Unnamed22;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed23 {
    pub address: *mut ::std::os::raw::c_void,
    pub _bindgen_bitfield_1_: boolean_t,
    pub _bindgen_bitfield_2_: mach_msg_copy_options_t,
    pub _bindgen_bitfield_3_: ::std::os::raw::c_uint,
    pub _bindgen_bitfield_4_: mach_msg_descriptor_type_t,
    pub size: mach_msg_size_t,
}
impl ::std::clone::Clone for Struct_Unnamed23 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed23 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type mach_msg_ool_descriptor_t = Struct_Unnamed23;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed24 {
    pub address: uint32_t,
    pub count: mach_msg_size_t,
    pub _bindgen_bitfield_1_: boolean_t,
    pub _bindgen_bitfield_2_: mach_msg_copy_options_t,
    pub _bindgen_bitfield_3_: mach_msg_type_name_t,
    pub _bindgen_bitfield_4_: mach_msg_descriptor_type_t,
}
impl ::std::clone::Clone for Struct_Unnamed24 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed24 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type mach_msg_ool_ports_descriptor32_t = Struct_Unnamed24;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed25 {
    pub address: uint64_t,
    pub _bindgen_bitfield_1_: boolean_t,
    pub _bindgen_bitfield_2_: mach_msg_copy_options_t,
    pub _bindgen_bitfield_3_: mach_msg_type_name_t,
    pub _bindgen_bitfield_4_: mach_msg_descriptor_type_t,
    pub count: mach_msg_size_t,
}
impl ::std::clone::Clone for Struct_Unnamed25 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed25 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type mach_msg_ool_ports_descriptor64_t = Struct_Unnamed25;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed26 {
    pub address: *mut ::std::os::raw::c_void,
    pub _bindgen_bitfield_1_: boolean_t,
    pub _bindgen_bitfield_2_: mach_msg_copy_options_t,
    pub _bindgen_bitfield_3_: mach_msg_type_name_t,
    pub _bindgen_bitfield_4_: mach_msg_descriptor_type_t,
    pub count: mach_msg_size_t,
}
impl ::std::clone::Clone for Struct_Unnamed26 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed26 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type mach_msg_ool_ports_descriptor_t = Struct_Unnamed26;
#[repr(C)]
#[derive(Copy)]
pub struct Union_Unnamed27 {
    pub _bindgen_data_: [u32; 4usize],
}
impl Union_Unnamed27 {
    pub unsafe fn port(&mut self) -> *mut mach_msg_port_descriptor_t {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn out_of_line(&mut self) -> *mut mach_msg_ool_descriptor_t {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn ool_ports(&mut self)
     -> *mut mach_msg_ool_ports_descriptor_t {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn _type(&mut self) -> *mut mach_msg_type_descriptor_t {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
}
impl ::std::clone::Clone for Union_Unnamed27 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Union_Unnamed27 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type mach_msg_descriptor_t = Union_Unnamed27;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed28 {
    pub msgh_descriptor_count: mach_msg_size_t,
}
impl ::std::clone::Clone for Struct_Unnamed28 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed28 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type mach_msg_body_t = Struct_Unnamed28;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed29 {
    pub msgh_bits: mach_msg_bits_t,
    pub msgh_size: mach_msg_size_t,
    pub msgh_remote_port: mach_port_t,
    pub msgh_local_port: mach_port_t,
    pub msgh_voucher_port: mach_port_name_t,
    pub msgh_id: mach_msg_id_t,
}
impl ::std::clone::Clone for Struct_Unnamed29 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed29 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type mach_msg_header_t = Struct_Unnamed29;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed30 {
    pub header: mach_msg_header_t,
    pub body: mach_msg_body_t,
}
impl ::std::clone::Clone for Struct_Unnamed30 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed30 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type mach_msg_base_t = Struct_Unnamed30;
pub type mach_msg_trailer_type_t = ::std::os::raw::c_uint;
pub type mach_msg_trailer_size_t = ::std::os::raw::c_uint;
pub type mach_msg_trailer_info_t = *mut ::std::os::raw::c_char;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed31 {
    pub msgh_trailer_type: mach_msg_trailer_type_t,
    pub msgh_trailer_size: mach_msg_trailer_size_t,
}
impl ::std::clone::Clone for Struct_Unnamed31 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed31 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type mach_msg_trailer_t = Struct_Unnamed31;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed32 {
    pub msgh_trailer_type: mach_msg_trailer_type_t,
    pub msgh_trailer_size: mach_msg_trailer_size_t,
    pub msgh_seqno: mach_port_seqno_t,
}
impl ::std::clone::Clone for Struct_Unnamed32 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed32 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type mach_msg_seqno_trailer_t = Struct_Unnamed32;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed33 {
    pub val: [::std::os::raw::c_uint; 2usize],
}
impl ::std::clone::Clone for Struct_Unnamed33 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed33 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type security_token_t = Struct_Unnamed33;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed34 {
    pub msgh_trailer_type: mach_msg_trailer_type_t,
    pub msgh_trailer_size: mach_msg_trailer_size_t,
    pub msgh_seqno: mach_port_seqno_t,
    pub msgh_sender: security_token_t,
}
impl ::std::clone::Clone for Struct_Unnamed34 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed34 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type mach_msg_security_trailer_t = Struct_Unnamed34;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed35 {
    pub val: [::std::os::raw::c_uint; 8usize],
}
impl ::std::clone::Clone for Struct_Unnamed35 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed35 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type audit_token_t = Struct_Unnamed35;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed36 {
    pub msgh_trailer_type: mach_msg_trailer_type_t,
    pub msgh_trailer_size: mach_msg_trailer_size_t,
    pub msgh_seqno: mach_port_seqno_t,
    pub msgh_sender: security_token_t,
    pub msgh_audit: audit_token_t,
}
impl ::std::clone::Clone for Struct_Unnamed36 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed36 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type mach_msg_audit_trailer_t = Struct_Unnamed36;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed37 {
    pub msgh_trailer_type: mach_msg_trailer_type_t,
    pub msgh_trailer_size: mach_msg_trailer_size_t,
    pub msgh_seqno: mach_port_seqno_t,
    pub msgh_sender: security_token_t,
    pub msgh_audit: audit_token_t,
    pub msgh_context: mach_port_context_t,
}
impl ::std::clone::Clone for Struct_Unnamed37 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed37 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type mach_msg_context_trailer_t = Struct_Unnamed37;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed38 {
    pub sender: mach_port_name_t,
}
impl ::std::clone::Clone for Struct_Unnamed38 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed38 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type msg_labels_t = Struct_Unnamed38;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed39 {
    pub msgh_trailer_type: mach_msg_trailer_type_t,
    pub msgh_trailer_size: mach_msg_trailer_size_t,
    pub msgh_seqno: mach_port_seqno_t,
    pub msgh_sender: security_token_t,
    pub msgh_audit: audit_token_t,
    pub msgh_context: mach_port_context_t,
    pub msgh_ad: ::std::os::raw::c_int,
    pub msgh_labels: msg_labels_t,
}
impl ::std::clone::Clone for Struct_Unnamed39 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed39 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type mach_msg_mac_trailer_t = Struct_Unnamed39;
pub type mach_msg_max_trailer_t = mach_msg_mac_trailer_t;
pub type mach_msg_format_0_trailer_t = mach_msg_security_trailer_t;
pub type mach_msg_options_t = integer_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed40 {
    pub header: mach_msg_header_t,
}
impl ::std::clone::Clone for Struct_Unnamed40 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed40 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type mach_msg_empty_send_t = Struct_Unnamed40;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed41 {
    pub header: mach_msg_header_t,
    pub trailer: mach_msg_trailer_t,
}
impl ::std::clone::Clone for Struct_Unnamed41 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed41 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type mach_msg_empty_rcv_t = Struct_Unnamed41;
#[repr(C)]
#[derive(Copy)]
pub struct Union_Unnamed42 {
    pub _bindgen_data_: [u32; 8usize],
}
impl Union_Unnamed42 {
    pub unsafe fn send(&mut self) -> *mut mach_msg_empty_send_t {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn rcv(&mut self) -> *mut mach_msg_empty_rcv_t {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
}
impl ::std::clone::Clone for Union_Unnamed42 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Union_Unnamed42 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type mach_msg_empty_t = Union_Unnamed42;
pub type mach_msg_type_size_t = natural_t;
pub type mach_msg_type_number_t = natural_t;
pub type mach_msg_option_t = integer_t;
pub type mach_msg_return_t = kern_return_t;
pub type notify_port_t = mach_port_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed43 {
    pub not_header: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub not_port: mach_port_name_t,
    pub trailer: mach_msg_format_0_trailer_t,
}
impl ::std::clone::Clone for Struct_Unnamed43 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed43 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type mach_port_deleted_notification_t = Struct_Unnamed43;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed44 {
    pub not_header: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub not_port: mach_port_name_t,
    pub trailer: mach_msg_format_0_trailer_t,
}
impl ::std::clone::Clone for Struct_Unnamed44 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed44 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type mach_send_possible_notification_t = Struct_Unnamed44;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed45 {
    pub not_header: mach_msg_header_t,
    pub not_body: mach_msg_body_t,
    pub not_port: mach_msg_port_descriptor_t,
    pub trailer: mach_msg_format_0_trailer_t,
}
impl ::std::clone::Clone for Struct_Unnamed45 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed45 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type mach_port_destroyed_notification_t = Struct_Unnamed45;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed46 {
    pub not_header: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub not_count: mach_msg_type_number_t,
    pub trailer: mach_msg_format_0_trailer_t,
}
impl ::std::clone::Clone for Struct_Unnamed46 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed46 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type mach_no_senders_notification_t = Struct_Unnamed46;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed47 {
    pub not_header: mach_msg_header_t,
    pub trailer: mach_msg_format_0_trailer_t,
}
impl ::std::clone::Clone for Struct_Unnamed47 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed47 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type mach_send_once_notification_t = Struct_Unnamed47;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed48 {
    pub not_header: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub not_port: mach_port_name_t,
    pub trailer: mach_msg_format_0_trailer_t,
}
impl ::std::clone::Clone for Struct_Unnamed48 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed48 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type mach_dead_name_notification_t = Struct_Unnamed48;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_vm_statistics {
    pub free_count: natural_t,
    pub active_count: natural_t,
    pub inactive_count: natural_t,
    pub wire_count: natural_t,
    pub zero_fill_count: natural_t,
    pub reactivations: natural_t,
    pub pageins: natural_t,
    pub pageouts: natural_t,
    pub faults: natural_t,
    pub cow_faults: natural_t,
    pub lookups: natural_t,
    pub hits: natural_t,
    pub purgeable_count: natural_t,
    pub purges: natural_t,
    pub speculative_count: natural_t,
}
impl ::std::clone::Clone for Struct_vm_statistics {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_vm_statistics {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type vm_statistics_t = *mut Struct_vm_statistics;
pub type vm_statistics_data_t = Struct_vm_statistics;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_vm_statistics64 {
    pub free_count: natural_t,
    pub active_count: natural_t,
    pub inactive_count: natural_t,
    pub wire_count: natural_t,
    pub zero_fill_count: uint64_t,
    pub reactivations: uint64_t,
    pub pageins: uint64_t,
    pub pageouts: uint64_t,
    pub faults: uint64_t,
    pub cow_faults: uint64_t,
    pub lookups: uint64_t,
    pub hits: uint64_t,
    pub purges: uint64_t,
    pub purgeable_count: natural_t,
    pub speculative_count: natural_t,
    pub decompressions: uint64_t,
    pub compressions: uint64_t,
    pub swapins: uint64_t,
    pub swapouts: uint64_t,
    pub compressor_page_count: natural_t,
    pub throttled_count: natural_t,
    pub external_page_count: natural_t,
    pub internal_page_count: natural_t,
    pub total_uncompressed_pages_in_compressor: uint64_t,
}
impl ::std::clone::Clone for Struct_vm_statistics64 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_vm_statistics64 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type vm_statistics64_t = *mut Struct_vm_statistics64;
pub type vm_statistics64_data_t = Struct_vm_statistics64;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_vm_extmod_statistics {
    pub task_for_pid_count: int64_t,
    pub task_for_pid_caller_count: int64_t,
    pub thread_creation_count: int64_t,
    pub thread_creation_caller_count: int64_t,
    pub thread_set_state_count: int64_t,
    pub thread_set_state_caller_count: int64_t,
}
impl ::std::clone::Clone for Struct_vm_extmod_statistics {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_vm_extmod_statistics {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type vm_extmod_statistics_t = *mut Struct_vm_extmod_statistics;
pub type vm_extmod_statistics_data_t = Struct_vm_extmod_statistics;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_vm_purgeable_stat {
    pub count: uint64_t,
    pub size: uint64_t,
}
impl ::std::clone::Clone for Struct_vm_purgeable_stat {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_vm_purgeable_stat {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type vm_purgeable_stat_t = Struct_vm_purgeable_stat;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_vm_purgeable_info {
    pub fifo_data: [vm_purgeable_stat_t; 8usize],
    pub obsolete_data: vm_purgeable_stat_t,
    pub lifo_data: [vm_purgeable_stat_t; 8usize],
}
impl ::std::clone::Clone for Struct_vm_purgeable_info {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_vm_purgeable_info {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type vm_purgeable_info_t = *mut Struct_vm_purgeable_info;
pub type cpu_type_t = integer_t;
pub type cpu_subtype_t = integer_t;
pub type cpu_threadtype_t = integer_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_time_value {
    pub seconds: integer_t,
    pub microseconds: integer_t,
}
impl ::std::clone::Clone for Struct_time_value {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_time_value {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type time_value_t = Struct_time_value;
pub type host_info_t = *mut integer_t;
pub type host_info64_t = *mut integer_t;
pub type host_info_data_t = [integer_t; 1024usize];
pub type kernel_version_t = [::std::os::raw::c_char; 512usize];
pub type kernel_boot_info_t = [::std::os::raw::c_char; 4096usize];
pub type host_flavor_t = integer_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_host_basic_info {
    pub max_cpus: integer_t,
    pub avail_cpus: integer_t,
    pub memory_size: natural_t,
    pub cpu_type: cpu_type_t,
    pub cpu_subtype: cpu_subtype_t,
    pub cpu_threadtype: cpu_threadtype_t,
    pub physical_cpu: integer_t,
    pub physical_cpu_max: integer_t,
    pub logical_cpu: integer_t,
    pub logical_cpu_max: integer_t,
    pub max_mem: uint64_t,
}
impl ::std::clone::Clone for Struct_host_basic_info {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_host_basic_info {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type host_basic_info_data_t = Struct_host_basic_info;
pub type host_basic_info_t = *mut Struct_host_basic_info;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_host_sched_info {
    pub min_timeout: integer_t,
    pub min_quantum: integer_t,
}
impl ::std::clone::Clone for Struct_host_sched_info {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_host_sched_info {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type host_sched_info_data_t = Struct_host_sched_info;
pub type host_sched_info_t = *mut Struct_host_sched_info;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_kernel_resource_sizes {
    pub task: natural_t,
    pub thread: natural_t,
    pub port: natural_t,
    pub memory_region: natural_t,
    pub memory_object: natural_t,
}
impl ::std::clone::Clone for Struct_kernel_resource_sizes {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_kernel_resource_sizes {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type kernel_resource_sizes_data_t = Struct_kernel_resource_sizes;
pub type kernel_resource_sizes_t = *mut Struct_kernel_resource_sizes;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_host_priority_info {
    pub kernel_priority: integer_t,
    pub system_priority: integer_t,
    pub server_priority: integer_t,
    pub user_priority: integer_t,
    pub depress_priority: integer_t,
    pub idle_priority: integer_t,
    pub minimum_priority: integer_t,
    pub maximum_priority: integer_t,
}
impl ::std::clone::Clone for Struct_host_priority_info {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_host_priority_info {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type host_priority_info_data_t = Struct_host_priority_info;
pub type host_priority_info_t = *mut Struct_host_priority_info;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_host_load_info {
    pub avenrun: [integer_t; 3usize],
    pub mach_factor: [integer_t; 3usize],
}
impl ::std::clone::Clone for Struct_host_load_info {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_host_load_info {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type host_load_info_data_t = Struct_host_load_info;
pub type host_load_info_t = *mut Struct_host_load_info;
pub type host_purgable_info_data_t = Struct_vm_purgeable_info;
pub type host_purgable_info_t = *mut Struct_vm_purgeable_info;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_host_cpu_load_info {
    pub cpu_ticks: [natural_t; 4usize],
}
impl ::std::clone::Clone for Struct_host_cpu_load_info {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_host_cpu_load_info {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type host_cpu_load_info_data_t = Struct_host_cpu_load_info;
pub type host_cpu_load_info_t = *mut Struct_host_cpu_load_info;
pub type vm_prot_t = ::std::os::raw::c_int;
pub type vm_sync_t = ::std::os::raw::c_uint;
pub type pointer_t = vm_offset_t;
pub type vm_address_t = vm_offset_t;
pub type addr64_t = uint64_t;
pub type reg64_t = uint32_t;
pub type ppnum_t = uint32_t;
pub type vm_map_t = mach_port_t;
pub type vm_object_offset_t = uint64_t;
pub type vm_object_size_t = uint64_t;
pub type upl_t = mach_port_t;
pub type vm_named_entry_t = mach_port_t;
pub type memory_object_offset_t = ::std::os::raw::c_ulonglong;
pub type memory_object_size_t = ::std::os::raw::c_ulonglong;
pub type memory_object_cluster_size_t = natural_t;
pub type memory_object_fault_info_t = *mut natural_t;
pub type vm_object_id_t = ::std::os::raw::c_ulonglong;
pub type memory_object_t = mach_port_t;
pub type memory_object_control_t = mach_port_t;
pub type memory_object_array_t = *mut memory_object_t;
pub type memory_object_name_t = mach_port_t;
pub type memory_object_default_t = mach_port_t;
pub type memory_object_copy_strategy_t = ::std::os::raw::c_int;
pub type memory_object_return_t = ::std::os::raw::c_int;
pub type memory_object_info_t = *mut ::std::os::raw::c_int;
pub type memory_object_flavor_t = ::std::os::raw::c_int;
pub type memory_object_info_data_t = [::std::os::raw::c_int; 1024usize];
#[repr(C)]
#[derive(Copy)]
pub struct Struct_memory_object_perf_info {
    pub cluster_size: memory_object_cluster_size_t,
    pub may_cache: boolean_t,
}
impl ::std::clone::Clone for Struct_memory_object_perf_info {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_memory_object_perf_info {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_memory_object_attr_info {
    pub copy_strategy: memory_object_copy_strategy_t,
    pub cluster_size: memory_object_cluster_size_t,
    pub may_cache_object: boolean_t,
    pub temporary: boolean_t,
}
impl ::std::clone::Clone for Struct_memory_object_attr_info {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_memory_object_attr_info {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_memory_object_behave_info {
    pub copy_strategy: memory_object_copy_strategy_t,
    pub temporary: boolean_t,
    pub invalidate: boolean_t,
    pub silent_overwrite: boolean_t,
    pub advisory_pageout: boolean_t,
}
impl ::std::clone::Clone for Struct_memory_object_behave_info {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_memory_object_behave_info {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type memory_object_behave_info_t = *mut Struct_memory_object_behave_info;
pub type memory_object_behave_info_data_t = Struct_memory_object_behave_info;
pub type memory_object_perf_info_t = *mut Struct_memory_object_perf_info;
pub type memory_object_perf_info_data_t = Struct_memory_object_perf_info;
pub type memory_object_attr_info_t = *mut Struct_memory_object_attr_info;
pub type memory_object_attr_info_data_t = Struct_memory_object_attr_info;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_x86_state_hdr {
    pub flavor: ::std::os::raw::c_int,
    pub count: ::std::os::raw::c_int,
}
impl ::std::clone::Clone for Struct_x86_state_hdr {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_x86_state_hdr {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type x86_state_hdr_t = Struct_x86_state_hdr;
pub type i386_thread_state_t = Struct___darwin_i386_thread_state;
pub type x86_thread_state32_t = Struct___darwin_i386_thread_state;
pub type i386_float_state_t = Struct___darwin_i386_float_state;
pub type x86_float_state32_t = Struct___darwin_i386_float_state;
pub type x86_avx_state32_t = Struct___darwin_i386_avx_state;
pub type i386_exception_state_t = Struct___darwin_i386_exception_state;
pub type x86_exception_state32_t = Struct___darwin_i386_exception_state;
pub type x86_debug_state32_t = Struct___darwin_x86_debug_state32;
pub type x86_thread_state64_t = Struct___darwin_x86_thread_state64;
pub type x86_float_state64_t = Struct___darwin_x86_float_state64;
pub type x86_avx_state64_t = Struct___darwin_x86_avx_state64;
pub type x86_exception_state64_t = Struct___darwin_x86_exception_state64;
pub type x86_debug_state64_t = Struct___darwin_x86_debug_state64;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_x86_thread_state {
    pub tsh: x86_state_hdr_t,
    pub uts: Union_Unnamed49,
}
impl ::std::clone::Clone for Struct_x86_thread_state {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_x86_thread_state {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Union_Unnamed49 {
    pub _bindgen_data_: [u64; 21usize],
}
impl Union_Unnamed49 {
    pub unsafe fn ts32(&mut self) -> *mut x86_thread_state32_t {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn ts64(&mut self) -> *mut x86_thread_state64_t {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
}
impl ::std::clone::Clone for Union_Unnamed49 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Union_Unnamed49 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_x86_float_state {
    pub fsh: x86_state_hdr_t,
    pub ufs: Union_Unnamed50,
}
impl ::std::clone::Clone for Struct_x86_float_state {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_x86_float_state {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Union_Unnamed50 {
    pub _bindgen_data_: [u32; 131usize],
}
impl Union_Unnamed50 {
    pub unsafe fn fs32(&mut self) -> *mut x86_float_state32_t {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn fs64(&mut self) -> *mut x86_float_state64_t {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
}
impl ::std::clone::Clone for Union_Unnamed50 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Union_Unnamed50 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_x86_exception_state {
    pub esh: x86_state_hdr_t,
    pub ues: Union_Unnamed51,
}
impl ::std::clone::Clone for Struct_x86_exception_state {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_x86_exception_state {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Union_Unnamed51 {
    pub _bindgen_data_: [u64; 2usize],
}
impl Union_Unnamed51 {
    pub unsafe fn es32(&mut self) -> *mut x86_exception_state32_t {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn es64(&mut self) -> *mut x86_exception_state64_t {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
}
impl ::std::clone::Clone for Union_Unnamed51 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Union_Unnamed51 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_x86_debug_state {
    pub dsh: x86_state_hdr_t,
    pub uds: Union_Unnamed52,
}
impl ::std::clone::Clone for Struct_x86_debug_state {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_x86_debug_state {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Union_Unnamed52 {
    pub _bindgen_data_: [u64; 8usize],
}
impl Union_Unnamed52 {
    pub unsafe fn ds32(&mut self) -> *mut x86_debug_state32_t {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn ds64(&mut self) -> *mut x86_debug_state64_t {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
}
impl ::std::clone::Clone for Union_Unnamed52 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Union_Unnamed52 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_x86_avx_state {
    pub ash: x86_state_hdr_t,
    pub ufs: Union_Unnamed53,
}
impl ::std::clone::Clone for Struct_x86_avx_state {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_x86_avx_state {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Union_Unnamed53 {
    pub _bindgen_data_: [u32; 211usize],
}
impl Union_Unnamed53 {
    pub unsafe fn as32(&mut self) -> *mut x86_avx_state32_t {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn as64(&mut self) -> *mut x86_avx_state64_t {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
}
impl ::std::clone::Clone for Union_Unnamed53 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Union_Unnamed53 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type x86_thread_state_t = Struct_x86_thread_state;
pub type x86_float_state_t = Struct_x86_float_state;
pub type x86_exception_state_t = Struct_x86_exception_state;
pub type x86_debug_state_t = Struct_x86_debug_state;
pub type x86_avx_state_t = Struct_x86_avx_state;
pub type thread_state_t = *mut natural_t;
pub type thread_state_data_t = [natural_t; 224usize];
pub type thread_state_flavor_t = ::std::os::raw::c_int;
pub type thread_state_flavor_array_t = *mut thread_state_flavor_t;
pub type exception_type_t = ::std::os::raw::c_int;
pub type exception_data_type_t = integer_t;
pub type mach_exception_data_type_t = int64_t;
pub type exception_behavior_t = ::std::os::raw::c_int;
pub type exception_data_t = *mut exception_data_type_t;
pub type mach_exception_data_t = *mut mach_exception_data_type_t;
pub type exception_mask_t = ::std::os::raw::c_uint;
pub type exception_mask_array_t = *mut exception_mask_t;
pub type exception_behavior_array_t = *mut exception_behavior_t;
pub type exception_flavor_array_t = *mut thread_state_flavor_t;
pub type exception_port_array_t = *mut mach_port_t;
pub type mach_exception_code_t = mach_exception_data_type_t;
pub type mach_exception_subcode_t = mach_exception_data_type_t;
pub type mach_voucher_t = mach_port_t;
pub type mach_voucher_name_t = mach_port_name_t;
pub type mach_voucher_name_array_t = *mut mach_voucher_name_t;
pub type ipc_voucher_t = mach_voucher_t;
pub type mach_voucher_selector_t = uint32_t;
pub type mach_voucher_attr_key_t = uint32_t;
pub type mach_voucher_attr_key_array_t = *mut mach_voucher_attr_key_t;
pub type mach_voucher_attr_content_t = *mut uint8_t;
pub type mach_voucher_attr_content_size_t = uint32_t;
pub type mach_voucher_attr_command_t = uint32_t;
pub type mach_voucher_attr_recipe_command_t = uint32_t;
pub type mach_voucher_attr_recipe_command_array_t =
    *mut mach_voucher_attr_recipe_command_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_mach_voucher_attr_recipe_data {
    pub key: mach_voucher_attr_key_t,
    pub command: mach_voucher_attr_recipe_command_t,
    pub previous_voucher: mach_voucher_name_t,
    pub content_size: mach_voucher_attr_content_size_t,
    pub content: *mut uint8_t,
}
impl ::std::clone::Clone for Struct_mach_voucher_attr_recipe_data {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_mach_voucher_attr_recipe_data {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type mach_voucher_attr_recipe_data_t =
    Struct_mach_voucher_attr_recipe_data;
pub type mach_voucher_attr_recipe_t = *mut mach_voucher_attr_recipe_data_t;
pub type mach_voucher_attr_recipe_size_t = mach_msg_type_number_t;
pub type mach_voucher_attr_raw_recipe_t = *mut uint8_t;
pub type mach_voucher_attr_raw_recipe_array_t =
    mach_voucher_attr_raw_recipe_t;
pub type mach_voucher_attr_raw_recipe_size_t = mach_msg_type_number_t;
pub type mach_voucher_attr_raw_recipe_array_size_t = mach_msg_type_number_t;
pub type mach_voucher_attr_manager_t = mach_port_t;
pub type mach_voucher_attr_control_t = mach_port_t;
pub type ipc_voucher_attr_manager_t = mach_port_t;
pub type ipc_voucher_attr_control_t = mach_port_t;
pub type mach_voucher_attr_value_handle_t = uint64_t;
pub type mach_voucher_attr_value_handle_array_t =
    *mut mach_voucher_attr_value_handle_t;
pub type mach_voucher_attr_value_handle_array_size_t = mach_msg_type_number_t;
pub type mach_voucher_attr_value_reference_t = uint32_t;
pub type mach_voucher_attr_value_flags_t = uint32_t;
pub type mach_voucher_attr_control_flags_t = uint32_t;
pub type mach_voucher_attr_importance_refs = uint32_t;
pub type processor_info_t = *mut integer_t;
pub type processor_info_array_t = *mut integer_t;
pub type processor_info_data_t = [integer_t; 1024usize];
pub type processor_set_info_t = *mut integer_t;
pub type processor_set_info_data_t = [integer_t; 1024usize];
pub type processor_flavor_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_processor_basic_info {
    pub cpu_type: cpu_type_t,
    pub cpu_subtype: cpu_subtype_t,
    pub running: boolean_t,
    pub slot_num: ::std::os::raw::c_int,
    pub is_master: boolean_t,
}
impl ::std::clone::Clone for Struct_processor_basic_info {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_processor_basic_info {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type processor_basic_info_data_t = Struct_processor_basic_info;
pub type processor_basic_info_t = *mut Struct_processor_basic_info;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_processor_cpu_load_info {
    pub cpu_ticks: [::std::os::raw::c_uint; 4usize],
}
impl ::std::clone::Clone for Struct_processor_cpu_load_info {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_processor_cpu_load_info {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type processor_cpu_load_info_data_t = Struct_processor_cpu_load_info;
pub type processor_cpu_load_info_t = *mut Struct_processor_cpu_load_info;
pub type processor_set_flavor_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_processor_set_basic_info {
    pub processor_count: ::std::os::raw::c_int,
    pub default_policy: ::std::os::raw::c_int,
}
impl ::std::clone::Clone for Struct_processor_set_basic_info {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_processor_set_basic_info {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type processor_set_basic_info_data_t = Struct_processor_set_basic_info;
pub type processor_set_basic_info_t = *mut Struct_processor_set_basic_info;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_processor_set_load_info {
    pub task_count: ::std::os::raw::c_int,
    pub thread_count: ::std::os::raw::c_int,
    pub load_average: integer_t,
    pub mach_factor: integer_t,
}
impl ::std::clone::Clone for Struct_processor_set_load_info {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_processor_set_load_info {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type processor_set_load_info_data_t = Struct_processor_set_load_info;
pub type processor_set_load_info_t = *mut Struct_processor_set_load_info;
pub type policy_t = ::std::os::raw::c_int;
pub type policy_info_t = *mut integer_t;
pub type policy_base_t = *mut integer_t;
pub type policy_limit_t = *mut integer_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_policy_timeshare_base {
    pub base_priority: integer_t,
}
impl ::std::clone::Clone for Struct_policy_timeshare_base {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_policy_timeshare_base {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_policy_timeshare_limit {
    pub max_priority: integer_t,
}
impl ::std::clone::Clone for Struct_policy_timeshare_limit {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_policy_timeshare_limit {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_policy_timeshare_info {
    pub max_priority: integer_t,
    pub base_priority: integer_t,
    pub cur_priority: integer_t,
    pub depressed: boolean_t,
    pub depress_priority: integer_t,
}
impl ::std::clone::Clone for Struct_policy_timeshare_info {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_policy_timeshare_info {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type policy_timeshare_base_t = *mut Struct_policy_timeshare_base;
pub type policy_timeshare_limit_t = *mut Struct_policy_timeshare_limit;
pub type policy_timeshare_info_t = *mut Struct_policy_timeshare_info;
pub type policy_timeshare_base_data_t = Struct_policy_timeshare_base;
pub type policy_timeshare_limit_data_t = Struct_policy_timeshare_limit;
pub type policy_timeshare_info_data_t = Struct_policy_timeshare_info;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_policy_rr_base {
    pub base_priority: integer_t,
    pub quantum: integer_t,
}
impl ::std::clone::Clone for Struct_policy_rr_base {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_policy_rr_base {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_policy_rr_limit {
    pub max_priority: integer_t,
}
impl ::std::clone::Clone for Struct_policy_rr_limit {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_policy_rr_limit {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_policy_rr_info {
    pub max_priority: integer_t,
    pub base_priority: integer_t,
    pub quantum: integer_t,
    pub depressed: boolean_t,
    pub depress_priority: integer_t,
}
impl ::std::clone::Clone for Struct_policy_rr_info {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_policy_rr_info {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type policy_rr_base_t = *mut Struct_policy_rr_base;
pub type policy_rr_limit_t = *mut Struct_policy_rr_limit;
pub type policy_rr_info_t = *mut Struct_policy_rr_info;
pub type policy_rr_base_data_t = Struct_policy_rr_base;
pub type policy_rr_limit_data_t = Struct_policy_rr_limit;
pub type policy_rr_info_data_t = Struct_policy_rr_info;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_policy_fifo_base {
    pub base_priority: integer_t,
}
impl ::std::clone::Clone for Struct_policy_fifo_base {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_policy_fifo_base {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_policy_fifo_limit {
    pub max_priority: integer_t,
}
impl ::std::clone::Clone for Struct_policy_fifo_limit {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_policy_fifo_limit {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_policy_fifo_info {
    pub max_priority: integer_t,
    pub base_priority: integer_t,
    pub depressed: boolean_t,
    pub depress_priority: integer_t,
}
impl ::std::clone::Clone for Struct_policy_fifo_info {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_policy_fifo_info {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type policy_fifo_base_t = *mut Struct_policy_fifo_base;
pub type policy_fifo_limit_t = *mut Struct_policy_fifo_limit;
pub type policy_fifo_info_t = *mut Struct_policy_fifo_info;
pub type policy_fifo_base_data_t = Struct_policy_fifo_base;
pub type policy_fifo_limit_data_t = Struct_policy_fifo_limit;
pub type policy_fifo_info_data_t = Struct_policy_fifo_info;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_policy_bases {
    pub ts: policy_timeshare_base_data_t,
    pub rr: policy_rr_base_data_t,
    pub fifo: policy_fifo_base_data_t,
}
impl ::std::clone::Clone for Struct_policy_bases {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_policy_bases {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_policy_limits {
    pub ts: policy_timeshare_limit_data_t,
    pub rr: policy_rr_limit_data_t,
    pub fifo: policy_fifo_limit_data_t,
}
impl ::std::clone::Clone for Struct_policy_limits {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_policy_limits {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_policy_infos {
    pub ts: policy_timeshare_info_data_t,
    pub rr: policy_rr_info_data_t,
    pub fifo: policy_fifo_info_data_t,
}
impl ::std::clone::Clone for Struct_policy_infos {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_policy_infos {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type policy_base_data_t = Struct_policy_bases;
pub type policy_limit_data_t = Struct_policy_limits;
pub type policy_info_data_t = Struct_policy_infos;
pub type task_flavor_t = natural_t;
pub type task_info_t = *mut integer_t;
pub type task_info_data_t = [integer_t; 1024usize];
#[repr(C)]
#[derive(Copy)]
pub struct Struct_task_basic_info_32 {
    pub suspend_count: integer_t,
    pub virtual_size: natural_t,
    pub resident_size: natural_t,
    pub user_time: time_value_t,
    pub system_time: time_value_t,
    pub policy: policy_t,
}
impl ::std::clone::Clone for Struct_task_basic_info_32 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_task_basic_info_32 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type task_basic_info_32_data_t = Struct_task_basic_info_32;
pub type task_basic_info_32_t = *mut Struct_task_basic_info_32;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_task_basic_info_64 {
    pub suspend_count: integer_t,
    pub virtual_size: mach_vm_size_t,
    pub resident_size: mach_vm_size_t,
    pub user_time: time_value_t,
    pub system_time: time_value_t,
    pub policy: policy_t,
}
impl ::std::clone::Clone for Struct_task_basic_info_64 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_task_basic_info_64 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type task_basic_info_64_data_t = Struct_task_basic_info_64;
pub type task_basic_info_64_t = *mut Struct_task_basic_info_64;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_task_basic_info {
    pub suspend_count: integer_t,
    pub virtual_size: vm_size_t,
    pub resident_size: vm_size_t,
    pub user_time: time_value_t,
    pub system_time: time_value_t,
    pub policy: policy_t,
}
impl ::std::clone::Clone for Struct_task_basic_info {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_task_basic_info {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type task_basic_info_data_t = Struct_task_basic_info;
pub type task_basic_info_t = *mut Struct_task_basic_info;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_task_events_info {
    pub faults: integer_t,
    pub pageins: integer_t,
    pub cow_faults: integer_t,
    pub messages_sent: integer_t,
    pub messages_received: integer_t,
    pub syscalls_mach: integer_t,
    pub syscalls_unix: integer_t,
    pub csw: integer_t,
}
impl ::std::clone::Clone for Struct_task_events_info {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_task_events_info {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type task_events_info_data_t = Struct_task_events_info;
pub type task_events_info_t = *mut Struct_task_events_info;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_task_thread_times_info {
    pub user_time: time_value_t,
    pub system_time: time_value_t,
}
impl ::std::clone::Clone for Struct_task_thread_times_info {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_task_thread_times_info {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type task_thread_times_info_data_t = Struct_task_thread_times_info;
pub type task_thread_times_info_t = *mut Struct_task_thread_times_info;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_task_absolutetime_info {
    pub total_user: uint64_t,
    pub total_system: uint64_t,
    pub threads_user: uint64_t,
    pub threads_system: uint64_t,
}
impl ::std::clone::Clone for Struct_task_absolutetime_info {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_task_absolutetime_info {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type task_absolutetime_info_data_t = Struct_task_absolutetime_info;
pub type task_absolutetime_info_t = *mut Struct_task_absolutetime_info;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_task_kernelmemory_info {
    pub total_palloc: uint64_t,
    pub total_pfree: uint64_t,
    pub total_salloc: uint64_t,
    pub total_sfree: uint64_t,
}
impl ::std::clone::Clone for Struct_task_kernelmemory_info {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_task_kernelmemory_info {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type task_kernelmemory_info_data_t = Struct_task_kernelmemory_info;
pub type task_kernelmemory_info_t = *mut Struct_task_kernelmemory_info;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_task_affinity_tag_info {
    pub set_count: integer_t,
    pub min: integer_t,
    pub max: integer_t,
    pub task_count: integer_t,
}
impl ::std::clone::Clone for Struct_task_affinity_tag_info {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_task_affinity_tag_info {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type task_affinity_tag_info_data_t = Struct_task_affinity_tag_info;
pub type task_affinity_tag_info_t = *mut Struct_task_affinity_tag_info;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_task_dyld_info {
    pub all_image_info_addr: mach_vm_address_t,
    pub all_image_info_size: mach_vm_size_t,
    pub all_image_info_format: integer_t,
}
impl ::std::clone::Clone for Struct_task_dyld_info {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_task_dyld_info {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type task_dyld_info_data_t = Struct_task_dyld_info;
pub type task_dyld_info_t = *mut Struct_task_dyld_info;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_task_extmod_info {
    pub task_uuid: [::std::os::raw::c_uchar; 16usize],
    pub extmod_statistics: vm_extmod_statistics_data_t,
}
impl ::std::clone::Clone for Struct_task_extmod_info {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_task_extmod_info {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type task_extmod_info_data_t = Struct_task_extmod_info;
pub type task_extmod_info_t = *mut Struct_task_extmod_info;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_mach_task_basic_info {
    pub virtual_size: mach_vm_size_t,
    pub resident_size: mach_vm_size_t,
    pub resident_size_max: mach_vm_size_t,
    pub user_time: time_value_t,
    pub system_time: time_value_t,
    pub policy: policy_t,
    pub suspend_count: integer_t,
}
impl ::std::clone::Clone for Struct_mach_task_basic_info {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_mach_task_basic_info {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type mach_task_basic_info_data_t = Struct_mach_task_basic_info;
pub type mach_task_basic_info_t = *mut Struct_mach_task_basic_info;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_task_power_info {
    pub total_user: uint64_t,
    pub total_system: uint64_t,
    pub task_interrupt_wakeups: uint64_t,
    pub task_platform_idle_wakeups: uint64_t,
    pub task_timer_wakeups_bin_1: uint64_t,
    pub task_timer_wakeups_bin_2: uint64_t,
}
impl ::std::clone::Clone for Struct_task_power_info {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_task_power_info {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type task_power_info_data_t = Struct_task_power_info;
pub type task_power_info_t = *mut Struct_task_power_info;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_task_vm_info {
    pub virtual_size: mach_vm_size_t,
    pub region_count: integer_t,
    pub page_size: integer_t,
    pub resident_size: mach_vm_size_t,
    pub resident_size_peak: mach_vm_size_t,
    pub device: mach_vm_size_t,
    pub device_peak: mach_vm_size_t,
    pub internal: mach_vm_size_t,
    pub internal_peak: mach_vm_size_t,
    pub external: mach_vm_size_t,
    pub external_peak: mach_vm_size_t,
    pub reusable: mach_vm_size_t,
    pub reusable_peak: mach_vm_size_t,
    pub purgeable_volatile_pmap: mach_vm_size_t,
    pub purgeable_volatile_resident: mach_vm_size_t,
    pub purgeable_volatile_virtual: mach_vm_size_t,
    pub compressed: mach_vm_size_t,
    pub compressed_peak: mach_vm_size_t,
    pub compressed_lifetime: mach_vm_size_t,
    pub phys_footprint: mach_vm_size_t,
}
impl ::std::clone::Clone for Struct_task_vm_info {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_task_vm_info {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type task_vm_info_data_t = Struct_task_vm_info;
pub type task_vm_info_t = *mut Struct_task_vm_info;
pub type task_purgable_info_t = Struct_vm_purgeable_info;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_task_trace_memory_info {
    pub user_memory_address: uint64_t,
    pub buffer_size: uint64_t,
    pub mailbox_array_size: uint64_t,
}
impl ::std::clone::Clone for Struct_task_trace_memory_info {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_task_trace_memory_info {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type task_trace_memory_info_data_t = Struct_task_trace_memory_info;
pub type task_trace_memory_info_t = *mut Struct_task_trace_memory_info;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_task_wait_state_info {
    pub total_wait_state_time: uint64_t,
    pub total_wait_sfi_state_time: uint64_t,
    pub _reserved: [uint32_t; 4usize],
}
impl ::std::clone::Clone for Struct_task_wait_state_info {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_task_wait_state_info {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type task_wait_state_info_data_t = Struct_task_wait_state_info;
pub type task_wait_state_info_t = *mut Struct_task_wait_state_info;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed54 {
    pub task_gpu_utilisation: uint64_t,
    pub task_gpu_stat_reserved0: uint64_t,
    pub task_gpu_stat_reserved1: uint64_t,
    pub task_gpu_stat_reserved2: uint64_t,
}
impl ::std::clone::Clone for Struct_Unnamed54 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed54 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type gpu_energy_data = Struct_Unnamed54;
pub type gpu_energy_data_t = *mut gpu_energy_data;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_task_power_info_v2 {
    pub cpu_energy: task_power_info_data_t,
    pub gpu_energy: gpu_energy_data,
}
impl ::std::clone::Clone for Struct_task_power_info_v2 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_task_power_info_v2 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type task_power_info_v2_data_t = Struct_task_power_info_v2;
pub type task_power_info_v2_t = *mut Struct_task_power_info_v2;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_task_flags_info {
    pub flags: uint32_t,
}
impl ::std::clone::Clone for Struct_task_flags_info {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_task_flags_info {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type task_flags_info_data_t = Struct_task_flags_info;
pub type task_flags_info_t = *mut Struct_task_flags_info;
pub type task_policy_flavor_t = natural_t;
pub type task_policy_t = *mut integer_t;
#[derive(Clone, Copy)]
#[repr(i32)]
pub enum Enum_task_role {
    TASK_RENICED = -1,
    TASK_UNSPECIFIED = 0,
    TASK_FOREGROUND_APPLICATION = 1,
    TASK_BACKGROUND_APPLICATION = 2,
    TASK_CONTROL_APPLICATION = 3,
    TASK_GRAPHICS_SERVER = 4,
    TASK_THROTTLE_APPLICATION = 5,
    TASK_NONUI_APPLICATION = 6,
    TASK_DEFAULT_APPLICATION = 7,
}
pub type task_role_t = integer_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_task_category_policy {
    pub role: task_role_t,
}
impl ::std::clone::Clone for Struct_task_category_policy {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_task_category_policy {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type task_category_policy_data_t = Struct_task_category_policy;
pub type task_category_policy_t = *mut Struct_task_category_policy;
#[derive(Clone, Copy)]
#[repr(u32)]
pub enum Enum_task_latency_qos {
    LATENCY_QOS_TIER_UNSPECIFIED = 0,
    LATENCY_QOS_TIER_0 = 16711681,
    LATENCY_QOS_TIER_1 = 16711682,
    LATENCY_QOS_TIER_2 = 16711683,
    LATENCY_QOS_TIER_3 = 16711684,
    LATENCY_QOS_TIER_4 = 16711685,
    LATENCY_QOS_TIER_5 = 16711686,
}
pub type task_latency_qos_t = integer_t;
#[derive(Clone, Copy)]
#[repr(u32)]
pub enum Enum_task_throughput_qos {
    THROUGHPUT_QOS_TIER_UNSPECIFIED = 0,
    THROUGHPUT_QOS_TIER_0 = 16646145,
    THROUGHPUT_QOS_TIER_1 = 16646146,
    THROUGHPUT_QOS_TIER_2 = 16646147,
    THROUGHPUT_QOS_TIER_3 = 16646148,
    THROUGHPUT_QOS_TIER_4 = 16646149,
    THROUGHPUT_QOS_TIER_5 = 16646150,
}
pub type task_throughput_qos_t = integer_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_task_qos_policy {
    pub task_latency_qos_tier: task_latency_qos_t,
    pub task_throughput_qos_tier: task_throughput_qos_t,
}
impl ::std::clone::Clone for Struct_task_qos_policy {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_task_qos_policy {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type task_qos_policy_t = *mut Struct_task_qos_policy;
pub type task_special_port_t = ::std::os::raw::c_int;
pub type thread_flavor_t = natural_t;
pub type thread_info_t = *mut integer_t;
pub type thread_info_data_t = [integer_t; 32usize];
#[repr(C)]
#[derive(Copy)]
pub struct Struct_thread_basic_info {
    pub user_time: time_value_t,
    pub system_time: time_value_t,
    pub cpu_usage: integer_t,
    pub policy: policy_t,
    pub run_state: integer_t,
    pub flags: integer_t,
    pub suspend_count: integer_t,
    pub sleep_time: integer_t,
}
impl ::std::clone::Clone for Struct_thread_basic_info {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_thread_basic_info {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type thread_basic_info_data_t = Struct_thread_basic_info;
pub type thread_basic_info_t = *mut Struct_thread_basic_info;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_thread_identifier_info {
    pub thread_id: uint64_t,
    pub thread_handle: uint64_t,
    pub dispatch_qaddr: uint64_t,
}
impl ::std::clone::Clone for Struct_thread_identifier_info {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_thread_identifier_info {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type thread_identifier_info_data_t = Struct_thread_identifier_info;
pub type thread_identifier_info_t = *mut Struct_thread_identifier_info;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_thread_extended_info {
    pub pth_user_time: uint64_t,
    pub pth_system_time: uint64_t,
    pub pth_cpu_usage: int32_t,
    pub pth_policy: int32_t,
    pub pth_run_state: int32_t,
    pub pth_flags: int32_t,
    pub pth_sleep_time: int32_t,
    pub pth_curpri: int32_t,
    pub pth_priority: int32_t,
    pub pth_maxpriority: int32_t,
    pub pth_name: [::std::os::raw::c_char; 64usize],
}
impl ::std::clone::Clone for Struct_thread_extended_info {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_thread_extended_info {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type thread_extended_info_data_t = Struct_thread_extended_info;
pub type thread_extended_info_t = *mut Struct_thread_extended_info;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_io_stat_entry {
    pub count: uint64_t,
    pub size: uint64_t,
}
impl ::std::clone::Clone for Struct_io_stat_entry {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_io_stat_entry {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_io_stat_info {
    pub disk_reads: Struct_io_stat_entry,
    pub io_priority: [Struct_io_stat_entry; 4usize],
    pub paging: Struct_io_stat_entry,
    pub metadata: Struct_io_stat_entry,
    pub total_io: Struct_io_stat_entry,
}
impl ::std::clone::Clone for Struct_io_stat_info {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_io_stat_info {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type io_stat_info_t = *mut Struct_io_stat_info;
pub type thread_policy_flavor_t = natural_t;
pub type thread_policy_t = *mut integer_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_thread_standard_policy {
    pub no_data: natural_t,
}
impl ::std::clone::Clone for Struct_thread_standard_policy {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_thread_standard_policy {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type thread_standard_policy_data_t = Struct_thread_standard_policy;
pub type thread_standard_policy_t = *mut Struct_thread_standard_policy;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_thread_extended_policy {
    pub timeshare: boolean_t,
}
impl ::std::clone::Clone for Struct_thread_extended_policy {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_thread_extended_policy {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type thread_extended_policy_data_t = Struct_thread_extended_policy;
pub type thread_extended_policy_t = *mut Struct_thread_extended_policy;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_thread_time_constraint_policy {
    pub period: uint32_t,
    pub computation: uint32_t,
    pub constraint: uint32_t,
    pub preemptible: boolean_t,
}
impl ::std::clone::Clone for Struct_thread_time_constraint_policy {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_thread_time_constraint_policy {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type thread_time_constraint_policy_data_t =
    Struct_thread_time_constraint_policy;
pub type thread_time_constraint_policy_t =
    *mut Struct_thread_time_constraint_policy;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_thread_precedence_policy {
    pub importance: integer_t,
}
impl ::std::clone::Clone for Struct_thread_precedence_policy {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_thread_precedence_policy {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type thread_precedence_policy_data_t = Struct_thread_precedence_policy;
pub type thread_precedence_policy_t = *mut Struct_thread_precedence_policy;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_thread_affinity_policy {
    pub affinity_tag: integer_t,
}
impl ::std::clone::Clone for Struct_thread_affinity_policy {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_thread_affinity_policy {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type thread_affinity_policy_data_t = Struct_thread_affinity_policy;
pub type thread_affinity_policy_t = *mut Struct_thread_affinity_policy;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_thread_background_policy {
    pub priority: integer_t,
}
impl ::std::clone::Clone for Struct_thread_background_policy {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_thread_background_policy {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type thread_background_policy_data_t = Struct_thread_background_policy;
pub type thread_background_policy_t = *mut Struct_thread_background_policy;
pub type thread_latency_qos_t = integer_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_thread_latency_qos_policy {
    pub thread_latency_qos_tier: thread_latency_qos_t,
}
impl ::std::clone::Clone for Struct_thread_latency_qos_policy {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_thread_latency_qos_policy {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type thread_latency_qos_policy_data_t = Struct_thread_latency_qos_policy;
pub type thread_latency_qos_policy_t = *mut Struct_thread_latency_qos_policy;
pub type thread_throughput_qos_t = integer_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_thread_throughput_qos_policy {
    pub thread_throughput_qos_tier: thread_throughput_qos_t,
}
impl ::std::clone::Clone for Struct_thread_throughput_qos_policy {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_thread_throughput_qos_policy {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type thread_throughput_qos_policy_data_t =
    Struct_thread_throughput_qos_policy;
pub type thread_throughput_qos_policy_t =
    *mut Struct_thread_throughput_qos_policy;
pub type alarm_type_t = ::std::os::raw::c_int;
pub type sleep_type_t = ::std::os::raw::c_int;
pub type clock_id_t = ::std::os::raw::c_int;
pub type clock_flavor_t = ::std::os::raw::c_int;
pub type clock_attr_t = *mut ::std::os::raw::c_int;
pub type clock_res_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_mach_timespec {
    pub tv_sec: ::std::os::raw::c_uint,
    pub tv_nsec: clock_res_t,
}
impl ::std::clone::Clone for Struct_mach_timespec {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_mach_timespec {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type mach_timespec_t = Struct_mach_timespec;
pub type vm_machine_attribute_t = ::std::os::raw::c_uint;
pub type vm_machine_attribute_val_t = ::std::os::raw::c_int;
pub type vm_inherit_t = ::std::os::raw::c_uint;
pub type vm_purgable_t = ::std::os::raw::c_int;
pub type vm_behavior_t = ::std::os::raw::c_int;
pub type vm32_object_id_t = uint32_t;
pub type vm_region_info_t = *mut ::std::os::raw::c_int;
pub type vm_region_info_64_t = *mut ::std::os::raw::c_int;
pub type vm_region_recurse_info_t = *mut ::std::os::raw::c_int;
pub type vm_region_recurse_info_64_t = *mut ::std::os::raw::c_int;
pub type vm_region_flavor_t = ::std::os::raw::c_int;
pub type vm_region_info_data_t = [::std::os::raw::c_int; 1024usize];
#[repr(C)]
#[derive(Copy)]
pub struct Struct_vm_region_basic_info_64 {
    pub protection: vm_prot_t,
    pub max_protection: vm_prot_t,
    pub inheritance: vm_inherit_t,
    pub shared: boolean_t,
    pub reserved: boolean_t,
    pub offset: memory_object_offset_t,
    pub behavior: vm_behavior_t,
    pub user_wired_count: ::std::os::raw::c_ushort,
}
impl ::std::clone::Clone for Struct_vm_region_basic_info_64 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_vm_region_basic_info_64 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type vm_region_basic_info_64_t = *mut Struct_vm_region_basic_info_64;
pub type vm_region_basic_info_data_64_t = Struct_vm_region_basic_info_64;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_vm_region_basic_info {
    pub protection: vm_prot_t,
    pub max_protection: vm_prot_t,
    pub inheritance: vm_inherit_t,
    pub shared: boolean_t,
    pub reserved: boolean_t,
    pub offset: uint32_t,
    pub behavior: vm_behavior_t,
    pub user_wired_count: ::std::os::raw::c_ushort,
}
impl ::std::clone::Clone for Struct_vm_region_basic_info {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_vm_region_basic_info {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type vm_region_basic_info_t = *mut Struct_vm_region_basic_info;
pub type vm_region_basic_info_data_t = Struct_vm_region_basic_info;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_vm_region_extended_info {
    pub protection: vm_prot_t,
    pub user_tag: ::std::os::raw::c_uint,
    pub pages_resident: ::std::os::raw::c_uint,
    pub pages_shared_now_private: ::std::os::raw::c_uint,
    pub pages_swapped_out: ::std::os::raw::c_uint,
    pub pages_dirtied: ::std::os::raw::c_uint,
    pub ref_count: ::std::os::raw::c_uint,
    pub shadow_depth: ::std::os::raw::c_ushort,
    pub external_pager: ::std::os::raw::c_uchar,
    pub share_mode: ::std::os::raw::c_uchar,
    pub pages_reusable: ::std::os::raw::c_uint,
}
impl ::std::clone::Clone for Struct_vm_region_extended_info {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_vm_region_extended_info {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type vm_region_extended_info_t = *mut Struct_vm_region_extended_info;
pub type vm_region_extended_info_data_t = Struct_vm_region_extended_info;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_vm_region_top_info {
    pub obj_id: ::std::os::raw::c_uint,
    pub ref_count: ::std::os::raw::c_uint,
    pub private_pages_resident: ::std::os::raw::c_uint,
    pub shared_pages_resident: ::std::os::raw::c_uint,
    pub share_mode: ::std::os::raw::c_uchar,
}
impl ::std::clone::Clone for Struct_vm_region_top_info {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_vm_region_top_info {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type vm_region_top_info_t = *mut Struct_vm_region_top_info;
pub type vm_region_top_info_data_t = Struct_vm_region_top_info;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_vm_region_submap_info {
    pub protection: vm_prot_t,
    pub max_protection: vm_prot_t,
    pub inheritance: vm_inherit_t,
    pub offset: uint32_t,
    pub user_tag: ::std::os::raw::c_uint,
    pub pages_resident: ::std::os::raw::c_uint,
    pub pages_shared_now_private: ::std::os::raw::c_uint,
    pub pages_swapped_out: ::std::os::raw::c_uint,
    pub pages_dirtied: ::std::os::raw::c_uint,
    pub ref_count: ::std::os::raw::c_uint,
    pub shadow_depth: ::std::os::raw::c_ushort,
    pub external_pager: ::std::os::raw::c_uchar,
    pub share_mode: ::std::os::raw::c_uchar,
    pub is_submap: boolean_t,
    pub behavior: vm_behavior_t,
    pub object_id: vm32_object_id_t,
    pub user_wired_count: ::std::os::raw::c_ushort,
}
impl ::std::clone::Clone for Struct_vm_region_submap_info {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_vm_region_submap_info {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type vm_region_submap_info_t = *mut Struct_vm_region_submap_info;
pub type vm_region_submap_info_data_t = Struct_vm_region_submap_info;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_vm_region_submap_info_64 {
    pub protection: vm_prot_t,
    pub max_protection: vm_prot_t,
    pub inheritance: vm_inherit_t,
    pub offset: memory_object_offset_t,
    pub user_tag: ::std::os::raw::c_uint,
    pub pages_resident: ::std::os::raw::c_uint,
    pub pages_shared_now_private: ::std::os::raw::c_uint,
    pub pages_swapped_out: ::std::os::raw::c_uint,
    pub pages_dirtied: ::std::os::raw::c_uint,
    pub ref_count: ::std::os::raw::c_uint,
    pub shadow_depth: ::std::os::raw::c_ushort,
    pub external_pager: ::std::os::raw::c_uchar,
    pub share_mode: ::std::os::raw::c_uchar,
    pub is_submap: boolean_t,
    pub behavior: vm_behavior_t,
    pub object_id: vm32_object_id_t,
    pub user_wired_count: ::std::os::raw::c_ushort,
    pub pages_reusable: ::std::os::raw::c_uint,
}
impl ::std::clone::Clone for Struct_vm_region_submap_info_64 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_vm_region_submap_info_64 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type vm_region_submap_info_64_t = *mut Struct_vm_region_submap_info_64;
pub type vm_region_submap_info_data_64_t = Struct_vm_region_submap_info_64;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_vm_region_submap_short_info_64 {
    pub protection: vm_prot_t,
    pub max_protection: vm_prot_t,
    pub inheritance: vm_inherit_t,
    pub offset: memory_object_offset_t,
    pub user_tag: ::std::os::raw::c_uint,
    pub ref_count: ::std::os::raw::c_uint,
    pub shadow_depth: ::std::os::raw::c_ushort,
    pub external_pager: ::std::os::raw::c_uchar,
    pub share_mode: ::std::os::raw::c_uchar,
    pub is_submap: boolean_t,
    pub behavior: vm_behavior_t,
    pub object_id: vm32_object_id_t,
    pub user_wired_count: ::std::os::raw::c_ushort,
}
impl ::std::clone::Clone for Struct_vm_region_submap_short_info_64 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_vm_region_submap_short_info_64 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type vm_region_submap_short_info_64_t =
    *mut Struct_vm_region_submap_short_info_64;
pub type vm_region_submap_short_info_data_64_t =
    Struct_vm_region_submap_short_info_64;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_mach_vm_read_entry {
    pub address: mach_vm_address_t,
    pub size: mach_vm_size_t,
}
impl ::std::clone::Clone for Struct_mach_vm_read_entry {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_mach_vm_read_entry {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_vm_read_entry {
    pub address: vm_address_t,
    pub size: vm_size_t,
}
impl ::std::clone::Clone for Struct_vm_read_entry {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_vm_read_entry {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type mach_vm_read_entry_t = [Struct_mach_vm_read_entry; 256usize];
pub type vm_read_entry_t = [Struct_vm_read_entry; 256usize];
pub type vm_page_info_t = *mut ::std::os::raw::c_int;
pub type vm_page_info_data_t = *mut ::std::os::raw::c_int;
pub type vm_page_info_flavor_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_vm_page_info_basic {
    pub disposition: ::std::os::raw::c_int,
    pub ref_count: ::std::os::raw::c_int,
    pub object_id: vm_object_id_t,
    pub offset: memory_object_offset_t,
    pub depth: ::std::os::raw::c_int,
    pub __pad: ::std::os::raw::c_int,
}
impl ::std::clone::Clone for Struct_vm_page_info_basic {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_vm_page_info_basic {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type vm_page_info_basic_t = *mut Struct_vm_page_info_basic;
pub type vm_page_info_basic_data_t = Struct_vm_page_info_basic;
pub type kmod_t = ::std::os::raw::c_int;
pub type kmod_start_func_t =
    unsafe extern "C" fn(ki: *mut Struct_kmod_info,
                         data: *mut ::std::os::raw::c_void) -> kern_return_t;
pub type kmod_stop_func_t =
    unsafe extern "C" fn(ki: *mut Struct_kmod_info,
                         data: *mut ::std::os::raw::c_void) -> kern_return_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_kmod_reference {
    pub next: *mut Struct_kmod_reference,
    pub info: *mut Struct_kmod_info,
}
impl ::std::clone::Clone for Struct_kmod_reference {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_kmod_reference {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type kmod_reference_t = Struct_kmod_reference;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_kmod_info {
    pub next: *mut Struct_kmod_info,
    pub info_version: int32_t,
    pub id: uint32_t,
    pub name: [::std::os::raw::c_char; 64usize],
    pub version: [::std::os::raw::c_char; 64usize],
    pub reference_count: int32_t,
    pub reference_list: *mut kmod_reference_t,
    pub address: vm_address_t,
    pub size: vm_size_t,
    pub hdr_size: vm_size_t,
    pub start: *mut ::std::option::Option<extern "C" fn() -> kern_return_t>,
    pub stop: *mut ::std::option::Option<extern "C" fn() -> kern_return_t>,
}
impl ::std::clone::Clone for Struct_kmod_info {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_kmod_info {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type kmod_info_t = Struct_kmod_info;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_kmod_info_32_v1 {
    pub next_addr: uint32_t,
    pub info_version: int32_t,
    pub id: uint32_t,
    pub name: [uint8_t; 64usize],
    pub version: [uint8_t; 64usize],
    pub reference_count: int32_t,
    pub reference_list_addr: uint32_t,
    pub address: uint32_t,
    pub size: uint32_t,
    pub hdr_size: uint32_t,
    pub start_addr: uint32_t,
    pub stop_addr: uint32_t,
}
impl ::std::clone::Clone for Struct_kmod_info_32_v1 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_kmod_info_32_v1 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type kmod_info_32_v1_t = Struct_kmod_info_32_v1;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_kmod_info_64_v1 {
    pub next_addr: uint64_t,
    pub info_version: int32_t,
    pub id: uint32_t,
    pub name: [uint8_t; 64usize],
    pub version: [uint8_t; 64usize],
    pub reference_count: int32_t,
    pub reference_list_addr: uint64_t,
    pub address: uint64_t,
    pub size: uint64_t,
    pub hdr_size: uint64_t,
    pub start_addr: uint64_t,
    pub stop_addr: uint64_t,
}
impl ::std::clone::Clone for Struct_kmod_info_64_v1 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_kmod_info_64_v1 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type kmod_info_64_v1_t = Struct_kmod_info_64_v1;
pub type kmod_args_t = *mut ::std::os::raw::c_void;
pub type kmod_control_flavor_t = ::std::os::raw::c_int;
pub type kmod_info_array_t = *mut kmod_info_t;
pub type task_t = mach_port_t;
pub type task_name_t = mach_port_t;
pub type task_suspension_token_t = mach_port_t;
pub type thread_t = mach_port_t;
pub type thread_act_t = mach_port_t;
pub type ipc_space_t = mach_port_t;
pub type coalition_t = mach_port_t;
pub type host_t = mach_port_t;
pub type host_priv_t = mach_port_t;
pub type host_security_t = mach_port_t;
pub type processor_t = mach_port_t;
pub type processor_set_t = mach_port_t;
pub type processor_set_control_t = mach_port_t;
pub type semaphore_t = mach_port_t;
pub type lock_set_t = mach_port_t;
pub type ledger_t = mach_port_t;
pub type alarm_t = mach_port_t;
pub type clock_serv_t = mach_port_t;
pub type clock_ctrl_t = mach_port_t;
pub type processor_set_name_t = processor_set_t;
pub type clock_reply_t = mach_port_t;
pub type bootstrap_t = mach_port_t;
pub type mem_entry_name_port_t = mach_port_t;
pub type exception_handler_t = mach_port_t;
pub type exception_handler_array_t = *mut exception_handler_t;
pub type vm_task_entry_t = mach_port_t;
pub type io_master_t = mach_port_t;
pub type UNDServerRef = mach_port_t;
pub type task_array_t = *mut task_t;
pub type thread_array_t = *mut thread_t;
pub type processor_set_array_t = *mut processor_set_t;
pub type processor_set_name_array_t = *mut processor_set_t;
pub type processor_array_t = *mut processor_t;
pub type thread_act_array_t = *mut thread_act_t;
pub type ledger_array_t = *mut ledger_t;
pub type task_port_t = task_t;
pub type task_port_array_t = task_array_t;
pub type thread_port_t = thread_t;
pub type thread_port_array_t = thread_array_t;
pub type ipc_space_port_t = ipc_space_t;
pub type host_name_t = host_t;
pub type host_name_port_t = host_t;
pub type processor_set_port_t = processor_set_t;
pub type processor_set_name_port_t = processor_set_t;
pub type processor_set_name_port_array_t = processor_set_array_t;
pub type processor_set_control_port_t = processor_set_t;
pub type processor_port_t = processor_t;
pub type processor_port_array_t = processor_array_t;
pub type thread_act_port_t = thread_act_t;
pub type thread_act_port_array_t = thread_act_array_t;
pub type semaphore_port_t = semaphore_t;
pub type lock_set_port_t = lock_set_t;
pub type ledger_port_t = ledger_t;
pub type ledger_port_array_t = ledger_array_t;
pub type alarm_port_t = alarm_t;
pub type clock_serv_port_t = clock_serv_t;
pub type clock_ctrl_port_t = clock_ctrl_t;
pub type exception_port_t = exception_handler_t;
pub type exception_port_arrary_t = exception_handler_array_t;
pub type ledger_item_t = natural_t;
pub type ledger_amount_t = int64_t;
pub type emulation_vector_t = *mut mach_vm_offset_t;
pub type user_subsystem_t = *mut ::std::os::raw::c_char;
pub type labelstr_t = *mut ::std::os::raw::c_char;
pub type mig_stub_routine_t =
    ::std::option::Option<unsafe extern "C" fn(InHeadP:
                                                   *mut mach_msg_header_t,
                                               OutHeadP:
                                                   *mut mach_msg_header_t)>;
pub type mig_routine_t = mig_stub_routine_t;
pub type mig_server_routine_t =
    ::std::option::Option<unsafe extern "C" fn(InHeadP:
                                                   *mut mach_msg_header_t)
                              -> mig_routine_t>;
pub type mig_impl_routine_t =
    ::std::option::Option<extern "C" fn() -> kern_return_t>;
pub type routine_arg_descriptor = mach_msg_type_descriptor_t;
pub type routine_arg_descriptor_t = *mut mach_msg_type_descriptor_t;
pub type mig_routine_arg_descriptor_t = *mut mach_msg_type_descriptor_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_routine_descriptor {
    pub impl_routine: mig_impl_routine_t,
    pub stub_routine: mig_stub_routine_t,
    pub argc: ::std::os::raw::c_uint,
    pub descr_count: ::std::os::raw::c_uint,
    pub arg_descr: routine_arg_descriptor_t,
    pub max_reply_msg: ::std::os::raw::c_uint,
}
impl ::std::clone::Clone for Struct_routine_descriptor {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_routine_descriptor {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type routine_descriptor_t = *mut Struct_routine_descriptor;
pub type mig_routine_descriptor = Struct_routine_descriptor;
pub type mig_routine_descriptor_t = *mut mig_routine_descriptor;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_mig_subsystem {
    pub server: mig_server_routine_t,
    pub start: mach_msg_id_t,
    pub end: mach_msg_id_t,
    pub maxsize: mach_msg_size_t,
    pub reserved: vm_address_t,
    pub routine: [mig_routine_descriptor; 1usize],
}
impl ::std::clone::Clone for Struct_mig_subsystem {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_mig_subsystem {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type mig_subsystem_t = *mut Struct_mig_subsystem;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_mig_symtab {
    pub ms_routine_name: *mut ::std::os::raw::c_char,
    pub ms_routine_number: ::std::os::raw::c_int,
    pub ms_routine: ::std::option::Option<extern "C" fn()>,
}
impl ::std::clone::Clone for Struct_mig_symtab {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_mig_symtab {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type mig_symtab_t = Struct_mig_symtab;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed55 {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
impl ::std::clone::Clone for Struct_Unnamed55 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed55 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type mig_reply_error_t = Struct_Unnamed55;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed56 {
    pub Head: mach_msg_header_t,
}
impl ::std::clone::Clone for Struct_Unnamed56 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed56 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type __Request__clock_get_time_t = Struct_Unnamed56;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed57 {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub flavor: clock_flavor_t,
    pub clock_attrCnt: mach_msg_type_number_t,
}
impl ::std::clone::Clone for Struct_Unnamed57 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed57 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type __Request__clock_get_attributes_t = Struct_Unnamed57;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed58 {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub alarm_port: mach_msg_port_descriptor_t,
    pub NDR: NDR_record_t,
    pub alarm_type: alarm_type_t,
    pub alarm_time: mach_timespec_t,
}
impl ::std::clone::Clone for Struct_Unnamed58 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed58 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type __Request__clock_alarm_t = Struct_Unnamed58;
#[repr(C)]
#[derive(Copy)]
pub struct Union___RequestUnion__clock_subsystem {
    pub _bindgen_data_: [u32; 15usize],
}
impl Union___RequestUnion__clock_subsystem {
    pub unsafe fn Request_clock_get_time(&mut self)
     -> *mut __Request__clock_get_time_t {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn Request_clock_get_attributes(&mut self)
     -> *mut __Request__clock_get_attributes_t {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn Request_clock_alarm(&mut self)
     -> *mut __Request__clock_alarm_t {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
}
impl ::std::clone::Clone for Union___RequestUnion__clock_subsystem {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Union___RequestUnion__clock_subsystem {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed59 {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
    pub cur_time: mach_timespec_t,
}
impl ::std::clone::Clone for Struct_Unnamed59 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed59 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type __Reply__clock_get_time_t = Struct_Unnamed59;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed60 {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
    pub clock_attrCnt: mach_msg_type_number_t,
    pub clock_attr: [::std::os::raw::c_int; 1usize],
}
impl ::std::clone::Clone for Struct_Unnamed60 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed60 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type __Reply__clock_get_attributes_t = Struct_Unnamed60;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed61 {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
impl ::std::clone::Clone for Struct_Unnamed61 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed61 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type __Reply__clock_alarm_t = Struct_Unnamed61;
#[repr(C)]
#[derive(Copy)]
pub struct Union___ReplyUnion__clock_subsystem {
    pub _bindgen_data_: [u32; 11usize],
}
impl Union___ReplyUnion__clock_subsystem {
    pub unsafe fn Reply_clock_get_time(&mut self)
     -> *mut __Reply__clock_get_time_t {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn Reply_clock_get_attributes(&mut self)
     -> *mut __Reply__clock_get_attributes_t {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn Reply_clock_alarm(&mut self)
     -> *mut __Reply__clock_alarm_t {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
}
impl ::std::clone::Clone for Union___ReplyUnion__clock_subsystem {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Union___ReplyUnion__clock_subsystem {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed62 {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub new_time: mach_timespec_t,
}
impl ::std::clone::Clone for Struct_Unnamed62 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed62 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type __Request__clock_set_time_t = Struct_Unnamed62;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed63 {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub flavor: clock_flavor_t,
    pub clock_attrCnt: mach_msg_type_number_t,
    pub clock_attr: [::std::os::raw::c_int; 1usize],
}
impl ::std::clone::Clone for Struct_Unnamed63 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed63 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type __Request__clock_set_attributes_t = Struct_Unnamed63;
#[repr(C)]
#[derive(Copy)]
pub struct Union___RequestUnion__clock_priv_subsystem {
    pub _bindgen_data_: [u32; 11usize],
}
impl Union___RequestUnion__clock_priv_subsystem {
    pub unsafe fn Request_clock_set_time(&mut self)
     -> *mut __Request__clock_set_time_t {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn Request_clock_set_attributes(&mut self)
     -> *mut __Request__clock_set_attributes_t {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
}
impl ::std::clone::Clone for Union___RequestUnion__clock_priv_subsystem {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Union___RequestUnion__clock_priv_subsystem {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed64 {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
impl ::std::clone::Clone for Struct_Unnamed64 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed64 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type __Reply__clock_set_time_t = Struct_Unnamed64;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed65 {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
impl ::std::clone::Clone for Struct_Unnamed65 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed65 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type __Reply__clock_set_attributes_t = Struct_Unnamed65;
#[repr(C)]
#[derive(Copy)]
pub struct Union___ReplyUnion__clock_priv_subsystem {
    pub _bindgen_data_: [u32; 9usize],
}
impl Union___ReplyUnion__clock_priv_subsystem {
    pub unsafe fn Reply_clock_set_time(&mut self)
     -> *mut __Reply__clock_set_time_t {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn Reply_clock_set_attributes(&mut self)
     -> *mut __Reply__clock_set_attributes_t {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
}
impl ::std::clone::Clone for Union___ReplyUnion__clock_priv_subsystem {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Union___ReplyUnion__clock_priv_subsystem {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_ipc_info_space {
    pub iis_genno_mask: natural_t,
    pub iis_table_size: natural_t,
    pub iis_table_next: natural_t,
    pub iis_tree_size: natural_t,
    pub iis_tree_small: natural_t,
    pub iis_tree_hash: natural_t,
}
impl ::std::clone::Clone for Struct_ipc_info_space {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_ipc_info_space {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type ipc_info_space_t = Struct_ipc_info_space;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_ipc_info_space_basic {
    pub iisb_genno_mask: natural_t,
    pub iisb_table_size: natural_t,
    pub iisb_table_next: natural_t,
    pub iisb_table_inuse: natural_t,
    pub iisb_reserved: [natural_t; 2usize],
}
impl ::std::clone::Clone for Struct_ipc_info_space_basic {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_ipc_info_space_basic {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type ipc_info_space_basic_t = Struct_ipc_info_space_basic;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_ipc_info_name {
    pub iin_name: mach_port_name_t,
    pub iin_collision: integer_t,
    pub iin_type: mach_port_type_t,
    pub iin_urefs: mach_port_urefs_t,
    pub iin_object: natural_t,
    pub iin_next: natural_t,
    pub iin_hash: natural_t,
}
impl ::std::clone::Clone for Struct_ipc_info_name {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_ipc_info_name {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type ipc_info_name_t = Struct_ipc_info_name;
pub type ipc_info_name_array_t = *mut ipc_info_name_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_ipc_info_tree_name {
    pub iitn_name: ipc_info_name_t,
    pub iitn_lchild: mach_port_name_t,
    pub iitn_rchild: mach_port_name_t,
}
impl ::std::clone::Clone for Struct_ipc_info_tree_name {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_ipc_info_tree_name {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type ipc_info_tree_name_t = Struct_ipc_info_tree_name;
pub type ipc_info_tree_name_array_t = *mut ipc_info_tree_name_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_mach_vm_info_region {
    pub vir_start: mach_vm_offset_t,
    pub vir_end: mach_vm_offset_t,
    pub vir_object: mach_vm_offset_t,
    pub vir_offset: memory_object_offset_t,
    pub vir_needs_copy: boolean_t,
    pub vir_protection: vm_prot_t,
    pub vir_max_protection: vm_prot_t,
    pub vir_inheritance: vm_inherit_t,
    pub vir_wired_count: natural_t,
    pub vir_user_wired_count: natural_t,
}
impl ::std::clone::Clone for Struct_mach_vm_info_region {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_mach_vm_info_region {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type mach_vm_info_region_t = Struct_mach_vm_info_region;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_vm_info_region_64 {
    pub vir_start: natural_t,
    pub vir_end: natural_t,
    pub vir_object: natural_t,
    pub vir_offset: memory_object_offset_t,
    pub vir_needs_copy: boolean_t,
    pub vir_protection: vm_prot_t,
    pub vir_max_protection: vm_prot_t,
    pub vir_inheritance: vm_inherit_t,
    pub vir_wired_count: natural_t,
    pub vir_user_wired_count: natural_t,
}
impl ::std::clone::Clone for Struct_vm_info_region_64 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_vm_info_region_64 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type vm_info_region_64_t = Struct_vm_info_region_64;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_vm_info_region {
    pub vir_start: natural_t,
    pub vir_end: natural_t,
    pub vir_object: natural_t,
    pub vir_offset: natural_t,
    pub vir_needs_copy: boolean_t,
    pub vir_protection: vm_prot_t,
    pub vir_max_protection: vm_prot_t,
    pub vir_inheritance: vm_inherit_t,
    pub vir_wired_count: natural_t,
    pub vir_user_wired_count: natural_t,
}
impl ::std::clone::Clone for Struct_vm_info_region {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_vm_info_region {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type vm_info_region_t = Struct_vm_info_region;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_vm_info_object {
    pub vio_object: natural_t,
    pub vio_size: natural_t,
    pub vio_ref_count: ::std::os::raw::c_uint,
    pub vio_resident_page_count: ::std::os::raw::c_uint,
    pub vio_absent_count: ::std::os::raw::c_uint,
    pub vio_copy: natural_t,
    pub vio_shadow: natural_t,
    pub vio_shadow_offset: natural_t,
    pub vio_paging_offset: natural_t,
    pub vio_copy_strategy: memory_object_copy_strategy_t,
    pub vio_last_alloc: vm_offset_t,
    pub vio_paging_in_progress: ::std::os::raw::c_uint,
    pub vio_pager_created: boolean_t,
    pub vio_pager_initialized: boolean_t,
    pub vio_pager_ready: boolean_t,
    pub vio_can_persist: boolean_t,
    pub vio_internal: boolean_t,
    pub vio_temporary: boolean_t,
    pub vio_alive: boolean_t,
    pub vio_purgable: boolean_t,
    pub vio_purgable_volatile: boolean_t,
}
impl ::std::clone::Clone for Struct_vm_info_object {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_vm_info_object {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type vm_info_object_t = Struct_vm_info_object;
pub type vm_info_object_array_t = *mut vm_info_object_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_zone_name {
    pub zn_name: [::std::os::raw::c_char; 80usize],
}
impl ::std::clone::Clone for Struct_zone_name {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_zone_name {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type zone_name_t = Struct_zone_name;
pub type zone_name_array_t = *mut zone_name_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_zone_info {
    pub zi_count: integer_t,
    pub zi_cur_size: vm_size_t,
    pub zi_max_size: vm_size_t,
    pub zi_elem_size: vm_size_t,
    pub zi_alloc_size: vm_size_t,
    pub zi_pageable: integer_t,
    pub zi_sleepable: integer_t,
    pub zi_exhaustible: integer_t,
    pub zi_collectable: integer_t,
}
impl ::std::clone::Clone for Struct_zone_info {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_zone_info {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type zone_info_t = Struct_zone_info;
pub type zone_info_array_t = *mut zone_info_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_mach_zone_name {
    pub mzn_name: [::std::os::raw::c_char; 80usize],
}
impl ::std::clone::Clone for Struct_mach_zone_name {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_mach_zone_name {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type mach_zone_name_t = Struct_mach_zone_name;
pub type mach_zone_name_array_t = *mut mach_zone_name_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_mach_zone_info_data {
    pub mzi_count: uint64_t,
    pub mzi_cur_size: uint64_t,
    pub mzi_max_size: uint64_t,
    pub mzi_elem_size: uint64_t,
    pub mzi_alloc_size: uint64_t,
    pub mzi_sum_size: uint64_t,
    pub mzi_exhaustible: uint64_t,
    pub mzi_collectable: uint64_t,
}
impl ::std::clone::Clone for Struct_mach_zone_info_data {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_mach_zone_info_data {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type mach_zone_info_t = Struct_mach_zone_info_data;
pub type mach_zone_info_array_t = *mut mach_zone_info_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_task_zone_info_data {
    pub tzi_count: uint64_t,
    pub tzi_cur_size: uint64_t,
    pub tzi_max_size: uint64_t,
    pub tzi_elem_size: uint64_t,
    pub tzi_alloc_size: uint64_t,
    pub tzi_sum_size: uint64_t,
    pub tzi_exhaustible: uint64_t,
    pub tzi_collectable: uint64_t,
    pub tzi_caller_acct: uint64_t,
    pub tzi_task_alloc: uint64_t,
    pub tzi_task_free: uint64_t,
}
impl ::std::clone::Clone for Struct_task_zone_info_data {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_task_zone_info_data {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type task_zone_info_t = Struct_task_zone_info_data;
pub type task_zone_info_array_t = *mut task_zone_info_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_mach_memory_info {
    pub flags: uint64_t,
    pub site: uint64_t,
    pub size: uint64_t,
    pub free: uint64_t,
    pub largest: uint64_t,
    pub _resv: [uint64_t; 3usize],
}
impl ::std::clone::Clone for Struct_mach_memory_info {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_mach_memory_info {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type mach_memory_info_t = Struct_mach_memory_info;
pub type mach_memory_info_array_t = *mut mach_memory_info_t;
pub type page_address_array_t = *mut vm_offset_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_hash_info_bucket {
    pub hib_count: natural_t,
}
impl ::std::clone::Clone for Struct_hash_info_bucket {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_hash_info_bucket {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type hash_info_bucket_t = Struct_hash_info_bucket;
pub type hash_info_bucket_array_t = *mut hash_info_bucket_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_lockgroup_info {
    pub lockgroup_name: [::std::os::raw::c_char; 64usize],
    pub lockgroup_attr: uint64_t,
    pub lock_spin_cnt: uint64_t,
    pub lock_spin_util_cnt: uint64_t,
    pub lock_spin_held_cnt: uint64_t,
    pub lock_spin_miss_cnt: uint64_t,
    pub lock_spin_held_max: uint64_t,
    pub lock_spin_held_cum: uint64_t,
    pub lock_mtx_cnt: uint64_t,
    pub lock_mtx_util_cnt: uint64_t,
    pub lock_mtx_held_cnt: uint64_t,
    pub lock_mtx_miss_cnt: uint64_t,
    pub lock_mtx_wait_cnt: uint64_t,
    pub lock_mtx_held_max: uint64_t,
    pub lock_mtx_held_cum: uint64_t,
    pub lock_mtx_wait_max: uint64_t,
    pub lock_mtx_wait_cum: uint64_t,
    pub lock_rw_cnt: uint64_t,
    pub lock_rw_util_cnt: uint64_t,
    pub lock_rw_held_cnt: uint64_t,
    pub lock_rw_miss_cnt: uint64_t,
    pub lock_rw_wait_cnt: uint64_t,
    pub lock_rw_held_max: uint64_t,
    pub lock_rw_held_cum: uint64_t,
    pub lock_rw_wait_max: uint64_t,
    pub lock_rw_wait_cum: uint64_t,
}
impl ::std::clone::Clone for Struct_lockgroup_info {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_lockgroup_info {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type lockgroup_info_t = Struct_lockgroup_info;
pub type lockgroup_info_array_t = *mut lockgroup_info_t;
pub type symtab_name_t = [::std::os::raw::c_char; 32usize];
#[repr(C)]
#[derive(Copy)]
pub struct Struct_mach_core_fileheader {
    pub signature: uint64_t,
    pub log_offset: uint64_t,
    pub log_length: uint64_t,
    pub gzip_offset: uint64_t,
    pub gzip_length: uint64_t,
}
impl ::std::clone::Clone for Struct_mach_core_fileheader {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_mach_core_fileheader {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed66 {
    pub Head: mach_msg_header_t,
}
impl ::std::clone::Clone for Struct_Unnamed66 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed66 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type __Request__host_get_boot_info_t = Struct_Unnamed66;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed67 {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub options: ::std::os::raw::c_int,
}
impl ::std::clone::Clone for Struct_Unnamed67 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed67 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type __Request__host_reboot_t = Struct_Unnamed67;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed68 {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub flavor: host_flavor_t,
    pub host_info_outCnt: mach_msg_type_number_t,
}
impl ::std::clone::Clone for Struct_Unnamed68 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed68 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type __Request__host_priv_statistics_t = Struct_Unnamed68;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed69 {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub default_manager: mach_msg_port_descriptor_t,
    pub NDR: NDR_record_t,
    pub cluster_size: memory_object_cluster_size_t,
}
impl ::std::clone::Clone for Struct_Unnamed69 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed69 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type __Request__host_default_memory_manager_t = Struct_Unnamed69;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed70 {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub task: mach_msg_port_descriptor_t,
    pub NDR: NDR_record_t,
    pub address: vm_address_t,
    pub size: vm_size_t,
    pub desired_access: vm_prot_t,
}
impl ::std::clone::Clone for Struct_Unnamed70 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed70 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type __Request__vm_wire_t = Struct_Unnamed70;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed71 {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub thread: mach_msg_port_descriptor_t,
    pub NDR: NDR_record_t,
    pub wired: boolean_t,
}
impl ::std::clone::Clone for Struct_Unnamed71 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed71 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type __Request__thread_wire_t = Struct_Unnamed71;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed72 {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub task: mach_msg_port_descriptor_t,
    pub NDR: NDR_record_t,
    pub address: vm_address_t,
    pub size: vm_size_t,
    pub flags: ::std::os::raw::c_int,
}
impl ::std::clone::Clone for Struct_Unnamed72 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed72 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type __Request__vm_allocate_cpm_t = Struct_Unnamed72;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed73 {
    pub Head: mach_msg_header_t,
}
impl ::std::clone::Clone for Struct_Unnamed73 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed73 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type __Request__host_processors_t = Struct_Unnamed73;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed74 {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub clock_id: clock_id_t,
}
impl ::std::clone::Clone for Struct_Unnamed74 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed74 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type __Request__host_get_clock_control_t = Struct_Unnamed74;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed75 {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub info: vm_address_t,
}
impl ::std::clone::Clone for Struct_Unnamed75 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed75 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type __Request__kmod_create_t = Struct_Unnamed75;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed76 {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub module: kmod_t,
}
impl ::std::clone::Clone for Struct_Unnamed76 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed76 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type __Request__kmod_destroy_t = Struct_Unnamed76;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed77 {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub data: mach_msg_ool_descriptor_t,
    pub NDR: NDR_record_t,
    pub module: kmod_t,
    pub flavor: kmod_control_flavor_t,
    pub dataCnt: mach_msg_type_number_t,
}
impl ::std::clone::Clone for Struct_Unnamed77 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed77 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type __Request__kmod_control_t = Struct_Unnamed77;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed78 {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub node: ::std::os::raw::c_int,
    pub which: ::std::os::raw::c_int,
}
impl ::std::clone::Clone for Struct_Unnamed78 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed78 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type __Request__host_get_special_port_t = Struct_Unnamed78;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed79 {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub port: mach_msg_port_descriptor_t,
    pub NDR: NDR_record_t,
    pub which: ::std::os::raw::c_int,
}
impl ::std::clone::Clone for Struct_Unnamed79 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed79 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type __Request__host_set_special_port_t = Struct_Unnamed79;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed80 {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub new_port: mach_msg_port_descriptor_t,
    pub NDR: NDR_record_t,
    pub exception_mask: exception_mask_t,
    pub behavior: exception_behavior_t,
    pub new_flavor: thread_state_flavor_t,
}
impl ::std::clone::Clone for Struct_Unnamed80 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed80 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type __Request__host_set_exception_ports_t = Struct_Unnamed80;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed81 {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub exception_mask: exception_mask_t,
}
impl ::std::clone::Clone for Struct_Unnamed81 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed81 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type __Request__host_get_exception_ports_t = Struct_Unnamed81;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed82 {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub new_port: mach_msg_port_descriptor_t,
    pub NDR: NDR_record_t,
    pub exception_mask: exception_mask_t,
    pub behavior: exception_behavior_t,
    pub new_flavor: thread_state_flavor_t,
}
impl ::std::clone::Clone for Struct_Unnamed82 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed82 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type __Request__host_swap_exception_ports_t = Struct_Unnamed82;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed83 {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub task: mach_msg_port_descriptor_t,
    pub NDR: NDR_record_t,
    pub address: mach_vm_address_t,
    pub size: mach_vm_size_t,
    pub desired_access: vm_prot_t,
}
impl ::std::clone::Clone for Struct_Unnamed83 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed83 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type __Request__mach_vm_wire_t = Struct_Unnamed83;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed84 {
    pub Head: mach_msg_header_t,
}
impl ::std::clone::Clone for Struct_Unnamed84 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed84 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type __Request__host_processor_sets_t = Struct_Unnamed84;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed85 {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub set_name: mach_msg_port_descriptor_t,
}
impl ::std::clone::Clone for Struct_Unnamed85 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed85 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type __Request__host_processor_set_priv_t = Struct_Unnamed85;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed86 {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub control_port: mach_msg_port_descriptor_t,
}
impl ::std::clone::Clone for Struct_Unnamed86 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed86 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type __Request__set_dp_control_port_t = Struct_Unnamed86;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed87 {
    pub Head: mach_msg_header_t,
}
impl ::std::clone::Clone for Struct_Unnamed87 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed87 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type __Request__get_dp_control_port_t = Struct_Unnamed87;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed88 {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub server: mach_msg_port_descriptor_t,
}
impl ::std::clone::Clone for Struct_Unnamed88 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed88 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type __Request__host_set_UNDServer_t = Struct_Unnamed88;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed89 {
    pub Head: mach_msg_header_t,
}
impl ::std::clone::Clone for Struct_Unnamed89 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed89 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type __Request__host_get_UNDServer_t = Struct_Unnamed89;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed90 {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub request_data: mach_msg_ool_descriptor_t,
    pub NDR: NDR_record_t,
    pub user_log_flags: uint32_t,
    pub request_dataCnt: mach_msg_type_number_t,
}
impl ::std::clone::Clone for Struct_Unnamed90 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed90 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type __Request__kext_request_t = Struct_Unnamed90;
#[repr(C)]
#[derive(Copy)]
pub struct Union___RequestUnion__host_priv_subsystem {
    pub _bindgen_data_: [u32; 17usize],
}
impl Union___RequestUnion__host_priv_subsystem {
    pub unsafe fn Request_host_get_boot_info(&mut self)
     -> *mut __Request__host_get_boot_info_t {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn Request_host_reboot(&mut self)
     -> *mut __Request__host_reboot_t {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn Request_host_priv_statistics(&mut self)
     -> *mut __Request__host_priv_statistics_t {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn Request_host_default_memory_manager(&mut self)
     -> *mut __Request__host_default_memory_manager_t {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn Request_vm_wire(&mut self) -> *mut __Request__vm_wire_t {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn Request_thread_wire(&mut self)
     -> *mut __Request__thread_wire_t {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn Request_vm_allocate_cpm(&mut self)
     -> *mut __Request__vm_allocate_cpm_t {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn Request_host_processors(&mut self)
     -> *mut __Request__host_processors_t {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn Request_host_get_clock_control(&mut self)
     -> *mut __Request__host_get_clock_control_t {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn Request_kmod_create(&mut self)
     -> *mut __Request__kmod_create_t {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn Request_kmod_destroy(&mut self)
     -> *mut __Request__kmod_destroy_t {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn Request_kmod_control(&mut self)
     -> *mut __Request__kmod_control_t {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn Request_host_get_special_port(&mut self)
     -> *mut __Request__host_get_special_port_t {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn Request_host_set_special_port(&mut self)
     -> *mut __Request__host_set_special_port_t {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn Request_host_set_exception_ports(&mut self)
     -> *mut __Request__host_set_exception_ports_t {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn Request_host_get_exception_ports(&mut self)
     -> *mut __Request__host_get_exception_ports_t {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn Request_host_swap_exception_ports(&mut self)
     -> *mut __Request__host_swap_exception_ports_t {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn Request_mach_vm_wire(&mut self)
     -> *mut __Request__mach_vm_wire_t {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn Request_host_processor_sets(&mut self)
     -> *mut __Request__host_processor_sets_t {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn Request_host_processor_set_priv(&mut self)
     -> *mut __Request__host_processor_set_priv_t {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn Request_set_dp_control_port(&mut self)
     -> *mut __Request__set_dp_control_port_t {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn Request_get_dp_control_port(&mut self)
     -> *mut __Request__get_dp_control_port_t {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn Request_host_set_UNDServer(&mut self)
     -> *mut __Request__host_set_UNDServer_t {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn Request_host_get_UNDServer(&mut self)
     -> *mut __Request__host_get_UNDServer_t {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn Request_kext_request(&mut self)
     -> *mut __Request__kext_request_t {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
}
impl ::std::clone::Clone for Union___RequestUnion__host_priv_subsystem {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Union___RequestUnion__host_priv_subsystem {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed91 {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
    pub boot_infoOffset: mach_msg_type_number_t,
    pub boot_infoCnt: mach_msg_type_number_t,
    pub boot_info: [::std::os::raw::c_char; 4096usize],
}
impl ::std::clone::Clone for Struct_Unnamed91 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed91 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type __Reply__host_get_boot_info_t = Struct_Unnamed91;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed92 {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
impl ::std::clone::Clone for Struct_Unnamed92 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed92 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type __Reply__host_reboot_t = Struct_Unnamed92;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed93 {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
    pub host_info_outCnt: mach_msg_type_number_t,
    pub host_info_out: [integer_t; 68usize],
}
impl ::std::clone::Clone for Struct_Unnamed93 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed93 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type __Reply__host_priv_statistics_t = Struct_Unnamed93;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed94 {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub default_manager: mach_msg_port_descriptor_t,
}
impl ::std::clone::Clone for Struct_Unnamed94 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed94 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type __Reply__host_default_memory_manager_t = Struct_Unnamed94;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed95 {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
impl ::std::clone::Clone for Struct_Unnamed95 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed95 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type __Reply__vm_wire_t = Struct_Unnamed95;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed96 {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
impl ::std::clone::Clone for Struct_Unnamed96 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed96 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type __Reply__thread_wire_t = Struct_Unnamed96;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed97 {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
    pub address: vm_address_t,
}
impl ::std::clone::Clone for Struct_Unnamed97 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed97 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type __Reply__vm_allocate_cpm_t = Struct_Unnamed97;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed98 {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub out_processor_list: mach_msg_ool_ports_descriptor_t,
    pub NDR: NDR_record_t,
    pub out_processor_listCnt: mach_msg_type_number_t,
}
impl ::std::clone::Clone for Struct_Unnamed98 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed98 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type __Reply__host_processors_t = Struct_Unnamed98;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed99 {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub clock_ctrl: mach_msg_port_descriptor_t,
}
impl ::std::clone::Clone for Struct_Unnamed99 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed99 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type __Reply__host_get_clock_control_t = Struct_Unnamed99;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed100 {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
    pub module: kmod_t,
}
impl ::std::clone::Clone for Struct_Unnamed100 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed100 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type __Reply__kmod_create_t = Struct_Unnamed100;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed101 {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
impl ::std::clone::Clone for Struct_Unnamed101 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed101 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type __Reply__kmod_destroy_t = Struct_Unnamed101;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed102 {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub data: mach_msg_ool_descriptor_t,
    pub NDR: NDR_record_t,
    pub dataCnt: mach_msg_type_number_t,
}
impl ::std::clone::Clone for Struct_Unnamed102 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed102 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type __Reply__kmod_control_t = Struct_Unnamed102;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed103 {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub port: mach_msg_port_descriptor_t,
}
impl ::std::clone::Clone for Struct_Unnamed103 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed103 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type __Reply__host_get_special_port_t = Struct_Unnamed103;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed104 {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
impl ::std::clone::Clone for Struct_Unnamed104 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed104 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type __Reply__host_set_special_port_t = Struct_Unnamed104;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed105 {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
impl ::std::clone::Clone for Struct_Unnamed105 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed105 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type __Reply__host_set_exception_ports_t = Struct_Unnamed105;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed106 {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub old_handlers: [mach_msg_port_descriptor_t; 32usize],
    pub NDR: NDR_record_t,
    pub masksCnt: mach_msg_type_number_t,
    pub masks: [exception_mask_t; 32usize],
    pub old_behaviors: [exception_behavior_t; 32usize],
    pub old_flavors: [thread_state_flavor_t; 32usize],
}
impl ::std::clone::Clone for Struct_Unnamed106 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed106 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type __Reply__host_get_exception_ports_t = Struct_Unnamed106;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed107 {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub old_handlerss: [mach_msg_port_descriptor_t; 32usize],
    pub NDR: NDR_record_t,
    pub masksCnt: mach_msg_type_number_t,
    pub masks: [exception_mask_t; 32usize],
    pub old_behaviors: [exception_behavior_t; 32usize],
    pub old_flavors: [thread_state_flavor_t; 32usize],
}
impl ::std::clone::Clone for Struct_Unnamed107 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed107 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type __Reply__host_swap_exception_ports_t = Struct_Unnamed107;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed108 {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
impl ::std::clone::Clone for Struct_Unnamed108 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed108 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type __Reply__mach_vm_wire_t = Struct_Unnamed108;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed109 {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub processor_sets: mach_msg_ool_ports_descriptor_t,
    pub NDR: NDR_record_t,
    pub processor_setsCnt: mach_msg_type_number_t,
}
impl ::std::clone::Clone for Struct_Unnamed109 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed109 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type __Reply__host_processor_sets_t = Struct_Unnamed109;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed110 {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub set: mach_msg_port_descriptor_t,
}
impl ::std::clone::Clone for Struct_Unnamed110 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed110 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type __Reply__host_processor_set_priv_t = Struct_Unnamed110;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed111 {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
impl ::std::clone::Clone for Struct_Unnamed111 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed111 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type __Reply__set_dp_control_port_t = Struct_Unnamed111;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed112 {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub contorl_port: mach_msg_port_descriptor_t,
}
impl ::std::clone::Clone for Struct_Unnamed112 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed112 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type __Reply__get_dp_control_port_t = Struct_Unnamed112;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed113 {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
impl ::std::clone::Clone for Struct_Unnamed113 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed113 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type __Reply__host_set_UNDServer_t = Struct_Unnamed113;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed114 {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub server: mach_msg_port_descriptor_t,
}
impl ::std::clone::Clone for Struct_Unnamed114 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed114 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type __Reply__host_get_UNDServer_t = Struct_Unnamed114;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed115 {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub response_data: mach_msg_ool_descriptor_t,
    pub log_data: mach_msg_ool_descriptor_t,
    pub NDR: NDR_record_t,
    pub response_dataCnt: mach_msg_type_number_t,
    pub log_dataCnt: mach_msg_type_number_t,
    pub op_result: kern_return_t,
}
impl ::std::clone::Clone for Struct_Unnamed115 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed115 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type __Reply__kext_request_t = Struct_Unnamed115;
#[repr(C)]
#[derive(Copy)]
pub struct Union___ReplyUnion__host_priv_subsystem {
    pub _bindgen_data_: [u32; 1035usize],
}
impl Union___ReplyUnion__host_priv_subsystem {
    pub unsafe fn Reply_host_get_boot_info(&mut self)
     -> *mut __Reply__host_get_boot_info_t {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn Reply_host_reboot(&mut self)
     -> *mut __Reply__host_reboot_t {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn Reply_host_priv_statistics(&mut self)
     -> *mut __Reply__host_priv_statistics_t {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn Reply_host_default_memory_manager(&mut self)
     -> *mut __Reply__host_default_memory_manager_t {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn Reply_vm_wire(&mut self) -> *mut __Reply__vm_wire_t {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn Reply_thread_wire(&mut self)
     -> *mut __Reply__thread_wire_t {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn Reply_vm_allocate_cpm(&mut self)
     -> *mut __Reply__vm_allocate_cpm_t {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn Reply_host_processors(&mut self)
     -> *mut __Reply__host_processors_t {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn Reply_host_get_clock_control(&mut self)
     -> *mut __Reply__host_get_clock_control_t {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn Reply_kmod_create(&mut self)
     -> *mut __Reply__kmod_create_t {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn Reply_kmod_destroy(&mut self)
     -> *mut __Reply__kmod_destroy_t {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn Reply_kmod_control(&mut self)
     -> *mut __Reply__kmod_control_t {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn Reply_host_get_special_port(&mut self)
     -> *mut __Reply__host_get_special_port_t {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn Reply_host_set_special_port(&mut self)
     -> *mut __Reply__host_set_special_port_t {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn Reply_host_set_exception_ports(&mut self)
     -> *mut __Reply__host_set_exception_ports_t {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn Reply_host_get_exception_ports(&mut self)
     -> *mut __Reply__host_get_exception_ports_t {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn Reply_host_swap_exception_ports(&mut self)
     -> *mut __Reply__host_swap_exception_ports_t {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn Reply_mach_vm_wire(&mut self)
     -> *mut __Reply__mach_vm_wire_t {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn Reply_host_processor_sets(&mut self)
     -> *mut __Reply__host_processor_sets_t {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn Reply_host_processor_set_priv(&mut self)
     -> *mut __Reply__host_processor_set_priv_t {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn Reply_set_dp_control_port(&mut self)
     -> *mut __Reply__set_dp_control_port_t {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn Reply_get_dp_control_port(&mut self)
     -> *mut __Reply__get_dp_control_port_t {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn Reply_host_set_UNDServer(&mut self)
     -> *mut __Reply__host_set_UNDServer_t {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn Reply_host_get_UNDServer(&mut self)
     -> *mut __Reply__host_get_UNDServer_t {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn Reply_kext_request(&mut self)
     -> *mut __Reply__kext_request_t {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
}
impl ::std::clone::Clone for Union___ReplyUnion__host_priv_subsystem {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Union___ReplyUnion__host_priv_subsystem {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed116 {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub parent_task: mach_msg_port_descriptor_t,
    pub host: mach_msg_port_descriptor_t,
    pub ledgers: mach_msg_ool_ports_descriptor_t,
    pub NDR: NDR_record_t,
    pub sec_token: security_token_t,
    pub audit_token: audit_token_t,
    pub ledgersCnt: mach_msg_type_number_t,
    pub inherit_memory: boolean_t,
}
impl ::std::clone::Clone for Struct_Unnamed116 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed116 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type __Request__host_security_create_task_token_t = Struct_Unnamed116;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed117 {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub target_task: mach_msg_port_descriptor_t,
    pub host: mach_msg_port_descriptor_t,
    pub NDR: NDR_record_t,
    pub sec_token: security_token_t,
    pub audit_token: audit_token_t,
}
impl ::std::clone::Clone for Struct_Unnamed117 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed117 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type __Request__host_security_set_task_token_t = Struct_Unnamed117;
#[repr(C)]
#[derive(Copy)]
pub struct Union___RequestUnion__host_security_subsystem {
    pub _bindgen_data_: [u32; 31usize],
}
impl Union___RequestUnion__host_security_subsystem {
    pub unsafe fn Request_host_security_create_task_token(&mut self)
     -> *mut __Request__host_security_create_task_token_t {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn Request_host_security_set_task_token(&mut self)
     -> *mut __Request__host_security_set_task_token_t {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
}
impl ::std::clone::Clone for Union___RequestUnion__host_security_subsystem {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Union___RequestUnion__host_security_subsystem
 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed118 {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub child_task: mach_msg_port_descriptor_t,
}
impl ::std::clone::Clone for Struct_Unnamed118 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed118 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type __Reply__host_security_create_task_token_t = Struct_Unnamed118;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed119 {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
impl ::std::clone::Clone for Struct_Unnamed119 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed119 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type __Reply__host_security_set_task_token_t = Struct_Unnamed119;
#[repr(C)]
#[derive(Copy)]
pub struct Union___ReplyUnion__host_security_subsystem {
    pub _bindgen_data_: [u32; 10usize],
}
impl Union___ReplyUnion__host_security_subsystem {
    pub unsafe fn Reply_host_security_create_task_token(&mut self)
     -> *mut __Reply__host_security_create_task_token_t {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn Reply_host_security_set_task_token(&mut self)
     -> *mut __Reply__host_security_set_task_token_t {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
}
impl ::std::clone::Clone for Union___ReplyUnion__host_security_subsystem {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Union___ReplyUnion__host_security_subsystem {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed120 {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub lock_id: ::std::os::raw::c_int,
}
impl ::std::clone::Clone for Struct_Unnamed120 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed120 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type __Request__lock_acquire_t = Struct_Unnamed120;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed121 {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub lock_id: ::std::os::raw::c_int,
}
impl ::std::clone::Clone for Struct_Unnamed121 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed121 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type __Request__lock_release_t = Struct_Unnamed121;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed122 {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub lock_id: ::std::os::raw::c_int,
}
impl ::std::clone::Clone for Struct_Unnamed122 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed122 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type __Request__lock_try_t = Struct_Unnamed122;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed123 {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub lock_id: ::std::os::raw::c_int,
}
impl ::std::clone::Clone for Struct_Unnamed123 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed123 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type __Request__lock_make_stable_t = Struct_Unnamed123;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed124 {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub lock_id: ::std::os::raw::c_int,
}
impl ::std::clone::Clone for Struct_Unnamed124 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed124 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type __Request__lock_handoff_t = Struct_Unnamed124;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed125 {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub lock_id: ::std::os::raw::c_int,
}
impl ::std::clone::Clone for Struct_Unnamed125 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed125 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type __Request__lock_handoff_accept_t = Struct_Unnamed125;
#[repr(C)]
#[derive(Copy)]
pub struct Union___RequestUnion__lock_set_subsystem {
    pub _bindgen_data_: [u32; 9usize],
}
impl Union___RequestUnion__lock_set_subsystem {
    pub unsafe fn Request_lock_acquire(&mut self)
     -> *mut __Request__lock_acquire_t {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn Request_lock_release(&mut self)
     -> *mut __Request__lock_release_t {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn Request_lock_try(&mut self) -> *mut __Request__lock_try_t {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn Request_lock_make_stable(&mut self)
     -> *mut __Request__lock_make_stable_t {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn Request_lock_handoff(&mut self)
     -> *mut __Request__lock_handoff_t {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn Request_lock_handoff_accept(&mut self)
     -> *mut __Request__lock_handoff_accept_t {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
}
impl ::std::clone::Clone for Union___RequestUnion__lock_set_subsystem {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Union___RequestUnion__lock_set_subsystem {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed126 {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
impl ::std::clone::Clone for Struct_Unnamed126 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed126 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type __Reply__lock_acquire_t = Struct_Unnamed126;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed127 {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
impl ::std::clone::Clone for Struct_Unnamed127 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed127 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type __Reply__lock_release_t = Struct_Unnamed127;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed128 {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
impl ::std::clone::Clone for Struct_Unnamed128 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed128 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type __Reply__lock_try_t = Struct_Unnamed128;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed129 {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
impl ::std::clone::Clone for Struct_Unnamed129 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed129 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type __Reply__lock_make_stable_t = Struct_Unnamed129;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed130 {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
impl ::std::clone::Clone for Struct_Unnamed130 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed130 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type __Reply__lock_handoff_t = Struct_Unnamed130;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed131 {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
impl ::std::clone::Clone for Struct_Unnamed131 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed131 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type __Reply__lock_handoff_accept_t = Struct_Unnamed131;
#[repr(C)]
#[derive(Copy)]
pub struct Union___ReplyUnion__lock_set_subsystem {
    pub _bindgen_data_: [u32; 9usize],
}
impl Union___ReplyUnion__lock_set_subsystem {
    pub unsafe fn Reply_lock_acquire(&mut self)
     -> *mut __Reply__lock_acquire_t {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn Reply_lock_release(&mut self)
     -> *mut __Reply__lock_release_t {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn Reply_lock_try(&mut self) -> *mut __Reply__lock_try_t {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn Reply_lock_make_stable(&mut self)
     -> *mut __Reply__lock_make_stable_t {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn Reply_lock_handoff(&mut self)
     -> *mut __Reply__lock_handoff_t {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn Reply_lock_handoff_accept(&mut self)
     -> *mut __Reply__lock_handoff_accept_t {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
}
impl ::std::clone::Clone for Union___ReplyUnion__lock_set_subsystem {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Union___ReplyUnion__lock_set_subsystem {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed132 {
    pub Head: mach_msg_header_t,
}
impl ::std::clone::Clone for Struct_Unnamed132 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed132 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type __Request__processor_start_t = Struct_Unnamed132;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed133 {
    pub Head: mach_msg_header_t,
}
impl ::std::clone::Clone for Struct_Unnamed133 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed133 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type __Request__processor_exit_t = Struct_Unnamed133;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed134 {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub flavor: processor_flavor_t,
    pub processor_info_outCnt: mach_msg_type_number_t,
}
impl ::std::clone::Clone for Struct_Unnamed134 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed134 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type __Request__processor_info_t = Struct_Unnamed134;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed135 {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub processor_cmdCnt: mach_msg_type_number_t,
    pub processor_cmd: [integer_t; 12usize],
}
impl ::std::clone::Clone for Struct_Unnamed135 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed135 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type __Request__processor_control_t = Struct_Unnamed135;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed136 {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub new_set: mach_msg_port_descriptor_t,
    pub NDR: NDR_record_t,
    pub wait: boolean_t,
}
impl ::std::clone::Clone for Struct_Unnamed136 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed136 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type __Request__processor_assign_t = Struct_Unnamed136;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed137 {
    pub Head: mach_msg_header_t,
}
impl ::std::clone::Clone for Struct_Unnamed137 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed137 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type __Request__processor_get_assignment_t = Struct_Unnamed137;
#[repr(C)]
#[derive(Copy)]
pub struct Union___RequestUnion__processor_subsystem {
    pub _bindgen_data_: [u32; 21usize],
}
impl Union___RequestUnion__processor_subsystem {
    pub unsafe fn Request_processor_start(&mut self)
     -> *mut __Request__processor_start_t {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn Request_processor_exit(&mut self)
     -> *mut __Request__processor_exit_t {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn Request_processor_info(&mut self)
     -> *mut __Request__processor_info_t {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn Request_processor_control(&mut self)
     -> *mut __Request__processor_control_t {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn Request_processor_assign(&mut self)
     -> *mut __Request__processor_assign_t {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn Request_processor_get_assignment(&mut self)
     -> *mut __Request__processor_get_assignment_t {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
}
impl ::std::clone::Clone for Union___RequestUnion__processor_subsystem {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Union___RequestUnion__processor_subsystem {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed138 {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
impl ::std::clone::Clone for Struct_Unnamed138 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed138 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type __Reply__processor_start_t = Struct_Unnamed138;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed139 {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
impl ::std::clone::Clone for Struct_Unnamed139 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed139 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type __Reply__processor_exit_t = Struct_Unnamed139;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed140 {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub host: mach_msg_port_descriptor_t,
    pub NDR: NDR_record_t,
    pub processor_info_outCnt: mach_msg_type_number_t,
    pub processor_info_out: [integer_t; 12usize],
}
impl ::std::clone::Clone for Struct_Unnamed140 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed140 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type __Reply__processor_info_t = Struct_Unnamed140;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed141 {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
impl ::std::clone::Clone for Struct_Unnamed141 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed141 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type __Reply__processor_control_t = Struct_Unnamed141;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed142 {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
impl ::std::clone::Clone for Struct_Unnamed142 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed142 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type __Reply__processor_assign_t = Struct_Unnamed142;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed143 {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub assigned_set: mach_msg_port_descriptor_t,
}
impl ::std::clone::Clone for Struct_Unnamed143 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed143 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type __Reply__processor_get_assignment_t = Struct_Unnamed143;
#[repr(C)]
#[derive(Copy)]
pub struct Union___ReplyUnion__processor_subsystem {
    pub _bindgen_data_: [u32; 25usize],
}
impl Union___ReplyUnion__processor_subsystem {
    pub unsafe fn Reply_processor_start(&mut self)
     -> *mut __Reply__processor_start_t {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn Reply_processor_exit(&mut self)
     -> *mut __Reply__processor_exit_t {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn Reply_processor_info(&mut self)
     -> *mut __Reply__processor_info_t {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn Reply_processor_control(&mut self)
     -> *mut __Reply__processor_control_t {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn Reply_processor_assign(&mut self)
     -> *mut __Reply__processor_assign_t {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn Reply_processor_get_assignment(&mut self)
     -> *mut __Reply__processor_get_assignment_t {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
}
impl ::std::clone::Clone for Union___ReplyUnion__processor_subsystem {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Union___ReplyUnion__processor_subsystem {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed144 {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub flavor: processor_set_flavor_t,
    pub info_outCnt: mach_msg_type_number_t,
}
impl ::std::clone::Clone for Struct_Unnamed144 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed144 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type __Request__processor_set_statistics_t = Struct_Unnamed144;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed145 {
    pub Head: mach_msg_header_t,
}
impl ::std::clone::Clone for Struct_Unnamed145 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed145 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type __Request__processor_set_destroy_t = Struct_Unnamed145;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed146 {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub max_priority: ::std::os::raw::c_int,
    pub change_threads: boolean_t,
}
impl ::std::clone::Clone for Struct_Unnamed146 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed146 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type __Request__processor_set_max_priority_t = Struct_Unnamed146;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed147 {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub policy: ::std::os::raw::c_int,
}
impl ::std::clone::Clone for Struct_Unnamed147 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed147 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type __Request__processor_set_policy_enable_t = Struct_Unnamed147;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed148 {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub policy: ::std::os::raw::c_int,
    pub change_threads: boolean_t,
}
impl ::std::clone::Clone for Struct_Unnamed148 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed148 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type __Request__processor_set_policy_disable_t = Struct_Unnamed148;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed149 {
    pub Head: mach_msg_header_t,
}
impl ::std::clone::Clone for Struct_Unnamed149 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed149 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type __Request__processor_set_tasks_t = Struct_Unnamed149;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed150 {
    pub Head: mach_msg_header_t,
}
impl ::std::clone::Clone for Struct_Unnamed150 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed150 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type __Request__processor_set_threads_t = Struct_Unnamed150;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed151 {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub flavor: processor_set_flavor_t,
    pub policy_infoCnt: mach_msg_type_number_t,
    pub policy_info: [integer_t; 5usize],
    pub change: boolean_t,
}
impl ::std::clone::Clone for Struct_Unnamed151 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed151 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type __Request__processor_set_policy_control_t = Struct_Unnamed151;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed152 {
    pub Head: mach_msg_header_t,
}
impl ::std::clone::Clone for Struct_Unnamed152 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed152 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type __Request__processor_set_stack_usage_t = Struct_Unnamed152;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed153 {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub flavor: ::std::os::raw::c_int,
    pub info_outCnt: mach_msg_type_number_t,
}
impl ::std::clone::Clone for Struct_Unnamed153 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed153 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type __Request__processor_set_info_t = Struct_Unnamed153;
#[repr(C)]
#[derive(Copy)]
pub struct Union___RequestUnion__processor_set_subsystem {
    pub _bindgen_data_: [u32; 16usize],
}
impl Union___RequestUnion__processor_set_subsystem {
    pub unsafe fn Request_processor_set_statistics(&mut self)
     -> *mut __Request__processor_set_statistics_t {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn Request_processor_set_destroy(&mut self)
     -> *mut __Request__processor_set_destroy_t {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn Request_processor_set_max_priority(&mut self)
     -> *mut __Request__processor_set_max_priority_t {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn Request_processor_set_policy_enable(&mut self)
     -> *mut __Request__processor_set_policy_enable_t {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn Request_processor_set_policy_disable(&mut self)
     -> *mut __Request__processor_set_policy_disable_t {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn Request_processor_set_tasks(&mut self)
     -> *mut __Request__processor_set_tasks_t {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn Request_processor_set_threads(&mut self)
     -> *mut __Request__processor_set_threads_t {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn Request_processor_set_policy_control(&mut self)
     -> *mut __Request__processor_set_policy_control_t {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn Request_processor_set_stack_usage(&mut self)
     -> *mut __Request__processor_set_stack_usage_t {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn Request_processor_set_info(&mut self)
     -> *mut __Request__processor_set_info_t {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
}
impl ::std::clone::Clone for Union___RequestUnion__processor_set_subsystem {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Union___RequestUnion__processor_set_subsystem
 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed154 {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
    pub info_outCnt: mach_msg_type_number_t,
    pub info_out: [integer_t; 5usize],
}
impl ::std::clone::Clone for Struct_Unnamed154 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed154 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type __Reply__processor_set_statistics_t = Struct_Unnamed154;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed155 {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
impl ::std::clone::Clone for Struct_Unnamed155 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed155 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type __Reply__processor_set_destroy_t = Struct_Unnamed155;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed156 {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
impl ::std::clone::Clone for Struct_Unnamed156 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed156 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type __Reply__processor_set_max_priority_t = Struct_Unnamed156;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed157 {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
impl ::std::clone::Clone for Struct_Unnamed157 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed157 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type __Reply__processor_set_policy_enable_t = Struct_Unnamed157;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed158 {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
impl ::std::clone::Clone for Struct_Unnamed158 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed158 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type __Reply__processor_set_policy_disable_t = Struct_Unnamed158;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed159 {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub task_list: mach_msg_ool_ports_descriptor_t,
    pub NDR: NDR_record_t,
    pub task_listCnt: mach_msg_type_number_t,
}
impl ::std::clone::Clone for Struct_Unnamed159 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed159 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type __Reply__processor_set_tasks_t = Struct_Unnamed159;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed160 {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub thread_list: mach_msg_ool_ports_descriptor_t,
    pub NDR: NDR_record_t,
    pub thread_listCnt: mach_msg_type_number_t,
}
impl ::std::clone::Clone for Struct_Unnamed160 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed160 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type __Reply__processor_set_threads_t = Struct_Unnamed160;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed161 {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
impl ::std::clone::Clone for Struct_Unnamed161 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed161 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type __Reply__processor_set_policy_control_t = Struct_Unnamed161;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed162 {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
    pub ltotal: ::std::os::raw::c_uint,
    pub space: vm_size_t,
    pub resident: vm_size_t,
    pub maxusage: vm_size_t,
    pub maxstack: vm_offset_t,
}
impl ::std::clone::Clone for Struct_Unnamed162 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed162 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type __Reply__processor_set_stack_usage_t = Struct_Unnamed162;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed163 {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub host: mach_msg_port_descriptor_t,
    pub NDR: NDR_record_t,
    pub info_outCnt: mach_msg_type_number_t,
    pub info_out: [integer_t; 5usize],
}
impl ::std::clone::Clone for Struct_Unnamed163 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed163 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type __Reply__processor_set_info_t = Struct_Unnamed163;
#[repr(C)]
#[derive(Copy)]
pub struct Union___ReplyUnion__processor_set_subsystem {
    pub _bindgen_data_: [u32; 18usize],
}
impl Union___ReplyUnion__processor_set_subsystem {
    pub unsafe fn Reply_processor_set_statistics(&mut self)
     -> *mut __Reply__processor_set_statistics_t {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn Reply_processor_set_destroy(&mut self)
     -> *mut __Reply__processor_set_destroy_t {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn Reply_processor_set_max_priority(&mut self)
     -> *mut __Reply__processor_set_max_priority_t {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn Reply_processor_set_policy_enable(&mut self)
     -> *mut __Reply__processor_set_policy_enable_t {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn Reply_processor_set_policy_disable(&mut self)
     -> *mut __Reply__processor_set_policy_disable_t {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn Reply_processor_set_tasks(&mut self)
     -> *mut __Reply__processor_set_tasks_t {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn Reply_processor_set_threads(&mut self)
     -> *mut __Reply__processor_set_threads_t {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn Reply_processor_set_policy_control(&mut self)
     -> *mut __Reply__processor_set_policy_control_t {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn Reply_processor_set_stack_usage(&mut self)
     -> *mut __Reply__processor_set_stack_usage_t {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn Reply_processor_set_info(&mut self)
     -> *mut __Reply__processor_set_info_t {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
}
impl ::std::clone::Clone for Union___ReplyUnion__processor_set_subsystem {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Union___ReplyUnion__processor_set_subsystem {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type sync_policy_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed164 {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub ledgers: mach_msg_ool_ports_descriptor_t,
    pub NDR: NDR_record_t,
    pub ledgersCnt: mach_msg_type_number_t,
    pub inherit_memory: boolean_t,
}
impl ::std::clone::Clone for Struct_Unnamed164 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed164 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type __Request__task_create_t = Struct_Unnamed164;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed165 {
    pub Head: mach_msg_header_t,
}
impl ::std::clone::Clone for Struct_Unnamed165 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed165 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type __Request__task_terminate_t = Struct_Unnamed165;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed166 {
    pub Head: mach_msg_header_t,
}
impl ::std::clone::Clone for Struct_Unnamed166 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed166 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type __Request__task_threads_t = Struct_Unnamed166;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed167 {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub init_port_set: mach_msg_ool_ports_descriptor_t,
    pub NDR: NDR_record_t,
    pub init_port_setCnt: mach_msg_type_number_t,
}
impl ::std::clone::Clone for Struct_Unnamed167 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed167 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type __Request__mach_ports_register_t = Struct_Unnamed167;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed168 {
    pub Head: mach_msg_header_t,
}
impl ::std::clone::Clone for Struct_Unnamed168 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed168 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type __Request__mach_ports_lookup_t = Struct_Unnamed168;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed169 {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub flavor: task_flavor_t,
    pub task_info_outCnt: mach_msg_type_number_t,
}
impl ::std::clone::Clone for Struct_Unnamed169 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed169 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type __Request__task_info_t = Struct_Unnamed169;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed170 {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub flavor: task_flavor_t,
    pub task_info_inCnt: mach_msg_type_number_t,
    pub task_info_in: [integer_t; 52usize],
}
impl ::std::clone::Clone for Struct_Unnamed170 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed170 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type __Request__task_set_info_t = Struct_Unnamed170;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed171 {
    pub Head: mach_msg_header_t,
}
impl ::std::clone::Clone for Struct_Unnamed171 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed171 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type __Request__task_suspend_t = Struct_Unnamed171;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed172 {
    pub Head: mach_msg_header_t,
}
impl ::std::clone::Clone for Struct_Unnamed172 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed172 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type __Request__task_resume_t = Struct_Unnamed172;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed173 {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub which_port: ::std::os::raw::c_int,
}
impl ::std::clone::Clone for Struct_Unnamed173 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed173 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type __Request__task_get_special_port_t = Struct_Unnamed173;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed174 {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub special_port: mach_msg_port_descriptor_t,
    pub NDR: NDR_record_t,
    pub which_port: ::std::os::raw::c_int,
}
impl ::std::clone::Clone for Struct_Unnamed174 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed174 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type __Request__task_set_special_port_t = Struct_Unnamed174;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed175 {
    pub Head: mach_msg_header_t,
}
impl ::std::clone::Clone for Struct_Unnamed175 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed175 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type __Request__thread_create_t = Struct_Unnamed175;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed176 {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub flavor: thread_state_flavor_t,
    pub new_stateCnt: mach_msg_type_number_t,
    pub new_state: [natural_t; 224usize],
}
impl ::std::clone::Clone for Struct_Unnamed176 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed176 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type __Request__thread_create_running_t = Struct_Unnamed176;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed177 {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub new_port: mach_msg_port_descriptor_t,
    pub NDR: NDR_record_t,
    pub exception_mask: exception_mask_t,
    pub behavior: exception_behavior_t,
    pub new_flavor: thread_state_flavor_t,
}
impl ::std::clone::Clone for Struct_Unnamed177 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed177 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type __Request__task_set_exception_ports_t = Struct_Unnamed177;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed178 {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub exception_mask: exception_mask_t,
}
impl ::std::clone::Clone for Struct_Unnamed178 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed178 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type __Request__task_get_exception_ports_t = Struct_Unnamed178;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed179 {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub new_port: mach_msg_port_descriptor_t,
    pub NDR: NDR_record_t,
    pub exception_mask: exception_mask_t,
    pub behavior: exception_behavior_t,
    pub new_flavor: thread_state_flavor_t,
}
impl ::std::clone::Clone for Struct_Unnamed179 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed179 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type __Request__task_swap_exception_ports_t = Struct_Unnamed179;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed180 {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub n_ulocks: ::std::os::raw::c_int,
    pub policy: ::std::os::raw::c_int,
}
impl ::std::clone::Clone for Struct_Unnamed180 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed180 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type __Request__lock_set_create_t = Struct_Unnamed180;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed181 {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub lock_set: mach_msg_port_descriptor_t,
}
impl ::std::clone::Clone for Struct_Unnamed181 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed181 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type __Request__lock_set_destroy_t = Struct_Unnamed181;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed182 {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub policy: ::std::os::raw::c_int,
    pub value: ::std::os::raw::c_int,
}
impl ::std::clone::Clone for Struct_Unnamed182 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed182 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type __Request__semaphore_create_t = Struct_Unnamed182;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed183 {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub semaphore: mach_msg_port_descriptor_t,
}
impl ::std::clone::Clone for Struct_Unnamed183 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed183 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type __Request__semaphore_destroy_t = Struct_Unnamed183;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed184 {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub flavor: task_policy_flavor_t,
    pub policy_infoCnt: mach_msg_type_number_t,
    pub policy_info: [integer_t; 16usize],
}
impl ::std::clone::Clone for Struct_Unnamed184 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed184 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type __Request__task_policy_set_t = Struct_Unnamed184;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed185 {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub flavor: task_policy_flavor_t,
    pub policy_infoCnt: mach_msg_type_number_t,
    pub get_default: boolean_t,
}
impl ::std::clone::Clone for Struct_Unnamed185 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed185 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type __Request__task_policy_get_t = Struct_Unnamed185;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed186 {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub reply: mach_msg_port_descriptor_t,
}
impl ::std::clone::Clone for Struct_Unnamed186 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed186 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type __Request__task_sample_t = Struct_Unnamed186;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed187 {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub policy: policy_t,
    pub baseCnt: mach_msg_type_number_t,
    pub base: [integer_t; 5usize],
    pub set_limit: boolean_t,
    pub change: boolean_t,
}
impl ::std::clone::Clone for Struct_Unnamed187 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed187 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type __Request__task_policy_t = Struct_Unnamed187;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed188 {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub routine_entry_pt: vm_address_t,
    pub routine_number: ::std::os::raw::c_int,
}
impl ::std::clone::Clone for Struct_Unnamed188 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed188 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type __Request__task_set_emulation_t = Struct_Unnamed188;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed189 {
    pub Head: mach_msg_header_t,
}
impl ::std::clone::Clone for Struct_Unnamed189 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed189 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type __Request__task_get_emulation_vector_t = Struct_Unnamed189;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed190 {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub emulation_vector: mach_msg_ool_descriptor_t,
    pub NDR: NDR_record_t,
    pub vector_start: ::std::os::raw::c_int,
    pub emulation_vectorCnt: mach_msg_type_number_t,
}
impl ::std::clone::Clone for Struct_Unnamed190 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed190 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type __Request__task_set_emulation_vector_t = Struct_Unnamed190;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed191 {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub basepc: vm_address_t,
    pub boundspc: vm_address_t,
}
impl ::std::clone::Clone for Struct_Unnamed191 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed191 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type __Request__task_set_ras_pc_t = Struct_Unnamed191;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed192 {
    pub Head: mach_msg_header_t,
}
impl ::std::clone::Clone for Struct_Unnamed192 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed192 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type __Request__task_zone_info_t = Struct_Unnamed192;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed193 {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub new_set: mach_msg_port_descriptor_t,
    pub NDR: NDR_record_t,
    pub assign_threads: boolean_t,
}
impl ::std::clone::Clone for Struct_Unnamed193 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed193 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type __Request__task_assign_t = Struct_Unnamed193;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed194 {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub assign_threads: boolean_t,
}
impl ::std::clone::Clone for Struct_Unnamed194 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed194 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type __Request__task_assign_default_t = Struct_Unnamed194;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed195 {
    pub Head: mach_msg_header_t,
}
impl ::std::clone::Clone for Struct_Unnamed195 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed195 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type __Request__task_get_assignment_t = Struct_Unnamed195;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed196 {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub pset: mach_msg_port_descriptor_t,
    pub NDR: NDR_record_t,
    pub policy: policy_t,
    pub baseCnt: mach_msg_type_number_t,
    pub base: [integer_t; 5usize],
    pub limitCnt: mach_msg_type_number_t,
    pub limit: [integer_t; 1usize],
    pub change: boolean_t,
}
impl ::std::clone::Clone for Struct_Unnamed196 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed196 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type __Request__task_set_policy_t = Struct_Unnamed196;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed197 {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub flavor: thread_state_flavor_t,
    pub old_stateCnt: mach_msg_type_number_t,
}
impl ::std::clone::Clone for Struct_Unnamed197 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed197 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type __Request__task_get_state_t = Struct_Unnamed197;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed198 {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub flavor: thread_state_flavor_t,
    pub new_stateCnt: mach_msg_type_number_t,
    pub new_state: [natural_t; 224usize],
}
impl ::std::clone::Clone for Struct_Unnamed198 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed198 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type __Request__task_set_state_t = Struct_Unnamed198;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed199 {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub new_limit: ::std::os::raw::c_int,
}
impl ::std::clone::Clone for Struct_Unnamed199 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed199 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type __Request__task_set_phys_footprint_limit_t = Struct_Unnamed199;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed200 {
    pub Head: mach_msg_header_t,
}
impl ::std::clone::Clone for Struct_Unnamed200 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed200 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type __Request__task_suspend2_t = Struct_Unnamed200;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed201 {
    pub Head: mach_msg_header_t,
}
impl ::std::clone::Clone for Struct_Unnamed201 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed201 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type __Request__task_resume2_t = Struct_Unnamed201;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed202 {
    pub Head: mach_msg_header_t,
}
impl ::std::clone::Clone for Struct_Unnamed202 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed202 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type __Request__task_purgable_info_t = Struct_Unnamed202;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed203 {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub which: mach_voucher_selector_t,
}
impl ::std::clone::Clone for Struct_Unnamed203 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed203 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type __Request__task_get_mach_voucher_t = Struct_Unnamed203;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed204 {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub voucher: mach_msg_port_descriptor_t,
}
impl ::std::clone::Clone for Struct_Unnamed204 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed204 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type __Request__task_set_mach_voucher_t = Struct_Unnamed204;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed205 {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub new_voucher: mach_msg_port_descriptor_t,
    pub old_voucher: mach_msg_port_descriptor_t,
}
impl ::std::clone::Clone for Struct_Unnamed205 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed205 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type __Request__task_swap_mach_voucher_t = Struct_Unnamed205;
#[repr(C)]
#[derive(Copy)]
pub struct Union___RequestUnion__task_subsystem {
    pub _bindgen_data_: [u32; 234usize],
}
impl Union___RequestUnion__task_subsystem {
    pub unsafe fn Request_task_create(&mut self)
     -> *mut __Request__task_create_t {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn Request_task_terminate(&mut self)
     -> *mut __Request__task_terminate_t {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn Request_task_threads(&mut self)
     -> *mut __Request__task_threads_t {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn Request_mach_ports_register(&mut self)
     -> *mut __Request__mach_ports_register_t {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn Request_mach_ports_lookup(&mut self)
     -> *mut __Request__mach_ports_lookup_t {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn Request_task_info(&mut self)
     -> *mut __Request__task_info_t {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn Request_task_set_info(&mut self)
     -> *mut __Request__task_set_info_t {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn Request_task_suspend(&mut self)
     -> *mut __Request__task_suspend_t {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn Request_task_resume(&mut self)
     -> *mut __Request__task_resume_t {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn Request_task_get_special_port(&mut self)
     -> *mut __Request__task_get_special_port_t {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn Request_task_set_special_port(&mut self)
     -> *mut __Request__task_set_special_port_t {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn Request_thread_create(&mut self)
     -> *mut __Request__thread_create_t {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn Request_thread_create_running(&mut self)
     -> *mut __Request__thread_create_running_t {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn Request_task_set_exception_ports(&mut self)
     -> *mut __Request__task_set_exception_ports_t {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn Request_task_get_exception_ports(&mut self)
     -> *mut __Request__task_get_exception_ports_t {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn Request_task_swap_exception_ports(&mut self)
     -> *mut __Request__task_swap_exception_ports_t {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn Request_lock_set_create(&mut self)
     -> *mut __Request__lock_set_create_t {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn Request_lock_set_destroy(&mut self)
     -> *mut __Request__lock_set_destroy_t {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn Request_semaphore_create(&mut self)
     -> *mut __Request__semaphore_create_t {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn Request_semaphore_destroy(&mut self)
     -> *mut __Request__semaphore_destroy_t {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn Request_task_policy_set(&mut self)
     -> *mut __Request__task_policy_set_t {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn Request_task_policy_get(&mut self)
     -> *mut __Request__task_policy_get_t {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn Request_task_sample(&mut self)
     -> *mut __Request__task_sample_t {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn Request_task_policy(&mut self)
     -> *mut __Request__task_policy_t {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn Request_task_set_emulation(&mut self)
     -> *mut __Request__task_set_emulation_t {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn Request_task_get_emulation_vector(&mut self)
     -> *mut __Request__task_get_emulation_vector_t {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn Request_task_set_emulation_vector(&mut self)
     -> *mut __Request__task_set_emulation_vector_t {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn Request_task_set_ras_pc(&mut self)
     -> *mut __Request__task_set_ras_pc_t {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn Request_task_zone_info(&mut self)
     -> *mut __Request__task_zone_info_t {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn Request_task_assign(&mut self)
     -> *mut __Request__task_assign_t {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn Request_task_assign_default(&mut self)
     -> *mut __Request__task_assign_default_t {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn Request_task_get_assignment(&mut self)
     -> *mut __Request__task_get_assignment_t {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn Request_task_set_policy(&mut self)
     -> *mut __Request__task_set_policy_t {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn Request_task_get_state(&mut self)
     -> *mut __Request__task_get_state_t {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn Request_task_set_state(&mut self)
     -> *mut __Request__task_set_state_t {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn Request_task_set_phys_footprint_limit(&mut self)
     -> *mut __Request__task_set_phys_footprint_limit_t {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn Request_task_suspend2(&mut self)
     -> *mut __Request__task_suspend2_t {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn Request_task_resume2(&mut self)
     -> *mut __Request__task_resume2_t {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn Request_task_purgable_info(&mut self)
     -> *mut __Request__task_purgable_info_t {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn Request_task_get_mach_voucher(&mut self)
     -> *mut __Request__task_get_mach_voucher_t {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn Request_task_set_mach_voucher(&mut self)
     -> *mut __Request__task_set_mach_voucher_t {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn Request_task_swap_mach_voucher(&mut self)
     -> *mut __Request__task_swap_mach_voucher_t {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
}
impl ::std::clone::Clone for Union___RequestUnion__task_subsystem {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Union___RequestUnion__task_subsystem {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed206 {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub child_task: mach_msg_port_descriptor_t,
}
impl ::std::clone::Clone for Struct_Unnamed206 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed206 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type __Reply__task_create_t = Struct_Unnamed206;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed207 {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
impl ::std::clone::Clone for Struct_Unnamed207 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed207 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type __Reply__task_terminate_t = Struct_Unnamed207;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed208 {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub act_list: mach_msg_ool_ports_descriptor_t,
    pub NDR: NDR_record_t,
    pub act_listCnt: mach_msg_type_number_t,
}
impl ::std::clone::Clone for Struct_Unnamed208 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed208 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type __Reply__task_threads_t = Struct_Unnamed208;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed209 {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
impl ::std::clone::Clone for Struct_Unnamed209 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed209 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type __Reply__mach_ports_register_t = Struct_Unnamed209;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed210 {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub init_port_set: mach_msg_ool_ports_descriptor_t,
    pub NDR: NDR_record_t,
    pub init_port_setCnt: mach_msg_type_number_t,
}
impl ::std::clone::Clone for Struct_Unnamed210 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed210 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type __Reply__mach_ports_lookup_t = Struct_Unnamed210;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed211 {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
    pub task_info_outCnt: mach_msg_type_number_t,
    pub task_info_out: [integer_t; 52usize],
}
impl ::std::clone::Clone for Struct_Unnamed211 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed211 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type __Reply__task_info_t = Struct_Unnamed211;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed212 {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
impl ::std::clone::Clone for Struct_Unnamed212 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed212 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type __Reply__task_set_info_t = Struct_Unnamed212;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed213 {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
impl ::std::clone::Clone for Struct_Unnamed213 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed213 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type __Reply__task_suspend_t = Struct_Unnamed213;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed214 {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
impl ::std::clone::Clone for Struct_Unnamed214 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed214 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type __Reply__task_resume_t = Struct_Unnamed214;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed215 {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub special_port: mach_msg_port_descriptor_t,
}
impl ::std::clone::Clone for Struct_Unnamed215 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed215 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type __Reply__task_get_special_port_t = Struct_Unnamed215;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed216 {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
impl ::std::clone::Clone for Struct_Unnamed216 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed216 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type __Reply__task_set_special_port_t = Struct_Unnamed216;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed217 {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub child_act: mach_msg_port_descriptor_t,
}
impl ::std::clone::Clone for Struct_Unnamed217 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed217 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type __Reply__thread_create_t = Struct_Unnamed217;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed218 {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub child_act: mach_msg_port_descriptor_t,
}
impl ::std::clone::Clone for Struct_Unnamed218 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed218 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type __Reply__thread_create_running_t = Struct_Unnamed218;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed219 {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
impl ::std::clone::Clone for Struct_Unnamed219 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed219 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type __Reply__task_set_exception_ports_t = Struct_Unnamed219;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed220 {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub old_handlers: [mach_msg_port_descriptor_t; 32usize],
    pub NDR: NDR_record_t,
    pub masksCnt: mach_msg_type_number_t,
    pub masks: [exception_mask_t; 32usize],
    pub old_behaviors: [exception_behavior_t; 32usize],
    pub old_flavors: [thread_state_flavor_t; 32usize],
}
impl ::std::clone::Clone for Struct_Unnamed220 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed220 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type __Reply__task_get_exception_ports_t = Struct_Unnamed220;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed221 {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub old_handlerss: [mach_msg_port_descriptor_t; 32usize],
    pub NDR: NDR_record_t,
    pub masksCnt: mach_msg_type_number_t,
    pub masks: [exception_mask_t; 32usize],
    pub old_behaviors: [exception_behavior_t; 32usize],
    pub old_flavors: [thread_state_flavor_t; 32usize],
}
impl ::std::clone::Clone for Struct_Unnamed221 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed221 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type __Reply__task_swap_exception_ports_t = Struct_Unnamed221;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed222 {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub new_lock_set: mach_msg_port_descriptor_t,
}
impl ::std::clone::Clone for Struct_Unnamed222 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed222 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type __Reply__lock_set_create_t = Struct_Unnamed222;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed223 {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
impl ::std::clone::Clone for Struct_Unnamed223 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed223 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type __Reply__lock_set_destroy_t = Struct_Unnamed223;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed224 {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub semaphore: mach_msg_port_descriptor_t,
}
impl ::std::clone::Clone for Struct_Unnamed224 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed224 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type __Reply__semaphore_create_t = Struct_Unnamed224;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed225 {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
impl ::std::clone::Clone for Struct_Unnamed225 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed225 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type __Reply__semaphore_destroy_t = Struct_Unnamed225;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed226 {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
impl ::std::clone::Clone for Struct_Unnamed226 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed226 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type __Reply__task_policy_set_t = Struct_Unnamed226;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed227 {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
    pub policy_infoCnt: mach_msg_type_number_t,
    pub policy_info: [integer_t; 16usize],
    pub get_default: boolean_t,
}
impl ::std::clone::Clone for Struct_Unnamed227 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed227 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type __Reply__task_policy_get_t = Struct_Unnamed227;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed228 {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
impl ::std::clone::Clone for Struct_Unnamed228 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed228 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type __Reply__task_sample_t = Struct_Unnamed228;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed229 {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
impl ::std::clone::Clone for Struct_Unnamed229 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed229 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type __Reply__task_policy_t = Struct_Unnamed229;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed230 {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
impl ::std::clone::Clone for Struct_Unnamed230 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed230 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type __Reply__task_set_emulation_t = Struct_Unnamed230;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed231 {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub emulation_vector: mach_msg_ool_descriptor_t,
    pub NDR: NDR_record_t,
    pub vector_start: ::std::os::raw::c_int,
    pub emulation_vectorCnt: mach_msg_type_number_t,
}
impl ::std::clone::Clone for Struct_Unnamed231 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed231 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type __Reply__task_get_emulation_vector_t = Struct_Unnamed231;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed232 {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
impl ::std::clone::Clone for Struct_Unnamed232 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed232 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type __Reply__task_set_emulation_vector_t = Struct_Unnamed232;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed233 {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
impl ::std::clone::Clone for Struct_Unnamed233 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed233 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type __Reply__task_set_ras_pc_t = Struct_Unnamed233;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed234 {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub names: mach_msg_ool_descriptor_t,
    pub info: mach_msg_ool_descriptor_t,
    pub NDR: NDR_record_t,
    pub namesCnt: mach_msg_type_number_t,
    pub infoCnt: mach_msg_type_number_t,
}
impl ::std::clone::Clone for Struct_Unnamed234 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed234 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type __Reply__task_zone_info_t = Struct_Unnamed234;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed235 {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
impl ::std::clone::Clone for Struct_Unnamed235 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed235 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type __Reply__task_assign_t = Struct_Unnamed235;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed236 {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
impl ::std::clone::Clone for Struct_Unnamed236 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed236 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type __Reply__task_assign_default_t = Struct_Unnamed236;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed237 {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub assigned_set: mach_msg_port_descriptor_t,
}
impl ::std::clone::Clone for Struct_Unnamed237 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed237 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type __Reply__task_get_assignment_t = Struct_Unnamed237;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed238 {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
impl ::std::clone::Clone for Struct_Unnamed238 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed238 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type __Reply__task_set_policy_t = Struct_Unnamed238;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed239 {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
    pub old_stateCnt: mach_msg_type_number_t,
    pub old_state: [natural_t; 224usize],
}
impl ::std::clone::Clone for Struct_Unnamed239 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed239 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type __Reply__task_get_state_t = Struct_Unnamed239;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed240 {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
impl ::std::clone::Clone for Struct_Unnamed240 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed240 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type __Reply__task_set_state_t = Struct_Unnamed240;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed241 {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
    pub old_limit: ::std::os::raw::c_int,
}
impl ::std::clone::Clone for Struct_Unnamed241 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed241 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type __Reply__task_set_phys_footprint_limit_t = Struct_Unnamed241;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed242 {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub suspend_token: mach_msg_port_descriptor_t,
}
impl ::std::clone::Clone for Struct_Unnamed242 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed242 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type __Reply__task_suspend2_t = Struct_Unnamed242;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed243 {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
impl ::std::clone::Clone for Struct_Unnamed243 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed243 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type __Reply__task_resume2_t = Struct_Unnamed243;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed244 {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
    pub stats: task_purgable_info_t,
}
impl ::std::clone::Clone for Struct_Unnamed244 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed244 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type __Reply__task_purgable_info_t = Struct_Unnamed244;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed245 {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub voucher: mach_msg_port_descriptor_t,
}
impl ::std::clone::Clone for Struct_Unnamed245 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed245 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type __Reply__task_get_mach_voucher_t = Struct_Unnamed245;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed246 {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
impl ::std::clone::Clone for Struct_Unnamed246 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed246 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type __Reply__task_set_mach_voucher_t = Struct_Unnamed246;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed247 {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub old_voucher: mach_msg_port_descriptor_t,
}
impl ::std::clone::Clone for Struct_Unnamed247 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed247 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type __Reply__task_swap_mach_voucher_t = Struct_Unnamed247;
#[repr(C)]
#[derive(Copy)]
pub struct Union___ReplyUnion__task_subsystem {
    pub _bindgen_data_: [u32; 234usize],
}
impl Union___ReplyUnion__task_subsystem {
    pub unsafe fn Reply_task_create(&mut self)
     -> *mut __Reply__task_create_t {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn Reply_task_terminate(&mut self)
     -> *mut __Reply__task_terminate_t {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn Reply_task_threads(&mut self)
     -> *mut __Reply__task_threads_t {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn Reply_mach_ports_register(&mut self)
     -> *mut __Reply__mach_ports_register_t {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn Reply_mach_ports_lookup(&mut self)
     -> *mut __Reply__mach_ports_lookup_t {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn Reply_task_info(&mut self) -> *mut __Reply__task_info_t {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn Reply_task_set_info(&mut self)
     -> *mut __Reply__task_set_info_t {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn Reply_task_suspend(&mut self)
     -> *mut __Reply__task_suspend_t {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn Reply_task_resume(&mut self)
     -> *mut __Reply__task_resume_t {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn Reply_task_get_special_port(&mut self)
     -> *mut __Reply__task_get_special_port_t {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn Reply_task_set_special_port(&mut self)
     -> *mut __Reply__task_set_special_port_t {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn Reply_thread_create(&mut self)
     -> *mut __Reply__thread_create_t {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn Reply_thread_create_running(&mut self)
     -> *mut __Reply__thread_create_running_t {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn Reply_task_set_exception_ports(&mut self)
     -> *mut __Reply__task_set_exception_ports_t {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn Reply_task_get_exception_ports(&mut self)
     -> *mut __Reply__task_get_exception_ports_t {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn Reply_task_swap_exception_ports(&mut self)
     -> *mut __Reply__task_swap_exception_ports_t {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn Reply_lock_set_create(&mut self)
     -> *mut __Reply__lock_set_create_t {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn Reply_lock_set_destroy(&mut self)
     -> *mut __Reply__lock_set_destroy_t {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn Reply_semaphore_create(&mut self)
     -> *mut __Reply__semaphore_create_t {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn Reply_semaphore_destroy(&mut self)
     -> *mut __Reply__semaphore_destroy_t {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn Reply_task_policy_set(&mut self)
     -> *mut __Reply__task_policy_set_t {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn Reply_task_policy_get(&mut self)
     -> *mut __Reply__task_policy_get_t {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn Reply_task_sample(&mut self)
     -> *mut __Reply__task_sample_t {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn Reply_task_policy(&mut self)
     -> *mut __Reply__task_policy_t {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn Reply_task_set_emulation(&mut self)
     -> *mut __Reply__task_set_emulation_t {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn Reply_task_get_emulation_vector(&mut self)
     -> *mut __Reply__task_get_emulation_vector_t {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn Reply_task_set_emulation_vector(&mut self)
     -> *mut __Reply__task_set_emulation_vector_t {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn Reply_task_set_ras_pc(&mut self)
     -> *mut __Reply__task_set_ras_pc_t {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn Reply_task_zone_info(&mut self)
     -> *mut __Reply__task_zone_info_t {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn Reply_task_assign(&mut self)
     -> *mut __Reply__task_assign_t {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn Reply_task_assign_default(&mut self)
     -> *mut __Reply__task_assign_default_t {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn Reply_task_get_assignment(&mut self)
     -> *mut __Reply__task_get_assignment_t {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn Reply_task_set_policy(&mut self)
     -> *mut __Reply__task_set_policy_t {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn Reply_task_get_state(&mut self)
     -> *mut __Reply__task_get_state_t {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn Reply_task_set_state(&mut self)
     -> *mut __Reply__task_set_state_t {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn Reply_task_set_phys_footprint_limit(&mut self)
     -> *mut __Reply__task_set_phys_footprint_limit_t {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn Reply_task_suspend2(&mut self)
     -> *mut __Reply__task_suspend2_t {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn Reply_task_resume2(&mut self)
     -> *mut __Reply__task_resume2_t {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn Reply_task_purgable_info(&mut self)
     -> *mut __Reply__task_purgable_info_t {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn Reply_task_get_mach_voucher(&mut self)
     -> *mut __Reply__task_get_mach_voucher_t {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn Reply_task_set_mach_voucher(&mut self)
     -> *mut __Reply__task_set_mach_voucher_t {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn Reply_task_swap_mach_voucher(&mut self)
     -> *mut __Reply__task_swap_mach_voucher_t {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
}
impl ::std::clone::Clone for Union___ReplyUnion__task_subsystem {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Union___ReplyUnion__task_subsystem {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed248 {
    pub Head: mach_msg_header_t,
}
impl ::std::clone::Clone for Struct_Unnamed248 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed248 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type __Request__thread_terminate_t = Struct_Unnamed248;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed249 {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub flavor: ::std::os::raw::c_int,
    pub old_stateCnt: mach_msg_type_number_t,
}
impl ::std::clone::Clone for Struct_Unnamed249 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed249 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type __Request__act_get_state_t = Struct_Unnamed249;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed250 {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub flavor: ::std::os::raw::c_int,
    pub new_stateCnt: mach_msg_type_number_t,
    pub new_state: [natural_t; 224usize],
}
impl ::std::clone::Clone for Struct_Unnamed250 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed250 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type __Request__act_set_state_t = Struct_Unnamed250;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed251 {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub flavor: thread_state_flavor_t,
    pub old_stateCnt: mach_msg_type_number_t,
}
impl ::std::clone::Clone for Struct_Unnamed251 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed251 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type __Request__thread_get_state_t = Struct_Unnamed251;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed252 {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub flavor: thread_state_flavor_t,
    pub new_stateCnt: mach_msg_type_number_t,
    pub new_state: [natural_t; 224usize],
}
impl ::std::clone::Clone for Struct_Unnamed252 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed252 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type __Request__thread_set_state_t = Struct_Unnamed252;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed253 {
    pub Head: mach_msg_header_t,
}
impl ::std::clone::Clone for Struct_Unnamed253 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed253 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type __Request__thread_suspend_t = Struct_Unnamed253;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed254 {
    pub Head: mach_msg_header_t,
}
impl ::std::clone::Clone for Struct_Unnamed254 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed254 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type __Request__thread_resume_t = Struct_Unnamed254;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed255 {
    pub Head: mach_msg_header_t,
}
impl ::std::clone::Clone for Struct_Unnamed255 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed255 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type __Request__thread_abort_t = Struct_Unnamed255;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed256 {
    pub Head: mach_msg_header_t,
}
impl ::std::clone::Clone for Struct_Unnamed256 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed256 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type __Request__thread_abort_safely_t = Struct_Unnamed256;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed257 {
    pub Head: mach_msg_header_t,
}
impl ::std::clone::Clone for Struct_Unnamed257 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed257 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type __Request__thread_depress_abort_t = Struct_Unnamed257;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed258 {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub which_port: ::std::os::raw::c_int,
}
impl ::std::clone::Clone for Struct_Unnamed258 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed258 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type __Request__thread_get_special_port_t = Struct_Unnamed258;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed259 {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub special_port: mach_msg_port_descriptor_t,
    pub NDR: NDR_record_t,
    pub which_port: ::std::os::raw::c_int,
}
impl ::std::clone::Clone for Struct_Unnamed259 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed259 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type __Request__thread_set_special_port_t = Struct_Unnamed259;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed260 {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub flavor: thread_flavor_t,
    pub thread_info_outCnt: mach_msg_type_number_t,
}
impl ::std::clone::Clone for Struct_Unnamed260 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed260 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type __Request__thread_info_t = Struct_Unnamed260;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed261 {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub new_port: mach_msg_port_descriptor_t,
    pub NDR: NDR_record_t,
    pub exception_mask: exception_mask_t,
    pub behavior: exception_behavior_t,
    pub new_flavor: thread_state_flavor_t,
}
impl ::std::clone::Clone for Struct_Unnamed261 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed261 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type __Request__thread_set_exception_ports_t = Struct_Unnamed261;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed262 {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub exception_mask: exception_mask_t,
}
impl ::std::clone::Clone for Struct_Unnamed262 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed262 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type __Request__thread_get_exception_ports_t = Struct_Unnamed262;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed263 {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub new_port: mach_msg_port_descriptor_t,
    pub NDR: NDR_record_t,
    pub exception_mask: exception_mask_t,
    pub behavior: exception_behavior_t,
    pub new_flavor: thread_state_flavor_t,
}
impl ::std::clone::Clone for Struct_Unnamed263 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed263 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type __Request__thread_swap_exception_ports_t = Struct_Unnamed263;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed264 {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub policy: policy_t,
    pub baseCnt: mach_msg_type_number_t,
    pub base: [integer_t; 5usize],
    pub set_limit: boolean_t,
}
impl ::std::clone::Clone for Struct_Unnamed264 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed264 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type __Request__thread_policy_t = Struct_Unnamed264;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed265 {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub flavor: thread_policy_flavor_t,
    pub policy_infoCnt: mach_msg_type_number_t,
    pub policy_info: [integer_t; 16usize],
}
impl ::std::clone::Clone for Struct_Unnamed265 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed265 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type __Request__thread_policy_set_t = Struct_Unnamed265;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed266 {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub flavor: thread_policy_flavor_t,
    pub policy_infoCnt: mach_msg_type_number_t,
    pub get_default: boolean_t,
}
impl ::std::clone::Clone for Struct_Unnamed266 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed266 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type __Request__thread_policy_get_t = Struct_Unnamed266;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed267 {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub reply: mach_msg_port_descriptor_t,
}
impl ::std::clone::Clone for Struct_Unnamed267 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed267 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type __Request__thread_sample_t = Struct_Unnamed267;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed268 {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub trace_status: boolean_t,
}
impl ::std::clone::Clone for Struct_Unnamed268 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed268 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type __Request__etap_trace_thread_t = Struct_Unnamed268;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed269 {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub new_set: mach_msg_port_descriptor_t,
}
impl ::std::clone::Clone for Struct_Unnamed269 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed269 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type __Request__thread_assign_t = Struct_Unnamed269;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed270 {
    pub Head: mach_msg_header_t,
}
impl ::std::clone::Clone for Struct_Unnamed270 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed270 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type __Request__thread_assign_default_t = Struct_Unnamed270;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed271 {
    pub Head: mach_msg_header_t,
}
impl ::std::clone::Clone for Struct_Unnamed271 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed271 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type __Request__thread_get_assignment_t = Struct_Unnamed271;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed272 {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub pset: mach_msg_port_descriptor_t,
    pub NDR: NDR_record_t,
    pub policy: policy_t,
    pub baseCnt: mach_msg_type_number_t,
    pub base: [integer_t; 5usize],
    pub limitCnt: mach_msg_type_number_t,
    pub limit: [integer_t; 1usize],
}
impl ::std::clone::Clone for Struct_Unnamed272 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed272 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type __Request__thread_set_policy_t = Struct_Unnamed272;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed273 {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub which: mach_voucher_selector_t,
}
impl ::std::clone::Clone for Struct_Unnamed273 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed273 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type __Request__thread_get_mach_voucher_t = Struct_Unnamed273;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed274 {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub voucher: mach_msg_port_descriptor_t,
}
impl ::std::clone::Clone for Struct_Unnamed274 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed274 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type __Request__thread_set_mach_voucher_t = Struct_Unnamed274;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed275 {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub new_voucher: mach_msg_port_descriptor_t,
    pub old_voucher: mach_msg_port_descriptor_t,
}
impl ::std::clone::Clone for Struct_Unnamed275 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed275 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type __Request__thread_swap_mach_voucher_t = Struct_Unnamed275;
#[repr(C)]
#[derive(Copy)]
pub struct Union___RequestUnion__thread_act_subsystem {
    pub _bindgen_data_: [u32; 234usize],
}
impl Union___RequestUnion__thread_act_subsystem {
    pub unsafe fn Request_thread_terminate(&mut self)
     -> *mut __Request__thread_terminate_t {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn Request_act_get_state(&mut self)
     -> *mut __Request__act_get_state_t {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn Request_act_set_state(&mut self)
     -> *mut __Request__act_set_state_t {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn Request_thread_get_state(&mut self)
     -> *mut __Request__thread_get_state_t {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn Request_thread_set_state(&mut self)
     -> *mut __Request__thread_set_state_t {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn Request_thread_suspend(&mut self)
     -> *mut __Request__thread_suspend_t {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn Request_thread_resume(&mut self)
     -> *mut __Request__thread_resume_t {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn Request_thread_abort(&mut self)
     -> *mut __Request__thread_abort_t {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn Request_thread_abort_safely(&mut self)
     -> *mut __Request__thread_abort_safely_t {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn Request_thread_depress_abort(&mut self)
     -> *mut __Request__thread_depress_abort_t {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn Request_thread_get_special_port(&mut self)
     -> *mut __Request__thread_get_special_port_t {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn Request_thread_set_special_port(&mut self)
     -> *mut __Request__thread_set_special_port_t {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn Request_thread_info(&mut self)
     -> *mut __Request__thread_info_t {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn Request_thread_set_exception_ports(&mut self)
     -> *mut __Request__thread_set_exception_ports_t {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn Request_thread_get_exception_ports(&mut self)
     -> *mut __Request__thread_get_exception_ports_t {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn Request_thread_swap_exception_ports(&mut self)
     -> *mut __Request__thread_swap_exception_ports_t {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn Request_thread_policy(&mut self)
     -> *mut __Request__thread_policy_t {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn Request_thread_policy_set(&mut self)
     -> *mut __Request__thread_policy_set_t {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn Request_thread_policy_get(&mut self)
     -> *mut __Request__thread_policy_get_t {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn Request_thread_sample(&mut self)
     -> *mut __Request__thread_sample_t {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn Request_etap_trace_thread(&mut self)
     -> *mut __Request__etap_trace_thread_t {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn Request_thread_assign(&mut self)
     -> *mut __Request__thread_assign_t {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn Request_thread_assign_default(&mut self)
     -> *mut __Request__thread_assign_default_t {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn Request_thread_get_assignment(&mut self)
     -> *mut __Request__thread_get_assignment_t {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn Request_thread_set_policy(&mut self)
     -> *mut __Request__thread_set_policy_t {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn Request_thread_get_mach_voucher(&mut self)
     -> *mut __Request__thread_get_mach_voucher_t {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn Request_thread_set_mach_voucher(&mut self)
     -> *mut __Request__thread_set_mach_voucher_t {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn Request_thread_swap_mach_voucher(&mut self)
     -> *mut __Request__thread_swap_mach_voucher_t {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
}
impl ::std::clone::Clone for Union___RequestUnion__thread_act_subsystem {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Union___RequestUnion__thread_act_subsystem {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed276 {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
impl ::std::clone::Clone for Struct_Unnamed276 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed276 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type __Reply__thread_terminate_t = Struct_Unnamed276;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed277 {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
    pub old_stateCnt: mach_msg_type_number_t,
    pub old_state: [natural_t; 224usize],
}
impl ::std::clone::Clone for Struct_Unnamed277 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed277 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type __Reply__act_get_state_t = Struct_Unnamed277;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed278 {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
impl ::std::clone::Clone for Struct_Unnamed278 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed278 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type __Reply__act_set_state_t = Struct_Unnamed278;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed279 {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
    pub old_stateCnt: mach_msg_type_number_t,
    pub old_state: [natural_t; 224usize],
}
impl ::std::clone::Clone for Struct_Unnamed279 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed279 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type __Reply__thread_get_state_t = Struct_Unnamed279;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed280 {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
impl ::std::clone::Clone for Struct_Unnamed280 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed280 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type __Reply__thread_set_state_t = Struct_Unnamed280;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed281 {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
impl ::std::clone::Clone for Struct_Unnamed281 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed281 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type __Reply__thread_suspend_t = Struct_Unnamed281;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed282 {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
impl ::std::clone::Clone for Struct_Unnamed282 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed282 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type __Reply__thread_resume_t = Struct_Unnamed282;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed283 {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
impl ::std::clone::Clone for Struct_Unnamed283 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed283 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type __Reply__thread_abort_t = Struct_Unnamed283;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed284 {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
impl ::std::clone::Clone for Struct_Unnamed284 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed284 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type __Reply__thread_abort_safely_t = Struct_Unnamed284;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed285 {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
impl ::std::clone::Clone for Struct_Unnamed285 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed285 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type __Reply__thread_depress_abort_t = Struct_Unnamed285;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed286 {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub special_port: mach_msg_port_descriptor_t,
}
impl ::std::clone::Clone for Struct_Unnamed286 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed286 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type __Reply__thread_get_special_port_t = Struct_Unnamed286;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed287 {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
impl ::std::clone::Clone for Struct_Unnamed287 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed287 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type __Reply__thread_set_special_port_t = Struct_Unnamed287;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed288 {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
    pub thread_info_outCnt: mach_msg_type_number_t,
    pub thread_info_out: [integer_t; 32usize],
}
impl ::std::clone::Clone for Struct_Unnamed288 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed288 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type __Reply__thread_info_t = Struct_Unnamed288;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed289 {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
impl ::std::clone::Clone for Struct_Unnamed289 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed289 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type __Reply__thread_set_exception_ports_t = Struct_Unnamed289;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed290 {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub old_handlers: [mach_msg_port_descriptor_t; 32usize],
    pub NDR: NDR_record_t,
    pub masksCnt: mach_msg_type_number_t,
    pub masks: [exception_mask_t; 32usize],
    pub old_behaviors: [exception_behavior_t; 32usize],
    pub old_flavors: [thread_state_flavor_t; 32usize],
}
impl ::std::clone::Clone for Struct_Unnamed290 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed290 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type __Reply__thread_get_exception_ports_t = Struct_Unnamed290;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed291 {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub old_handlers: [mach_msg_port_descriptor_t; 32usize],
    pub NDR: NDR_record_t,
    pub masksCnt: mach_msg_type_number_t,
    pub masks: [exception_mask_t; 32usize],
    pub old_behaviors: [exception_behavior_t; 32usize],
    pub old_flavors: [thread_state_flavor_t; 32usize],
}
impl ::std::clone::Clone for Struct_Unnamed291 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed291 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type __Reply__thread_swap_exception_ports_t = Struct_Unnamed291;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed292 {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
impl ::std::clone::Clone for Struct_Unnamed292 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed292 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type __Reply__thread_policy_t = Struct_Unnamed292;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed293 {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
impl ::std::clone::Clone for Struct_Unnamed293 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed293 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type __Reply__thread_policy_set_t = Struct_Unnamed293;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed294 {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
    pub policy_infoCnt: mach_msg_type_number_t,
    pub policy_info: [integer_t; 16usize],
    pub get_default: boolean_t,
}
impl ::std::clone::Clone for Struct_Unnamed294 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed294 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type __Reply__thread_policy_get_t = Struct_Unnamed294;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed295 {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
impl ::std::clone::Clone for Struct_Unnamed295 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed295 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type __Reply__thread_sample_t = Struct_Unnamed295;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed296 {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
impl ::std::clone::Clone for Struct_Unnamed296 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed296 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type __Reply__etap_trace_thread_t = Struct_Unnamed296;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed297 {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
impl ::std::clone::Clone for Struct_Unnamed297 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed297 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type __Reply__thread_assign_t = Struct_Unnamed297;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed298 {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
impl ::std::clone::Clone for Struct_Unnamed298 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed298 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type __Reply__thread_assign_default_t = Struct_Unnamed298;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed299 {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub assigned_set: mach_msg_port_descriptor_t,
}
impl ::std::clone::Clone for Struct_Unnamed299 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed299 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type __Reply__thread_get_assignment_t = Struct_Unnamed299;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed300 {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
impl ::std::clone::Clone for Struct_Unnamed300 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed300 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type __Reply__thread_set_policy_t = Struct_Unnamed300;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed301 {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub voucher: mach_msg_port_descriptor_t,
}
impl ::std::clone::Clone for Struct_Unnamed301 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed301 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type __Reply__thread_get_mach_voucher_t = Struct_Unnamed301;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed302 {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
impl ::std::clone::Clone for Struct_Unnamed302 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed302 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type __Reply__thread_set_mach_voucher_t = Struct_Unnamed302;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed303 {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub old_voucher: mach_msg_port_descriptor_t,
}
impl ::std::clone::Clone for Struct_Unnamed303 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed303 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type __Reply__thread_swap_mach_voucher_t = Struct_Unnamed303;
#[repr(C)]
#[derive(Copy)]
pub struct Union___ReplyUnion__thread_act_subsystem {
    pub _bindgen_data_: [u32; 234usize],
}
impl Union___ReplyUnion__thread_act_subsystem {
    pub unsafe fn Reply_thread_terminate(&mut self)
     -> *mut __Reply__thread_terminate_t {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn Reply_act_get_state(&mut self)
     -> *mut __Reply__act_get_state_t {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn Reply_act_set_state(&mut self)
     -> *mut __Reply__act_set_state_t {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn Reply_thread_get_state(&mut self)
     -> *mut __Reply__thread_get_state_t {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn Reply_thread_set_state(&mut self)
     -> *mut __Reply__thread_set_state_t {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn Reply_thread_suspend(&mut self)
     -> *mut __Reply__thread_suspend_t {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn Reply_thread_resume(&mut self)
     -> *mut __Reply__thread_resume_t {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn Reply_thread_abort(&mut self)
     -> *mut __Reply__thread_abort_t {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn Reply_thread_abort_safely(&mut self)
     -> *mut __Reply__thread_abort_safely_t {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn Reply_thread_depress_abort(&mut self)
     -> *mut __Reply__thread_depress_abort_t {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn Reply_thread_get_special_port(&mut self)
     -> *mut __Reply__thread_get_special_port_t {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn Reply_thread_set_special_port(&mut self)
     -> *mut __Reply__thread_set_special_port_t {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn Reply_thread_info(&mut self)
     -> *mut __Reply__thread_info_t {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn Reply_thread_set_exception_ports(&mut self)
     -> *mut __Reply__thread_set_exception_ports_t {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn Reply_thread_get_exception_ports(&mut self)
     -> *mut __Reply__thread_get_exception_ports_t {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn Reply_thread_swap_exception_ports(&mut self)
     -> *mut __Reply__thread_swap_exception_ports_t {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn Reply_thread_policy(&mut self)
     -> *mut __Reply__thread_policy_t {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn Reply_thread_policy_set(&mut self)
     -> *mut __Reply__thread_policy_set_t {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn Reply_thread_policy_get(&mut self)
     -> *mut __Reply__thread_policy_get_t {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn Reply_thread_sample(&mut self)
     -> *mut __Reply__thread_sample_t {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn Reply_etap_trace_thread(&mut self)
     -> *mut __Reply__etap_trace_thread_t {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn Reply_thread_assign(&mut self)
     -> *mut __Reply__thread_assign_t {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn Reply_thread_assign_default(&mut self)
     -> *mut __Reply__thread_assign_default_t {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn Reply_thread_get_assignment(&mut self)
     -> *mut __Reply__thread_get_assignment_t {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn Reply_thread_set_policy(&mut self)
     -> *mut __Reply__thread_set_policy_t {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn Reply_thread_get_mach_voucher(&mut self)
     -> *mut __Reply__thread_get_mach_voucher_t {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn Reply_thread_set_mach_voucher(&mut self)
     -> *mut __Reply__thread_set_mach_voucher_t {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn Reply_thread_swap_mach_voucher(&mut self)
     -> *mut __Reply__thread_swap_mach_voucher_t {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
}
impl ::std::clone::Clone for Union___ReplyUnion__thread_act_subsystem {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Union___ReplyUnion__thread_act_subsystem {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed304 {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub address: vm_address_t,
    pub flavor: vm_region_flavor_t,
    pub infoCnt: mach_msg_type_number_t,
}
impl ::std::clone::Clone for Struct_Unnamed304 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed304 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type __Request__vm_region_t = Struct_Unnamed304;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed305 {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub address: vm_address_t,
    pub size: vm_size_t,
    pub flags: ::std::os::raw::c_int,
}
impl ::std::clone::Clone for Struct_Unnamed305 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed305 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type __Request__vm_allocate_t = Struct_Unnamed305;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed306 {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub address: vm_address_t,
    pub size: vm_size_t,
}
impl ::std::clone::Clone for Struct_Unnamed306 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed306 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type __Request__vm_deallocate_t = Struct_Unnamed306;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed307 {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub address: vm_address_t,
    pub size: vm_size_t,
    pub set_maximum: boolean_t,
    pub new_protection: vm_prot_t,
}
impl ::std::clone::Clone for Struct_Unnamed307 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed307 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type __Request__vm_protect_t = Struct_Unnamed307;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed308 {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub address: vm_address_t,
    pub size: vm_size_t,
    pub new_inheritance: vm_inherit_t,
}
impl ::std::clone::Clone for Struct_Unnamed308 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed308 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type __Request__vm_inherit_t = Struct_Unnamed308;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed309 {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub address: vm_address_t,
    pub size: vm_size_t,
}
impl ::std::clone::Clone for Struct_Unnamed309 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed309 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type __Request__vm_read_t = Struct_Unnamed309;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed310 {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub data_list: vm_read_entry_t,
    pub count: natural_t,
}
impl ::std::clone::Clone for Struct_Unnamed310 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed310 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type __Request__vm_read_list_t = Struct_Unnamed310;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed311 {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub data: mach_msg_ool_descriptor_t,
    pub NDR: NDR_record_t,
    pub address: vm_address_t,
    pub dataCnt: mach_msg_type_number_t,
}
impl ::std::clone::Clone for Struct_Unnamed311 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed311 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type __Request__vm_write_t = Struct_Unnamed311;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed312 {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub source_address: vm_address_t,
    pub size: vm_size_t,
    pub dest_address: vm_address_t,
}
impl ::std::clone::Clone for Struct_Unnamed312 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed312 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type __Request__vm_copy_t = Struct_Unnamed312;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed313 {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub address: vm_address_t,
    pub size: vm_size_t,
    pub data: vm_address_t,
}
impl ::std::clone::Clone for Struct_Unnamed313 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed313 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type __Request__vm_read_overwrite_t = Struct_Unnamed313;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed314 {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub address: vm_address_t,
    pub size: vm_size_t,
    pub sync_flags: vm_sync_t,
}
impl ::std::clone::Clone for Struct_Unnamed314 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed314 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type __Request__vm_msync_t = Struct_Unnamed314;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed315 {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub address: vm_address_t,
    pub size: vm_size_t,
    pub new_behavior: vm_behavior_t,
}
impl ::std::clone::Clone for Struct_Unnamed315 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed315 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type __Request__vm_behavior_set_t = Struct_Unnamed315;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed316 {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub object: mach_msg_port_descriptor_t,
    pub NDR: NDR_record_t,
    pub address: vm_address_t,
    pub size: vm_size_t,
    pub mask: vm_address_t,
    pub flags: ::std::os::raw::c_int,
    pub offset: vm_offset_t,
    pub copy: boolean_t,
    pub cur_protection: vm_prot_t,
    pub max_protection: vm_prot_t,
    pub inheritance: vm_inherit_t,
}
impl ::std::clone::Clone for Struct_Unnamed316 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed316 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type __Request__vm_map_t = Struct_Unnamed316;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed317 {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub address: vm_address_t,
    pub size: vm_size_t,
    pub attribute: vm_machine_attribute_t,
    pub value: vm_machine_attribute_val_t,
}
impl ::std::clone::Clone for Struct_Unnamed317 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed317 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type __Request__vm_machine_attribute_t = Struct_Unnamed317;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed318 {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub src_task: mach_msg_port_descriptor_t,
    pub NDR: NDR_record_t,
    pub target_address: vm_address_t,
    pub size: vm_size_t,
    pub mask: vm_address_t,
    pub flags: ::std::os::raw::c_int,
    pub src_address: vm_address_t,
    pub copy: boolean_t,
    pub inheritance: vm_inherit_t,
}
impl ::std::clone::Clone for Struct_Unnamed318 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed318 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type __Request__vm_remap_t = Struct_Unnamed318;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed319 {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub must_wire: boolean_t,
}
impl ::std::clone::Clone for Struct_Unnamed319 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed319 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type __Request__task_wire_t = Struct_Unnamed319;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed320 {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub parent_entry: mach_msg_port_descriptor_t,
    pub NDR: NDR_record_t,
    pub size: vm_size_t,
    pub offset: vm_offset_t,
    pub permission: vm_prot_t,
}
impl ::std::clone::Clone for Struct_Unnamed320 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed320 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type __Request__mach_make_memory_entry_t = Struct_Unnamed320;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed321 {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub offset: vm_offset_t,
}
impl ::std::clone::Clone for Struct_Unnamed321 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed321 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type __Request__vm_map_page_query_t = Struct_Unnamed321;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed322 {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub address: vm_address_t,
}
impl ::std::clone::Clone for Struct_Unnamed322 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed322 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type __Request__mach_vm_region_info_t = Struct_Unnamed322;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed323 {
    pub Head: mach_msg_header_t,
}
impl ::std::clone::Clone for Struct_Unnamed323 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed323 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type __Request__vm_mapped_pages_info_t = Struct_Unnamed323;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed324 {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub address: vm_address_t,
    pub nesting_depth: natural_t,
    pub infoCnt: mach_msg_type_number_t,
}
impl ::std::clone::Clone for Struct_Unnamed324 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed324 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type __Request__vm_region_recurse_t = Struct_Unnamed324;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed325 {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub address: vm_address_t,
    pub nesting_depth: natural_t,
    pub infoCnt: mach_msg_type_number_t,
}
impl ::std::clone::Clone for Struct_Unnamed325 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed325 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type __Request__vm_region_recurse_64_t = Struct_Unnamed325;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed326 {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub address: vm_address_t,
}
impl ::std::clone::Clone for Struct_Unnamed326 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed326 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type __Request__mach_vm_region_info_64_t = Struct_Unnamed326;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed327 {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub address: vm_address_t,
    pub flavor: vm_region_flavor_t,
    pub infoCnt: mach_msg_type_number_t,
}
impl ::std::clone::Clone for Struct_Unnamed327 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed327 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type __Request__vm_region_64_t = Struct_Unnamed327;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed328 {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub parent_entry: mach_msg_port_descriptor_t,
    pub NDR: NDR_record_t,
    pub size: memory_object_size_t,
    pub offset: memory_object_offset_t,
    pub permission: vm_prot_t,
}
impl ::std::clone::Clone for Struct_Unnamed328 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed328 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type __Request__mach_make_memory_entry_64_t = Struct_Unnamed328;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed329 {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub object: mach_msg_port_descriptor_t,
    pub NDR: NDR_record_t,
    pub address: vm_address_t,
    pub size: vm_size_t,
    pub mask: vm_address_t,
    pub flags: ::std::os::raw::c_int,
    pub offset: memory_object_offset_t,
    pub copy: boolean_t,
    pub cur_protection: vm_prot_t,
    pub max_protection: vm_prot_t,
    pub inheritance: vm_inherit_t,
}
impl ::std::clone::Clone for Struct_Unnamed329 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed329 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type __Request__vm_map_64_t = Struct_Unnamed329;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed330 {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub address: vm_address_t,
    pub control: vm_purgable_t,
    pub state: ::std::os::raw::c_int,
}
impl ::std::clone::Clone for Struct_Unnamed330 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed330 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type __Request__vm_purgable_control_t = Struct_Unnamed330;
#[repr(C)]
#[derive(Copy)]
pub struct Union___RequestUnion__vm_map_subsystem {
    pub _bindgen_data_: [u32; 1033usize],
}
impl Union___RequestUnion__vm_map_subsystem {
    pub unsafe fn Request_vm_region(&mut self)
     -> *mut __Request__vm_region_t {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn Request_vm_allocate(&mut self)
     -> *mut __Request__vm_allocate_t {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn Request_vm_deallocate(&mut self)
     -> *mut __Request__vm_deallocate_t {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn Request_vm_protect(&mut self)
     -> *mut __Request__vm_protect_t {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn Request_vm_inherit(&mut self)
     -> *mut __Request__vm_inherit_t {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn Request_vm_read(&mut self) -> *mut __Request__vm_read_t {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn Request_vm_read_list(&mut self)
     -> *mut __Request__vm_read_list_t {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn Request_vm_write(&mut self) -> *mut __Request__vm_write_t {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn Request_vm_copy(&mut self) -> *mut __Request__vm_copy_t {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn Request_vm_read_overwrite(&mut self)
     -> *mut __Request__vm_read_overwrite_t {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn Request_vm_msync(&mut self) -> *mut __Request__vm_msync_t {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn Request_vm_behavior_set(&mut self)
     -> *mut __Request__vm_behavior_set_t {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn Request_vm_map(&mut self) -> *mut __Request__vm_map_t {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn Request_vm_machine_attribute(&mut self)
     -> *mut __Request__vm_machine_attribute_t {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn Request_vm_remap(&mut self) -> *mut __Request__vm_remap_t {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn Request_task_wire(&mut self)
     -> *mut __Request__task_wire_t {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn Request_mach_make_memory_entry(&mut self)
     -> *mut __Request__mach_make_memory_entry_t {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn Request_vm_map_page_query(&mut self)
     -> *mut __Request__vm_map_page_query_t {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn Request_mach_vm_region_info(&mut self)
     -> *mut __Request__mach_vm_region_info_t {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn Request_vm_mapped_pages_info(&mut self)
     -> *mut __Request__vm_mapped_pages_info_t {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn Request_vm_region_recurse(&mut self)
     -> *mut __Request__vm_region_recurse_t {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn Request_vm_region_recurse_64(&mut self)
     -> *mut __Request__vm_region_recurse_64_t {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn Request_mach_vm_region_info_64(&mut self)
     -> *mut __Request__mach_vm_region_info_64_t {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn Request_vm_region_64(&mut self)
     -> *mut __Request__vm_region_64_t {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn Request_mach_make_memory_entry_64(&mut self)
     -> *mut __Request__mach_make_memory_entry_64_t {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn Request_vm_map_64(&mut self)
     -> *mut __Request__vm_map_64_t {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn Request_vm_purgable_control(&mut self)
     -> *mut __Request__vm_purgable_control_t {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
}
impl ::std::clone::Clone for Union___RequestUnion__vm_map_subsystem {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Union___RequestUnion__vm_map_subsystem {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed331 {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub object_name: mach_msg_port_descriptor_t,
    pub NDR: NDR_record_t,
    pub address: vm_address_t,
    pub size: vm_size_t,
    pub infoCnt: mach_msg_type_number_t,
    pub info: [::std::os::raw::c_int; 10usize],
}
impl ::std::clone::Clone for Struct_Unnamed331 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed331 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type __Reply__vm_region_t = Struct_Unnamed331;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed332 {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
    pub address: vm_address_t,
}
impl ::std::clone::Clone for Struct_Unnamed332 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed332 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type __Reply__vm_allocate_t = Struct_Unnamed332;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed333 {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
impl ::std::clone::Clone for Struct_Unnamed333 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed333 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type __Reply__vm_deallocate_t = Struct_Unnamed333;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed334 {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
impl ::std::clone::Clone for Struct_Unnamed334 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed334 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type __Reply__vm_protect_t = Struct_Unnamed334;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed335 {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
impl ::std::clone::Clone for Struct_Unnamed335 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed335 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type __Reply__vm_inherit_t = Struct_Unnamed335;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed336 {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub data: mach_msg_ool_descriptor_t,
    pub NDR: NDR_record_t,
    pub dataCnt: mach_msg_type_number_t,
}
impl ::std::clone::Clone for Struct_Unnamed336 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed336 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type __Reply__vm_read_t = Struct_Unnamed336;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed337 {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
    pub data_list: vm_read_entry_t,
}
impl ::std::clone::Clone for Struct_Unnamed337 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed337 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type __Reply__vm_read_list_t = Struct_Unnamed337;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed338 {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
impl ::std::clone::Clone for Struct_Unnamed338 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed338 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type __Reply__vm_write_t = Struct_Unnamed338;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed339 {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
impl ::std::clone::Clone for Struct_Unnamed339 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed339 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type __Reply__vm_copy_t = Struct_Unnamed339;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed340 {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
    pub outsize: vm_size_t,
}
impl ::std::clone::Clone for Struct_Unnamed340 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed340 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type __Reply__vm_read_overwrite_t = Struct_Unnamed340;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed341 {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
impl ::std::clone::Clone for Struct_Unnamed341 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed341 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type __Reply__vm_msync_t = Struct_Unnamed341;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed342 {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
impl ::std::clone::Clone for Struct_Unnamed342 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed342 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type __Reply__vm_behavior_set_t = Struct_Unnamed342;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed343 {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
    pub address: vm_address_t,
}
impl ::std::clone::Clone for Struct_Unnamed343 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed343 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type __Reply__vm_map_t = Struct_Unnamed343;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed344 {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
    pub value: vm_machine_attribute_val_t,
}
impl ::std::clone::Clone for Struct_Unnamed344 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed344 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type __Reply__vm_machine_attribute_t = Struct_Unnamed344;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed345 {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
    pub target_address: vm_address_t,
    pub cur_protection: vm_prot_t,
    pub max_protection: vm_prot_t,
}
impl ::std::clone::Clone for Struct_Unnamed345 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed345 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type __Reply__vm_remap_t = Struct_Unnamed345;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed346 {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
impl ::std::clone::Clone for Struct_Unnamed346 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed346 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type __Reply__task_wire_t = Struct_Unnamed346;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed347 {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub object_handle: mach_msg_port_descriptor_t,
    pub NDR: NDR_record_t,
    pub size: vm_size_t,
}
impl ::std::clone::Clone for Struct_Unnamed347 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed347 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type __Reply__mach_make_memory_entry_t = Struct_Unnamed347;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed348 {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
    pub disposition: integer_t,
    pub ref_count: integer_t,
}
impl ::std::clone::Clone for Struct_Unnamed348 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed348 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type __Reply__vm_map_page_query_t = Struct_Unnamed348;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed349 {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub objects: mach_msg_ool_descriptor_t,
    pub NDR: NDR_record_t,
    pub region: vm_info_region_t,
    pub objectsCnt: mach_msg_type_number_t,
}
impl ::std::clone::Clone for Struct_Unnamed349 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed349 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type __Reply__mach_vm_region_info_t = Struct_Unnamed349;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed350 {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub pages: mach_msg_ool_descriptor_t,
    pub NDR: NDR_record_t,
    pub pagesCnt: mach_msg_type_number_t,
}
impl ::std::clone::Clone for Struct_Unnamed350 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed350 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type __Reply__vm_mapped_pages_info_t = Struct_Unnamed350;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed351 {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
    pub address: vm_address_t,
    pub size: vm_size_t,
    pub nesting_depth: natural_t,
    pub infoCnt: mach_msg_type_number_t,
    pub info: [::std::os::raw::c_int; 19usize],
}
impl ::std::clone::Clone for Struct_Unnamed351 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed351 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type __Reply__vm_region_recurse_t = Struct_Unnamed351;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed352 {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
    pub address: vm_address_t,
    pub size: vm_size_t,
    pub nesting_depth: natural_t,
    pub infoCnt: mach_msg_type_number_t,
    pub info: [::std::os::raw::c_int; 19usize],
}
impl ::std::clone::Clone for Struct_Unnamed352 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed352 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type __Reply__vm_region_recurse_64_t = Struct_Unnamed352;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed353 {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub objects: mach_msg_ool_descriptor_t,
    pub NDR: NDR_record_t,
    pub region: vm_info_region_64_t,
    pub objectsCnt: mach_msg_type_number_t,
}
impl ::std::clone::Clone for Struct_Unnamed353 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed353 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type __Reply__mach_vm_region_info_64_t = Struct_Unnamed353;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed354 {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub object_name: mach_msg_port_descriptor_t,
    pub NDR: NDR_record_t,
    pub address: vm_address_t,
    pub size: vm_size_t,
    pub infoCnt: mach_msg_type_number_t,
    pub info: [::std::os::raw::c_int; 10usize],
}
impl ::std::clone::Clone for Struct_Unnamed354 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed354 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type __Reply__vm_region_64_t = Struct_Unnamed354;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed355 {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub object_handle: mach_msg_port_descriptor_t,
    pub NDR: NDR_record_t,
    pub size: memory_object_size_t,
}
impl ::std::clone::Clone for Struct_Unnamed355 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed355 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type __Reply__mach_make_memory_entry_64_t = Struct_Unnamed355;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed356 {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
    pub address: vm_address_t,
}
impl ::std::clone::Clone for Struct_Unnamed356 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed356 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type __Reply__vm_map_64_t = Struct_Unnamed356;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed357 {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
    pub state: ::std::os::raw::c_int,
}
impl ::std::clone::Clone for Struct_Unnamed357 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed357 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type __Reply__vm_purgable_control_t = Struct_Unnamed357;
#[repr(C)]
#[derive(Copy)]
pub struct Union___ReplyUnion__vm_map_subsystem {
    pub _bindgen_data_: [u32; 1033usize],
}
impl Union___ReplyUnion__vm_map_subsystem {
    pub unsafe fn Reply_vm_region(&mut self) -> *mut __Reply__vm_region_t {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn Reply_vm_allocate(&mut self)
     -> *mut __Reply__vm_allocate_t {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn Reply_vm_deallocate(&mut self)
     -> *mut __Reply__vm_deallocate_t {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn Reply_vm_protect(&mut self) -> *mut __Reply__vm_protect_t {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn Reply_vm_inherit(&mut self) -> *mut __Reply__vm_inherit_t {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn Reply_vm_read(&mut self) -> *mut __Reply__vm_read_t {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn Reply_vm_read_list(&mut self)
     -> *mut __Reply__vm_read_list_t {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn Reply_vm_write(&mut self) -> *mut __Reply__vm_write_t {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn Reply_vm_copy(&mut self) -> *mut __Reply__vm_copy_t {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn Reply_vm_read_overwrite(&mut self)
     -> *mut __Reply__vm_read_overwrite_t {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn Reply_vm_msync(&mut self) -> *mut __Reply__vm_msync_t {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn Reply_vm_behavior_set(&mut self)
     -> *mut __Reply__vm_behavior_set_t {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn Reply_vm_map(&mut self) -> *mut __Reply__vm_map_t {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn Reply_vm_machine_attribute(&mut self)
     -> *mut __Reply__vm_machine_attribute_t {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn Reply_vm_remap(&mut self) -> *mut __Reply__vm_remap_t {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn Reply_task_wire(&mut self) -> *mut __Reply__task_wire_t {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn Reply_mach_make_memory_entry(&mut self)
     -> *mut __Reply__mach_make_memory_entry_t {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn Reply_vm_map_page_query(&mut self)
     -> *mut __Reply__vm_map_page_query_t {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn Reply_mach_vm_region_info(&mut self)
     -> *mut __Reply__mach_vm_region_info_t {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn Reply_vm_mapped_pages_info(&mut self)
     -> *mut __Reply__vm_mapped_pages_info_t {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn Reply_vm_region_recurse(&mut self)
     -> *mut __Reply__vm_region_recurse_t {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn Reply_vm_region_recurse_64(&mut self)
     -> *mut __Reply__vm_region_recurse_64_t {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn Reply_mach_vm_region_info_64(&mut self)
     -> *mut __Reply__mach_vm_region_info_64_t {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn Reply_vm_region_64(&mut self)
     -> *mut __Reply__vm_region_64_t {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn Reply_mach_make_memory_entry_64(&mut self)
     -> *mut __Reply__mach_make_memory_entry_64_t {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn Reply_vm_map_64(&mut self) -> *mut __Reply__vm_map_64_t {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn Reply_vm_purgable_control(&mut self)
     -> *mut __Reply__vm_purgable_control_t {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
}
impl ::std::clone::Clone for Union___ReplyUnion__vm_map_subsystem {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Union___ReplyUnion__vm_map_subsystem {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed358 {
    pub Head: mach_msg_header_t,
}
impl ::std::clone::Clone for Struct_Unnamed358 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed358 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type __Request__mach_port_names_t = Struct_Unnamed358;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed359 {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub name: mach_port_name_t,
}
impl ::std::clone::Clone for Struct_Unnamed359 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed359 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type __Request__mach_port_type_t = Struct_Unnamed359;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed360 {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub old_name: mach_port_name_t,
    pub new_name: mach_port_name_t,
}
impl ::std::clone::Clone for Struct_Unnamed360 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed360 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type __Request__mach_port_rename_t = Struct_Unnamed360;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed361 {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub right: mach_port_right_t,
    pub name: mach_port_name_t,
}
impl ::std::clone::Clone for Struct_Unnamed361 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed361 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type __Request__mach_port_allocate_name_t = Struct_Unnamed361;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed362 {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub right: mach_port_right_t,
}
impl ::std::clone::Clone for Struct_Unnamed362 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed362 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type __Request__mach_port_allocate_t = Struct_Unnamed362;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed363 {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub name: mach_port_name_t,
}
impl ::std::clone::Clone for Struct_Unnamed363 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed363 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type __Request__mach_port_destroy_t = Struct_Unnamed363;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed364 {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub name: mach_port_name_t,
}
impl ::std::clone::Clone for Struct_Unnamed364 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed364 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type __Request__mach_port_deallocate_t = Struct_Unnamed364;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed365 {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub name: mach_port_name_t,
    pub right: mach_port_right_t,
}
impl ::std::clone::Clone for Struct_Unnamed365 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed365 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type __Request__mach_port_get_refs_t = Struct_Unnamed365;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed366 {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub name: mach_port_name_t,
    pub right: mach_port_right_t,
    pub delta: mach_port_delta_t,
}
impl ::std::clone::Clone for Struct_Unnamed366 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed366 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type __Request__mach_port_mod_refs_t = Struct_Unnamed366;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed367 {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub name: mach_port_name_t,
    pub trailer_type: mach_msg_trailer_type_t,
    pub request_seqnop: mach_port_seqno_t,
    pub trailer_infopCnt: mach_msg_type_number_t,
}
impl ::std::clone::Clone for Struct_Unnamed367 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed367 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type __Request__mach_port_peek_t = Struct_Unnamed367;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed368 {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub name: mach_port_name_t,
    pub mscount: mach_port_mscount_t,
}
impl ::std::clone::Clone for Struct_Unnamed368 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed368 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type __Request__mach_port_set_mscount_t = Struct_Unnamed368;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed369 {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub name: mach_port_name_t,
}
impl ::std::clone::Clone for Struct_Unnamed369 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed369 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type __Request__mach_port_get_set_status_t = Struct_Unnamed369;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed370 {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub member: mach_port_name_t,
    pub after: mach_port_name_t,
}
impl ::std::clone::Clone for Struct_Unnamed370 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed370 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type __Request__mach_port_move_member_t = Struct_Unnamed370;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed371 {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub notify: mach_msg_port_descriptor_t,
    pub NDR: NDR_record_t,
    pub name: mach_port_name_t,
    pub msgid: mach_msg_id_t,
    pub sync: mach_port_mscount_t,
}
impl ::std::clone::Clone for Struct_Unnamed371 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed371 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type __Request__mach_port_request_notification_t = Struct_Unnamed371;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed372 {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub poly: mach_msg_port_descriptor_t,
    pub NDR: NDR_record_t,
    pub name: mach_port_name_t,
}
impl ::std::clone::Clone for Struct_Unnamed372 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed372 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type __Request__mach_port_insert_right_t = Struct_Unnamed372;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed373 {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub name: mach_port_name_t,
    pub msgt_name: mach_msg_type_name_t,
}
impl ::std::clone::Clone for Struct_Unnamed373 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed373 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type __Request__mach_port_extract_right_t = Struct_Unnamed373;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed374 {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub name: mach_port_name_t,
    pub seqno: mach_port_seqno_t,
}
impl ::std::clone::Clone for Struct_Unnamed374 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed374 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type __Request__mach_port_set_seqno_t = Struct_Unnamed374;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed375 {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub name: mach_port_name_t,
    pub flavor: mach_port_flavor_t,
    pub port_info_outCnt: mach_msg_type_number_t,
}
impl ::std::clone::Clone for Struct_Unnamed375 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed375 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type __Request__mach_port_get_attributes_t = Struct_Unnamed375;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed376 {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub name: mach_port_name_t,
    pub flavor: mach_port_flavor_t,
    pub port_infoCnt: mach_msg_type_number_t,
    pub port_info: [integer_t; 17usize],
}
impl ::std::clone::Clone for Struct_Unnamed376 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed376 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type __Request__mach_port_set_attributes_t = Struct_Unnamed376;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed377 {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub right: mach_port_right_t,
    pub qos: mach_port_qos_t,
}
impl ::std::clone::Clone for Struct_Unnamed377 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed377 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type __Request__mach_port_allocate_qos_t = Struct_Unnamed377;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed378 {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub proto: mach_msg_port_descriptor_t,
    pub NDR: NDR_record_t,
    pub right: mach_port_right_t,
    pub qos: mach_port_qos_t,
    pub name: mach_port_name_t,
}
impl ::std::clone::Clone for Struct_Unnamed378 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed378 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type __Request__mach_port_allocate_full_t = Struct_Unnamed378;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed379 {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub table_entries: ::std::os::raw::c_int,
}
impl ::std::clone::Clone for Struct_Unnamed379 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed379 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type __Request__task_set_port_space_t = Struct_Unnamed379;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed380 {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub name: mach_port_name_t,
}
impl ::std::clone::Clone for Struct_Unnamed380 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed380 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type __Request__mach_port_get_srights_t = Struct_Unnamed380;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed381 {
    pub Head: mach_msg_header_t,
}
impl ::std::clone::Clone for Struct_Unnamed381 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed381 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type __Request__mach_port_space_info_t = Struct_Unnamed381;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed382 {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub name: mach_port_name_t,
}
impl ::std::clone::Clone for Struct_Unnamed382 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed382 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type __Request__mach_port_dnrequest_info_t = Struct_Unnamed382;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed383 {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub name: mach_port_name_t,
}
impl ::std::clone::Clone for Struct_Unnamed383 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed383 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type __Request__mach_port_kernel_object_t = Struct_Unnamed383;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed384 {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub name: mach_port_name_t,
    pub pset: mach_port_name_t,
}
impl ::std::clone::Clone for Struct_Unnamed384 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed384 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type __Request__mach_port_insert_member_t = Struct_Unnamed384;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed385 {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub name: mach_port_name_t,
    pub pset: mach_port_name_t,
}
impl ::std::clone::Clone for Struct_Unnamed385 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed385 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type __Request__mach_port_extract_member_t = Struct_Unnamed385;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed386 {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub name: mach_port_name_t,
}
impl ::std::clone::Clone for Struct_Unnamed386 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed386 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type __Request__mach_port_get_context_t = Struct_Unnamed386;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed387 {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub name: mach_port_name_t,
    pub context: mach_port_context_t,
}
impl ::std::clone::Clone for Struct_Unnamed387 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed387 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type __Request__mach_port_set_context_t = Struct_Unnamed387;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed388 {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub name: mach_port_name_t,
}
impl ::std::clone::Clone for Struct_Unnamed388 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed388 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type __Request__mach_port_kobject_t = Struct_Unnamed388;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed389 {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub options: mach_msg_ool_descriptor_t,
    pub NDR: NDR_record_t,
    pub context: mach_port_context_t,
}
impl ::std::clone::Clone for Struct_Unnamed389 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed389 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type __Request__mach_port_construct_t = Struct_Unnamed389;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed390 {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub name: mach_port_name_t,
    pub srdelta: mach_port_delta_t,
    pub guard: mach_port_context_t,
}
impl ::std::clone::Clone for Struct_Unnamed390 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed390 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type __Request__mach_port_destruct_t = Struct_Unnamed390;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed391 {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub name: mach_port_name_t,
    pub guard: mach_port_context_t,
    pub strict: boolean_t,
}
impl ::std::clone::Clone for Struct_Unnamed391 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed391 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type __Request__mach_port_guard_t = Struct_Unnamed391;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed392 {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub name: mach_port_name_t,
    pub guard: mach_port_context_t,
}
impl ::std::clone::Clone for Struct_Unnamed392 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed392 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type __Request__mach_port_unguard_t = Struct_Unnamed392;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed393 {
    pub Head: mach_msg_header_t,
}
impl ::std::clone::Clone for Struct_Unnamed393 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed393 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type __Request__mach_port_space_basic_info_t = Struct_Unnamed393;
#[repr(C)]
#[derive(Copy)]
pub struct Union___RequestUnion__mach_port_subsystem {
    pub _bindgen_data_: [u32; 28usize],
}
impl Union___RequestUnion__mach_port_subsystem {
    pub unsafe fn Request_mach_port_names(&mut self)
     -> *mut __Request__mach_port_names_t {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn Request_mach_port_type(&mut self)
     -> *mut __Request__mach_port_type_t {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn Request_mach_port_rename(&mut self)
     -> *mut __Request__mach_port_rename_t {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn Request_mach_port_allocate_name(&mut self)
     -> *mut __Request__mach_port_allocate_name_t {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn Request_mach_port_allocate(&mut self)
     -> *mut __Request__mach_port_allocate_t {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn Request_mach_port_destroy(&mut self)
     -> *mut __Request__mach_port_destroy_t {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn Request_mach_port_deallocate(&mut self)
     -> *mut __Request__mach_port_deallocate_t {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn Request_mach_port_get_refs(&mut self)
     -> *mut __Request__mach_port_get_refs_t {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn Request_mach_port_mod_refs(&mut self)
     -> *mut __Request__mach_port_mod_refs_t {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn Request_mach_port_peek(&mut self)
     -> *mut __Request__mach_port_peek_t {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn Request_mach_port_set_mscount(&mut self)
     -> *mut __Request__mach_port_set_mscount_t {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn Request_mach_port_get_set_status(&mut self)
     -> *mut __Request__mach_port_get_set_status_t {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn Request_mach_port_move_member(&mut self)
     -> *mut __Request__mach_port_move_member_t {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn Request_mach_port_request_notification(&mut self)
     -> *mut __Request__mach_port_request_notification_t {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn Request_mach_port_insert_right(&mut self)
     -> *mut __Request__mach_port_insert_right_t {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn Request_mach_port_extract_right(&mut self)
     -> *mut __Request__mach_port_extract_right_t {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn Request_mach_port_set_seqno(&mut self)
     -> *mut __Request__mach_port_set_seqno_t {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn Request_mach_port_get_attributes(&mut self)
     -> *mut __Request__mach_port_get_attributes_t {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn Request_mach_port_set_attributes(&mut self)
     -> *mut __Request__mach_port_set_attributes_t {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn Request_mach_port_allocate_qos(&mut self)
     -> *mut __Request__mach_port_allocate_qos_t {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn Request_mach_port_allocate_full(&mut self)
     -> *mut __Request__mach_port_allocate_full_t {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn Request_task_set_port_space(&mut self)
     -> *mut __Request__task_set_port_space_t {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn Request_mach_port_get_srights(&mut self)
     -> *mut __Request__mach_port_get_srights_t {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn Request_mach_port_space_info(&mut self)
     -> *mut __Request__mach_port_space_info_t {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn Request_mach_port_dnrequest_info(&mut self)
     -> *mut __Request__mach_port_dnrequest_info_t {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn Request_mach_port_kernel_object(&mut self)
     -> *mut __Request__mach_port_kernel_object_t {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn Request_mach_port_insert_member(&mut self)
     -> *mut __Request__mach_port_insert_member_t {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn Request_mach_port_extract_member(&mut self)
     -> *mut __Request__mach_port_extract_member_t {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn Request_mach_port_get_context(&mut self)
     -> *mut __Request__mach_port_get_context_t {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn Request_mach_port_set_context(&mut self)
     -> *mut __Request__mach_port_set_context_t {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn Request_mach_port_kobject(&mut self)
     -> *mut __Request__mach_port_kobject_t {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn Request_mach_port_construct(&mut self)
     -> *mut __Request__mach_port_construct_t {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn Request_mach_port_destruct(&mut self)
     -> *mut __Request__mach_port_destruct_t {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn Request_mach_port_guard(&mut self)
     -> *mut __Request__mach_port_guard_t {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn Request_mach_port_unguard(&mut self)
     -> *mut __Request__mach_port_unguard_t {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn Request_mach_port_space_basic_info(&mut self)
     -> *mut __Request__mach_port_space_basic_info_t {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
}
impl ::std::clone::Clone for Union___RequestUnion__mach_port_subsystem {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Union___RequestUnion__mach_port_subsystem {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed394 {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub names: mach_msg_ool_descriptor_t,
    pub types: mach_msg_ool_descriptor_t,
    pub NDR: NDR_record_t,
    pub namesCnt: mach_msg_type_number_t,
    pub typesCnt: mach_msg_type_number_t,
}
impl ::std::clone::Clone for Struct_Unnamed394 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed394 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type __Reply__mach_port_names_t = Struct_Unnamed394;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed395 {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
    pub ptype: mach_port_type_t,
}
impl ::std::clone::Clone for Struct_Unnamed395 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed395 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type __Reply__mach_port_type_t = Struct_Unnamed395;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed396 {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
impl ::std::clone::Clone for Struct_Unnamed396 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed396 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type __Reply__mach_port_rename_t = Struct_Unnamed396;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed397 {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
impl ::std::clone::Clone for Struct_Unnamed397 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed397 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type __Reply__mach_port_allocate_name_t = Struct_Unnamed397;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed398 {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
    pub name: mach_port_name_t,
}
impl ::std::clone::Clone for Struct_Unnamed398 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed398 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type __Reply__mach_port_allocate_t = Struct_Unnamed398;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed399 {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
impl ::std::clone::Clone for Struct_Unnamed399 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed399 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type __Reply__mach_port_destroy_t = Struct_Unnamed399;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed400 {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
impl ::std::clone::Clone for Struct_Unnamed400 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed400 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type __Reply__mach_port_deallocate_t = Struct_Unnamed400;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed401 {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
    pub refs: mach_port_urefs_t,
}
impl ::std::clone::Clone for Struct_Unnamed401 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed401 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type __Reply__mach_port_get_refs_t = Struct_Unnamed401;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed402 {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
impl ::std::clone::Clone for Struct_Unnamed402 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed402 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type __Reply__mach_port_mod_refs_t = Struct_Unnamed402;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed403 {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
    pub request_seqnop: mach_port_seqno_t,
    pub msg_sizep: mach_msg_size_t,
    pub msg_idp: mach_msg_id_t,
    pub trailer_infopCnt: mach_msg_type_number_t,
    pub trailer_infop: [::std::os::raw::c_char; 68usize],
}
impl ::std::clone::Clone for Struct_Unnamed403 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed403 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type __Reply__mach_port_peek_t = Struct_Unnamed403;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed404 {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
impl ::std::clone::Clone for Struct_Unnamed404 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed404 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type __Reply__mach_port_set_mscount_t = Struct_Unnamed404;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed405 {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub members: mach_msg_ool_descriptor_t,
    pub NDR: NDR_record_t,
    pub membersCnt: mach_msg_type_number_t,
}
impl ::std::clone::Clone for Struct_Unnamed405 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed405 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type __Reply__mach_port_get_set_status_t = Struct_Unnamed405;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed406 {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
impl ::std::clone::Clone for Struct_Unnamed406 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed406 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type __Reply__mach_port_move_member_t = Struct_Unnamed406;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed407 {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub previous: mach_msg_port_descriptor_t,
}
impl ::std::clone::Clone for Struct_Unnamed407 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed407 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type __Reply__mach_port_request_notification_t = Struct_Unnamed407;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed408 {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
impl ::std::clone::Clone for Struct_Unnamed408 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed408 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type __Reply__mach_port_insert_right_t = Struct_Unnamed408;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed409 {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub poly: mach_msg_port_descriptor_t,
}
impl ::std::clone::Clone for Struct_Unnamed409 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed409 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type __Reply__mach_port_extract_right_t = Struct_Unnamed409;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed410 {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
impl ::std::clone::Clone for Struct_Unnamed410 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed410 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type __Reply__mach_port_set_seqno_t = Struct_Unnamed410;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed411 {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
    pub port_info_outCnt: mach_msg_type_number_t,
    pub port_info_out: [integer_t; 17usize],
}
impl ::std::clone::Clone for Struct_Unnamed411 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed411 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type __Reply__mach_port_get_attributes_t = Struct_Unnamed411;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed412 {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
impl ::std::clone::Clone for Struct_Unnamed412 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed412 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type __Reply__mach_port_set_attributes_t = Struct_Unnamed412;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed413 {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
    pub qos: mach_port_qos_t,
    pub name: mach_port_name_t,
}
impl ::std::clone::Clone for Struct_Unnamed413 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed413 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type __Reply__mach_port_allocate_qos_t = Struct_Unnamed413;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed414 {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
    pub qos: mach_port_qos_t,
    pub name: mach_port_name_t,
}
impl ::std::clone::Clone for Struct_Unnamed414 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed414 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type __Reply__mach_port_allocate_full_t = Struct_Unnamed414;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed415 {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
impl ::std::clone::Clone for Struct_Unnamed415 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed415 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type __Reply__task_set_port_space_t = Struct_Unnamed415;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed416 {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
    pub srights: mach_port_rights_t,
}
impl ::std::clone::Clone for Struct_Unnamed416 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed416 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type __Reply__mach_port_get_srights_t = Struct_Unnamed416;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed417 {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub table_info: mach_msg_ool_descriptor_t,
    pub tree_info: mach_msg_ool_descriptor_t,
    pub NDR: NDR_record_t,
    pub space_info: ipc_info_space_t,
    pub table_infoCnt: mach_msg_type_number_t,
    pub tree_infoCnt: mach_msg_type_number_t,
}
impl ::std::clone::Clone for Struct_Unnamed417 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed417 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type __Reply__mach_port_space_info_t = Struct_Unnamed417;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed418 {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
    pub dnr_total: ::std::os::raw::c_uint,
    pub dnr_used: ::std::os::raw::c_uint,
}
impl ::std::clone::Clone for Struct_Unnamed418 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed418 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type __Reply__mach_port_dnrequest_info_t = Struct_Unnamed418;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed419 {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
    pub object_type: ::std::os::raw::c_uint,
    pub object_addr: ::std::os::raw::c_uint,
}
impl ::std::clone::Clone for Struct_Unnamed419 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed419 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type __Reply__mach_port_kernel_object_t = Struct_Unnamed419;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed420 {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
impl ::std::clone::Clone for Struct_Unnamed420 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed420 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type __Reply__mach_port_insert_member_t = Struct_Unnamed420;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed421 {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
impl ::std::clone::Clone for Struct_Unnamed421 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed421 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type __Reply__mach_port_extract_member_t = Struct_Unnamed421;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed422 {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
    pub context: mach_port_context_t,
}
impl ::std::clone::Clone for Struct_Unnamed422 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed422 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type __Reply__mach_port_get_context_t = Struct_Unnamed422;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed423 {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
impl ::std::clone::Clone for Struct_Unnamed423 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed423 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type __Reply__mach_port_set_context_t = Struct_Unnamed423;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed424 {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
    pub object_type: natural_t,
    pub object_addr: mach_vm_address_t,
}
impl ::std::clone::Clone for Struct_Unnamed424 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed424 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type __Reply__mach_port_kobject_t = Struct_Unnamed424;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed425 {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
    pub name: mach_port_name_t,
}
impl ::std::clone::Clone for Struct_Unnamed425 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed425 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type __Reply__mach_port_construct_t = Struct_Unnamed425;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed426 {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
impl ::std::clone::Clone for Struct_Unnamed426 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed426 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type __Reply__mach_port_destruct_t = Struct_Unnamed426;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed427 {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
impl ::std::clone::Clone for Struct_Unnamed427 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed427 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type __Reply__mach_port_guard_t = Struct_Unnamed427;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed428 {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
impl ::std::clone::Clone for Struct_Unnamed428 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed428 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type __Reply__mach_port_unguard_t = Struct_Unnamed428;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed429 {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
    pub basic_info: ipc_info_space_basic_t,
}
impl ::std::clone::Clone for Struct_Unnamed429 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed429 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type __Reply__mach_port_space_basic_info_t = Struct_Unnamed429;
#[repr(C)]
#[derive(Copy)]
pub struct Union___ReplyUnion__mach_port_subsystem {
    pub _bindgen_data_: [u32; 30usize],
}
impl Union___ReplyUnion__mach_port_subsystem {
    pub unsafe fn Reply_mach_port_names(&mut self)
     -> *mut __Reply__mach_port_names_t {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn Reply_mach_port_type(&mut self)
     -> *mut __Reply__mach_port_type_t {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn Reply_mach_port_rename(&mut self)
     -> *mut __Reply__mach_port_rename_t {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn Reply_mach_port_allocate_name(&mut self)
     -> *mut __Reply__mach_port_allocate_name_t {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn Reply_mach_port_allocate(&mut self)
     -> *mut __Reply__mach_port_allocate_t {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn Reply_mach_port_destroy(&mut self)
     -> *mut __Reply__mach_port_destroy_t {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn Reply_mach_port_deallocate(&mut self)
     -> *mut __Reply__mach_port_deallocate_t {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn Reply_mach_port_get_refs(&mut self)
     -> *mut __Reply__mach_port_get_refs_t {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn Reply_mach_port_mod_refs(&mut self)
     -> *mut __Reply__mach_port_mod_refs_t {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn Reply_mach_port_peek(&mut self)
     -> *mut __Reply__mach_port_peek_t {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn Reply_mach_port_set_mscount(&mut self)
     -> *mut __Reply__mach_port_set_mscount_t {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn Reply_mach_port_get_set_status(&mut self)
     -> *mut __Reply__mach_port_get_set_status_t {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn Reply_mach_port_move_member(&mut self)
     -> *mut __Reply__mach_port_move_member_t {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn Reply_mach_port_request_notification(&mut self)
     -> *mut __Reply__mach_port_request_notification_t {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn Reply_mach_port_insert_right(&mut self)
     -> *mut __Reply__mach_port_insert_right_t {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn Reply_mach_port_extract_right(&mut self)
     -> *mut __Reply__mach_port_extract_right_t {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn Reply_mach_port_set_seqno(&mut self)
     -> *mut __Reply__mach_port_set_seqno_t {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn Reply_mach_port_get_attributes(&mut self)
     -> *mut __Reply__mach_port_get_attributes_t {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn Reply_mach_port_set_attributes(&mut self)
     -> *mut __Reply__mach_port_set_attributes_t {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn Reply_mach_port_allocate_qos(&mut self)
     -> *mut __Reply__mach_port_allocate_qos_t {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn Reply_mach_port_allocate_full(&mut self)
     -> *mut __Reply__mach_port_allocate_full_t {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn Reply_task_set_port_space(&mut self)
     -> *mut __Reply__task_set_port_space_t {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn Reply_mach_port_get_srights(&mut self)
     -> *mut __Reply__mach_port_get_srights_t {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn Reply_mach_port_space_info(&mut self)
     -> *mut __Reply__mach_port_space_info_t {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn Reply_mach_port_dnrequest_info(&mut self)
     -> *mut __Reply__mach_port_dnrequest_info_t {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn Reply_mach_port_kernel_object(&mut self)
     -> *mut __Reply__mach_port_kernel_object_t {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn Reply_mach_port_insert_member(&mut self)
     -> *mut __Reply__mach_port_insert_member_t {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn Reply_mach_port_extract_member(&mut self)
     -> *mut __Reply__mach_port_extract_member_t {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn Reply_mach_port_get_context(&mut self)
     -> *mut __Reply__mach_port_get_context_t {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn Reply_mach_port_set_context(&mut self)
     -> *mut __Reply__mach_port_set_context_t {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn Reply_mach_port_kobject(&mut self)
     -> *mut __Reply__mach_port_kobject_t {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn Reply_mach_port_construct(&mut self)
     -> *mut __Reply__mach_port_construct_t {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn Reply_mach_port_destruct(&mut self)
     -> *mut __Reply__mach_port_destruct_t {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn Reply_mach_port_guard(&mut self)
     -> *mut __Reply__mach_port_guard_t {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn Reply_mach_port_unguard(&mut self)
     -> *mut __Reply__mach_port_unguard_t {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn Reply_mach_port_space_basic_info(&mut self)
     -> *mut __Reply__mach_port_space_basic_info_t {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
}
impl ::std::clone::Clone for Union___ReplyUnion__mach_port_subsystem {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Union___ReplyUnion__mach_port_subsystem {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed430 {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub flavor: host_flavor_t,
    pub host_info_outCnt: mach_msg_type_number_t,
}
impl ::std::clone::Clone for Struct_Unnamed430 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed430 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type __Request__host_info_t = Struct_Unnamed430;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed431 {
    pub Head: mach_msg_header_t,
}
impl ::std::clone::Clone for Struct_Unnamed431 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed431 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type __Request__host_kernel_version_t = Struct_Unnamed431;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed432 {
    pub Head: mach_msg_header_t,
}
impl ::std::clone::Clone for Struct_Unnamed432 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed432 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type __Request___host_page_size_t = Struct_Unnamed432;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed433 {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub pager: mach_msg_port_descriptor_t,
    pub NDR: NDR_record_t,
    pub internal: boolean_t,
    pub size: vm_size_t,
    pub permission: vm_prot_t,
}
impl ::std::clone::Clone for Struct_Unnamed433 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed433 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type __Request__mach_memory_object_memory_entry_t = Struct_Unnamed433;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed434 {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub flavor: processor_flavor_t,
}
impl ::std::clone::Clone for Struct_Unnamed434 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed434 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type __Request__host_processor_info_t = Struct_Unnamed434;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed435 {
    pub Head: mach_msg_header_t,
}
impl ::std::clone::Clone for Struct_Unnamed435 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed435 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type __Request__host_get_io_master_t = Struct_Unnamed435;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed436 {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub clock_id: clock_id_t,
}
impl ::std::clone::Clone for Struct_Unnamed436 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed436 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type __Request__host_get_clock_service_t = Struct_Unnamed436;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed437 {
    pub Head: mach_msg_header_t,
}
impl ::std::clone::Clone for Struct_Unnamed437 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed437 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type __Request__kmod_get_info_t = Struct_Unnamed437;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed438 {
    pub Head: mach_msg_header_t,
}
impl ::std::clone::Clone for Struct_Unnamed438 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed438 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type __Request__host_zone_info_t = Struct_Unnamed438;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed439 {
    pub Head: mach_msg_header_t,
}
impl ::std::clone::Clone for Struct_Unnamed439 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed439 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type __Request__host_virtual_physical_table_info_t = Struct_Unnamed439;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed440 {
    pub Head: mach_msg_header_t,
}
impl ::std::clone::Clone for Struct_Unnamed440 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed440 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type __Request__processor_set_default_t = Struct_Unnamed440;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed441 {
    pub Head: mach_msg_header_t,
}
impl ::std::clone::Clone for Struct_Unnamed441 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed441 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type __Request__processor_set_create_t = Struct_Unnamed441;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed442 {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub pager: mach_msg_port_descriptor_t,
    pub NDR: NDR_record_t,
    pub internal: boolean_t,
    pub size: memory_object_size_t,
    pub permission: vm_prot_t,
}
impl ::std::clone::Clone for Struct_Unnamed442 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed442 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type __Request__mach_memory_object_memory_entry_64_t = Struct_Unnamed442;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed443 {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub flavor: host_flavor_t,
    pub host_info_outCnt: mach_msg_type_number_t,
}
impl ::std::clone::Clone for Struct_Unnamed443 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed443 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type __Request__host_statistics_t = Struct_Unnamed443;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed444 {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub notify_port: mach_msg_port_descriptor_t,
    pub NDR: NDR_record_t,
    pub notify_type: host_flavor_t,
}
impl ::std::clone::Clone for Struct_Unnamed444 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed444 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type __Request__host_request_notification_t = Struct_Unnamed444;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed445 {
    pub Head: mach_msg_header_t,
}
impl ::std::clone::Clone for Struct_Unnamed445 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed445 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type __Request__host_lockgroup_info_t = Struct_Unnamed445;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed446 {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub flavor: host_flavor_t,
    pub host_info64_outCnt: mach_msg_type_number_t,
}
impl ::std::clone::Clone for Struct_Unnamed446 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed446 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type __Request__host_statistics64_t = Struct_Unnamed446;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed447 {
    pub Head: mach_msg_header_t,
}
impl ::std::clone::Clone for Struct_Unnamed447 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed447 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type __Request__mach_zone_info_t = Struct_Unnamed447;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed448 {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub recipesCnt: mach_msg_type_number_t,
    pub recipes: [uint8_t; 5120usize],
}
impl ::std::clone::Clone for Struct_Unnamed448 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed448 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type __Request__host_create_mach_voucher_t = Struct_Unnamed448;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed449 {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub attr_manager: mach_msg_port_descriptor_t,
    pub NDR: NDR_record_t,
    pub default_value: mach_voucher_attr_value_handle_t,
}
impl ::std::clone::Clone for Struct_Unnamed449 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed449 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type __Request__host_register_mach_voucher_attr_manager_t =
    Struct_Unnamed449;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed450 {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub attr_manager: mach_msg_port_descriptor_t,
    pub NDR: NDR_record_t,
    pub default_value: mach_voucher_attr_value_handle_t,
    pub key: mach_voucher_attr_key_t,
}
impl ::std::clone::Clone for Struct_Unnamed450 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed450 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type __Request__host_register_well_known_mach_voucher_attr_manager_t =
    Struct_Unnamed450;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed451 {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub diagnostic_flag: uint32_t,
}
impl ::std::clone::Clone for Struct_Unnamed451 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed451 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type __Request__host_set_atm_diagnostic_flag_t = Struct_Unnamed451;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed452 {
    pub Head: mach_msg_header_t,
}
impl ::std::clone::Clone for Struct_Unnamed452 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed452 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type __Request__host_get_atm_diagnostic_flag_t = Struct_Unnamed452;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed453 {
    pub Head: mach_msg_header_t,
}
impl ::std::clone::Clone for Struct_Unnamed453 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed453 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type __Request__mach_memory_info_t = Struct_Unnamed453;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed454 {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub multiuser_flags: uint32_t,
}
impl ::std::clone::Clone for Struct_Unnamed454 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed454 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type __Request__host_set_multiuser_config_flags_t = Struct_Unnamed454;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed455 {
    pub Head: mach_msg_header_t,
}
impl ::std::clone::Clone for Struct_Unnamed455 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed455 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type __Request__host_get_multiuser_config_flags_t = Struct_Unnamed455;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed456 {
    pub Head: mach_msg_header_t,
}
impl ::std::clone::Clone for Struct_Unnamed456 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed456 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type __Request__host_check_multiuser_mode_t = Struct_Unnamed456;
#[repr(C)]
#[derive(Copy)]
pub struct Union___RequestUnion__mach_host_subsystem {
    pub _bindgen_data_: [u32; 1289usize],
}
impl Union___RequestUnion__mach_host_subsystem {
    pub unsafe fn Request_host_info(&mut self)
     -> *mut __Request__host_info_t {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn Request_host_kernel_version(&mut self)
     -> *mut __Request__host_kernel_version_t {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn Request__host_page_size(&mut self)
     -> *mut __Request___host_page_size_t {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn Request_mach_memory_object_memory_entry(&mut self)
     -> *mut __Request__mach_memory_object_memory_entry_t {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn Request_host_processor_info(&mut self)
     -> *mut __Request__host_processor_info_t {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn Request_host_get_io_master(&mut self)
     -> *mut __Request__host_get_io_master_t {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn Request_host_get_clock_service(&mut self)
     -> *mut __Request__host_get_clock_service_t {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn Request_kmod_get_info(&mut self)
     -> *mut __Request__kmod_get_info_t {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn Request_host_zone_info(&mut self)
     -> *mut __Request__host_zone_info_t {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn Request_host_virtual_physical_table_info(&mut self)
     -> *mut __Request__host_virtual_physical_table_info_t {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn Request_processor_set_default(&mut self)
     -> *mut __Request__processor_set_default_t {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn Request_processor_set_create(&mut self)
     -> *mut __Request__processor_set_create_t {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn Request_mach_memory_object_memory_entry_64(&mut self)
     -> *mut __Request__mach_memory_object_memory_entry_64_t {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn Request_host_statistics(&mut self)
     -> *mut __Request__host_statistics_t {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn Request_host_request_notification(&mut self)
     -> *mut __Request__host_request_notification_t {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn Request_host_lockgroup_info(&mut self)
     -> *mut __Request__host_lockgroup_info_t {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn Request_host_statistics64(&mut self)
     -> *mut __Request__host_statistics64_t {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn Request_mach_zone_info(&mut self)
     -> *mut __Request__mach_zone_info_t {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn Request_host_create_mach_voucher(&mut self)
     -> *mut __Request__host_create_mach_voucher_t {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn Request_host_register_mach_voucher_attr_manager(&mut self)
     -> *mut __Request__host_register_mach_voucher_attr_manager_t {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn Request_host_register_well_known_mach_voucher_attr_manager(&mut self)
     -> *mut __Request__host_register_well_known_mach_voucher_attr_manager_t {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn Request_host_set_atm_diagnostic_flag(&mut self)
     -> *mut __Request__host_set_atm_diagnostic_flag_t {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn Request_host_get_atm_diagnostic_flag(&mut self)
     -> *mut __Request__host_get_atm_diagnostic_flag_t {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn Request_mach_memory_info(&mut self)
     -> *mut __Request__mach_memory_info_t {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn Request_host_set_multiuser_config_flags(&mut self)
     -> *mut __Request__host_set_multiuser_config_flags_t {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn Request_host_get_multiuser_config_flags(&mut self)
     -> *mut __Request__host_get_multiuser_config_flags_t {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn Request_host_check_multiuser_mode(&mut self)
     -> *mut __Request__host_check_multiuser_mode_t {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
}
impl ::std::clone::Clone for Union___RequestUnion__mach_host_subsystem {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Union___RequestUnion__mach_host_subsystem {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed457 {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
    pub host_info_outCnt: mach_msg_type_number_t,
    pub host_info_out: [integer_t; 68usize],
}
impl ::std::clone::Clone for Struct_Unnamed457 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed457 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type __Reply__host_info_t = Struct_Unnamed457;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed458 {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
    pub kernel_versionOffset: mach_msg_type_number_t,
    pub kernel_versionCnt: mach_msg_type_number_t,
    pub kernel_version: [::std::os::raw::c_char; 512usize],
}
impl ::std::clone::Clone for Struct_Unnamed458 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed458 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type __Reply__host_kernel_version_t = Struct_Unnamed458;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed459 {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
    pub out_page_size: vm_size_t,
}
impl ::std::clone::Clone for Struct_Unnamed459 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed459 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type __Reply___host_page_size_t = Struct_Unnamed459;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed460 {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub entry_handle: mach_msg_port_descriptor_t,
}
impl ::std::clone::Clone for Struct_Unnamed460 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed460 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type __Reply__mach_memory_object_memory_entry_t = Struct_Unnamed460;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed461 {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub out_processor_info: mach_msg_ool_descriptor_t,
    pub NDR: NDR_record_t,
    pub out_processor_count: natural_t,
    pub out_processor_infoCnt: mach_msg_type_number_t,
}
impl ::std::clone::Clone for Struct_Unnamed461 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed461 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type __Reply__host_processor_info_t = Struct_Unnamed461;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed462 {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub io_master: mach_msg_port_descriptor_t,
}
impl ::std::clone::Clone for Struct_Unnamed462 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed462 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type __Reply__host_get_io_master_t = Struct_Unnamed462;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed463 {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub clock_serv: mach_msg_port_descriptor_t,
}
impl ::std::clone::Clone for Struct_Unnamed463 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed463 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type __Reply__host_get_clock_service_t = Struct_Unnamed463;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed464 {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub modules: mach_msg_ool_descriptor_t,
    pub NDR: NDR_record_t,
    pub modulesCnt: mach_msg_type_number_t,
}
impl ::std::clone::Clone for Struct_Unnamed464 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed464 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type __Reply__kmod_get_info_t = Struct_Unnamed464;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed465 {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub names: mach_msg_ool_descriptor_t,
    pub info: mach_msg_ool_descriptor_t,
    pub NDR: NDR_record_t,
    pub namesCnt: mach_msg_type_number_t,
    pub infoCnt: mach_msg_type_number_t,
}
impl ::std::clone::Clone for Struct_Unnamed465 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed465 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type __Reply__host_zone_info_t = Struct_Unnamed465;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed466 {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub info: mach_msg_ool_descriptor_t,
    pub NDR: NDR_record_t,
    pub infoCnt: mach_msg_type_number_t,
}
impl ::std::clone::Clone for Struct_Unnamed466 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed466 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type __Reply__host_virtual_physical_table_info_t = Struct_Unnamed466;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed467 {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub default_set: mach_msg_port_descriptor_t,
}
impl ::std::clone::Clone for Struct_Unnamed467 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed467 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type __Reply__processor_set_default_t = Struct_Unnamed467;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed468 {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub new_set: mach_msg_port_descriptor_t,
    pub new_name: mach_msg_port_descriptor_t,
}
impl ::std::clone::Clone for Struct_Unnamed468 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed468 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type __Reply__processor_set_create_t = Struct_Unnamed468;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed469 {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub entry_handle: mach_msg_port_descriptor_t,
}
impl ::std::clone::Clone for Struct_Unnamed469 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed469 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type __Reply__mach_memory_object_memory_entry_64_t = Struct_Unnamed469;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed470 {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
    pub host_info_outCnt: mach_msg_type_number_t,
    pub host_info_out: [integer_t; 68usize],
}
impl ::std::clone::Clone for Struct_Unnamed470 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed470 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type __Reply__host_statistics_t = Struct_Unnamed470;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed471 {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
impl ::std::clone::Clone for Struct_Unnamed471 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed471 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type __Reply__host_request_notification_t = Struct_Unnamed471;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed472 {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub lockgroup_info: mach_msg_ool_descriptor_t,
    pub NDR: NDR_record_t,
    pub lockgroup_infoCnt: mach_msg_type_number_t,
}
impl ::std::clone::Clone for Struct_Unnamed472 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed472 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type __Reply__host_lockgroup_info_t = Struct_Unnamed472;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed473 {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
    pub host_info64_outCnt: mach_msg_type_number_t,
    pub host_info64_out: [integer_t; 256usize],
}
impl ::std::clone::Clone for Struct_Unnamed473 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed473 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type __Reply__host_statistics64_t = Struct_Unnamed473;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed474 {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub names: mach_msg_ool_descriptor_t,
    pub info: mach_msg_ool_descriptor_t,
    pub NDR: NDR_record_t,
    pub namesCnt: mach_msg_type_number_t,
    pub infoCnt: mach_msg_type_number_t,
}
impl ::std::clone::Clone for Struct_Unnamed474 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed474 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type __Reply__mach_zone_info_t = Struct_Unnamed474;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed475 {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub voucher: mach_msg_port_descriptor_t,
}
impl ::std::clone::Clone for Struct_Unnamed475 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed475 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type __Reply__host_create_mach_voucher_t = Struct_Unnamed475;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed476 {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub new_attr_control: mach_msg_port_descriptor_t,
    pub NDR: NDR_record_t,
    pub new_key: mach_voucher_attr_key_t,
}
impl ::std::clone::Clone for Struct_Unnamed476 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed476 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type __Reply__host_register_mach_voucher_attr_manager_t =
    Struct_Unnamed476;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed477 {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub new_attr_control: mach_msg_port_descriptor_t,
}
impl ::std::clone::Clone for Struct_Unnamed477 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed477 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type __Reply__host_register_well_known_mach_voucher_attr_manager_t =
    Struct_Unnamed477;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed478 {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
impl ::std::clone::Clone for Struct_Unnamed478 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed478 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type __Reply__host_set_atm_diagnostic_flag_t = Struct_Unnamed478;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed479 {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
    pub diagnostic_flag: uint32_t,
}
impl ::std::clone::Clone for Struct_Unnamed479 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed479 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type __Reply__host_get_atm_diagnostic_flag_t = Struct_Unnamed479;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed480 {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub names: mach_msg_ool_descriptor_t,
    pub info: mach_msg_ool_descriptor_t,
    pub memory_info: mach_msg_ool_descriptor_t,
    pub NDR: NDR_record_t,
    pub namesCnt: mach_msg_type_number_t,
    pub infoCnt: mach_msg_type_number_t,
    pub memory_infoCnt: mach_msg_type_number_t,
}
impl ::std::clone::Clone for Struct_Unnamed480 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed480 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type __Reply__mach_memory_info_t = Struct_Unnamed480;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed481 {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
impl ::std::clone::Clone for Struct_Unnamed481 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed481 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type __Reply__host_set_multiuser_config_flags_t = Struct_Unnamed481;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed482 {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
    pub multiuser_flags: uint32_t,
}
impl ::std::clone::Clone for Struct_Unnamed482 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed482 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type __Reply__host_get_multiuser_config_flags_t = Struct_Unnamed482;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed483 {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
    pub multiuser_mode: uint32_t,
}
impl ::std::clone::Clone for Struct_Unnamed483 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed483 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type __Reply__host_check_multiuser_mode_t = Struct_Unnamed483;
#[repr(C)]
#[derive(Copy)]
pub struct Union___ReplyUnion__mach_host_subsystem {
    pub _bindgen_data_: [u32; 266usize],
}
impl Union___ReplyUnion__mach_host_subsystem {
    pub unsafe fn Reply_host_info(&mut self) -> *mut __Reply__host_info_t {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn Reply_host_kernel_version(&mut self)
     -> *mut __Reply__host_kernel_version_t {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn Reply__host_page_size(&mut self)
     -> *mut __Reply___host_page_size_t {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn Reply_mach_memory_object_memory_entry(&mut self)
     -> *mut __Reply__mach_memory_object_memory_entry_t {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn Reply_host_processor_info(&mut self)
     -> *mut __Reply__host_processor_info_t {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn Reply_host_get_io_master(&mut self)
     -> *mut __Reply__host_get_io_master_t {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn Reply_host_get_clock_service(&mut self)
     -> *mut __Reply__host_get_clock_service_t {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn Reply_kmod_get_info(&mut self)
     -> *mut __Reply__kmod_get_info_t {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn Reply_host_zone_info(&mut self)
     -> *mut __Reply__host_zone_info_t {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn Reply_host_virtual_physical_table_info(&mut self)
     -> *mut __Reply__host_virtual_physical_table_info_t {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn Reply_processor_set_default(&mut self)
     -> *mut __Reply__processor_set_default_t {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn Reply_processor_set_create(&mut self)
     -> *mut __Reply__processor_set_create_t {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn Reply_mach_memory_object_memory_entry_64(&mut self)
     -> *mut __Reply__mach_memory_object_memory_entry_64_t {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn Reply_host_statistics(&mut self)
     -> *mut __Reply__host_statistics_t {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn Reply_host_request_notification(&mut self)
     -> *mut __Reply__host_request_notification_t {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn Reply_host_lockgroup_info(&mut self)
     -> *mut __Reply__host_lockgroup_info_t {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn Reply_host_statistics64(&mut self)
     -> *mut __Reply__host_statistics64_t {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn Reply_mach_zone_info(&mut self)
     -> *mut __Reply__mach_zone_info_t {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn Reply_host_create_mach_voucher(&mut self)
     -> *mut __Reply__host_create_mach_voucher_t {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn Reply_host_register_mach_voucher_attr_manager(&mut self)
     -> *mut __Reply__host_register_mach_voucher_attr_manager_t {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn Reply_host_register_well_known_mach_voucher_attr_manager(&mut self)
     -> *mut __Reply__host_register_well_known_mach_voucher_attr_manager_t {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn Reply_host_set_atm_diagnostic_flag(&mut self)
     -> *mut __Reply__host_set_atm_diagnostic_flag_t {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn Reply_host_get_atm_diagnostic_flag(&mut self)
     -> *mut __Reply__host_get_atm_diagnostic_flag_t {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn Reply_mach_memory_info(&mut self)
     -> *mut __Reply__mach_memory_info_t {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn Reply_host_set_multiuser_config_flags(&mut self)
     -> *mut __Reply__host_set_multiuser_config_flags_t {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn Reply_host_get_multiuser_config_flags(&mut self)
     -> *mut __Reply__host_get_multiuser_config_flags_t {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn Reply_host_check_multiuser_mode(&mut self)
     -> *mut __Reply__host_check_multiuser_mode_t {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
}
impl ::std::clone::Clone for Union___ReplyUnion__mach_host_subsystem {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Union___ReplyUnion__mach_host_subsystem {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type routine_arg_type = ::std::os::raw::c_uint;
pub type routine_arg_offset = ::std::os::raw::c_uint;
pub type routine_arg_size = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_rpc_routine_arg_descriptor {
    pub _type: routine_arg_type,
    pub size: routine_arg_size,
    pub count: routine_arg_size,
    pub offset: routine_arg_offset,
}
impl ::std::clone::Clone for Struct_rpc_routine_arg_descriptor {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_rpc_routine_arg_descriptor {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type rpc_routine_arg_descriptor_t =
    *mut Struct_rpc_routine_arg_descriptor;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_rpc_routine_descriptor {
    pub impl_routine: mig_impl_routine_t,
    pub stub_routine: mig_stub_routine_t,
    pub argc: ::std::os::raw::c_uint,
    pub descr_count: ::std::os::raw::c_uint,
    pub arg_descr: rpc_routine_arg_descriptor_t,
    pub max_reply_msg: ::std::os::raw::c_uint,
}
impl ::std::clone::Clone for Struct_rpc_routine_descriptor {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_rpc_routine_descriptor {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type rpc_routine_descriptor_t = *mut Struct_rpc_routine_descriptor;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_rpc_signature {
    pub rd: Struct_rpc_routine_descriptor,
    pub rad: [Struct_rpc_routine_arg_descriptor; 1usize],
}
impl ::std::clone::Clone for Struct_rpc_signature {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_rpc_signature {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_rpc_subsystem {
    pub reserved: *mut ::std::os::raw::c_void,
    pub start: mach_msg_id_t,
    pub end: mach_msg_id_t,
    pub maxsize: ::std::os::raw::c_uint,
    pub base_addr: vm_address_t,
    pub routine: [Struct_rpc_routine_descriptor; 1usize],
    pub arg_descriptor: [Struct_rpc_routine_arg_descriptor; 1usize],
}
impl ::std::clone::Clone for Struct_rpc_subsystem {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_rpc_subsystem {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type rpc_subsystem_t = *mut Struct_rpc_subsystem;
pub type mach_error_t = kern_return_t;
pub type mach_error_fn_t =
    ::std::option::Option<extern "C" fn() -> mach_error_t>;
pub enum Struct_voucher_mach_msg_state_s { }
pub type voucher_mach_msg_state_t = *mut Struct_voucher_mach_msg_state_s;
pub enum Struct_mach_header_64 { }
pub type byte = ::std::os::raw::c_uchar;
pub type dbyte = ::std::os::raw::c_ushort;
pub type qbyte = ::std::os::raw::c_uint;
pub type inaddr_t = Struct_sockaddr_in;
pub type in6addr_t = Struct_sockaddr_in6;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed484 {
    pub __inaddr_u: Union_Unnamed485,
    pub inaddrlen: ::std::os::raw::c_int,
}
impl ::std::clone::Clone for Struct_Unnamed484 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed484 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Union_Unnamed485 {
    pub _bindgen_data_: [u32; 7usize],
}
impl Union_Unnamed485 {
    pub unsafe fn __addr(&mut self) -> *mut inaddr_t {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn __addr6(&mut self) -> *mut in6addr_t {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
}
impl ::std::clone::Clone for Union_Unnamed485 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Union_Unnamed485 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type inaddr_storage_t = Struct_Unnamed484;
pub type ulong = ::std::os::raw::c_ulong;
pub type SOCKET = ::std::os::raw::c_int;
pub enum Struct__zactor_t { }
pub type zactor_t = Struct__zactor_t;
pub enum Struct__zarmour_t { }
pub type zarmour_t = Struct__zarmour_t;
pub enum Struct__zcert_t { }
pub type zcert_t = Struct__zcert_t;
pub enum Struct__zcertstore_t { }
pub type zcertstore_t = Struct__zcertstore_t;
pub enum Struct__zchunk_t { }
pub type zchunk_t = Struct__zchunk_t;
pub enum Struct__zclock_t { }
pub type zclock_t = Struct__zclock_t;
pub enum Struct__zconfig_t { }
pub type zconfig_t = Struct__zconfig_t;
pub enum Struct__zdigest_t { }
pub type zdigest_t = Struct__zdigest_t;
pub enum Struct__zdir_t { }
pub type zdir_t = Struct__zdir_t;
pub enum Struct__zdir_patch_t { }
pub type zdir_patch_t = Struct__zdir_patch_t;
pub enum Struct__zfile_t { }
pub type zfile_t = Struct__zfile_t;
pub enum Struct__zframe_t { }
pub type zframe_t = Struct__zframe_t;
pub enum Struct__zhash_t { }
pub type zhash_t = Struct__zhash_t;
pub enum Struct__zhashx_t { }
pub type zhashx_t = Struct__zhashx_t;
pub enum Struct__ziflist_t { }
pub type ziflist_t = Struct__ziflist_t;
pub enum Struct__zlist_t { }
pub type zlist_t = Struct__zlist_t;
pub enum Struct__zlistx_t { }
pub type zlistx_t = Struct__zlistx_t;
pub enum Struct__zloop_t { }
pub type zloop_t = Struct__zloop_t;
pub enum Struct__zmsg_t { }
pub type zmsg_t = Struct__zmsg_t;
pub enum Struct__zpoller_t { }
pub type zpoller_t = Struct__zpoller_t;
pub enum Struct__zsock_t { }
pub type zsock_t = Struct__zsock_t;
pub enum Struct__zstr_t { }
pub type zstr_t = Struct__zstr_t;
pub enum Struct__zuuid_t { }
pub type zuuid_t = Struct__zuuid_t;
pub enum Struct__zauth_t { }
pub type zauth_t = Struct__zauth_t;
pub enum Struct__zbeacon_t { }
pub type zbeacon_t = Struct__zbeacon_t;
pub enum Struct__zgossip_t { }
pub type zgossip_t = Struct__zgossip_t;
pub enum Struct__zmonitor_t { }
pub type zmonitor_t = Struct__zmonitor_t;
pub enum Struct__zproxy_t { }
pub type zproxy_t = Struct__zproxy_t;
pub enum Struct__zrex_t { }
pub type zrex_t = Struct__zrex_t;
pub enum Struct__zsys_t { }
pub type zsys_t = Struct__zsys_t;
pub enum Struct__zauth_v2_t { }
pub type zauth_v2_t = Struct__zauth_v2_t;
pub enum Struct__zbeacon_v2_t { }
pub type zbeacon_v2_t = Struct__zbeacon_v2_t;
pub enum Struct__zctx_t { }
pub type zctx_t = Struct__zctx_t;
pub enum Struct__zmonitor_v2_t { }
pub type zmonitor_v2_t = Struct__zmonitor_v2_t;
pub enum Struct__zmutex_t { }
pub type zmutex_t = Struct__zmutex_t;
pub enum Struct__zproxy_v2_t { }
pub type zproxy_v2_t = Struct__zproxy_v2_t;
pub enum Struct__zsocket_t { }
pub type zsocket_t = Struct__zsocket_t;
pub enum Struct__zsockopt_t { }
pub type zsockopt_t = Struct__zsockopt_t;
pub enum Struct__zthread_t { }
pub type zthread_t = Struct__zthread_t;
pub type zactor_fn =
    unsafe extern "C" fn(pipe: *mut zsock_t,
                         args: *mut ::std::os::raw::c_void);
pub type zcertstore_loader = unsafe extern "C" fn(_self: *mut zcertstore_t);
pub type zconfig_fct =
    unsafe extern "C" fn(_self: *mut zconfig_t,
                         arg: *mut ::std::os::raw::c_void,
                         level: ::std::os::raw::c_int)
        -> ::std::os::raw::c_int;
pub type zhash_free_fn =
    unsafe extern "C" fn(data: *mut ::std::os::raw::c_void);
pub type zhash_foreach_fn =
    unsafe extern "C" fn(key: *const ::std::os::raw::c_char,
                         item: *mut ::std::os::raw::c_void,
                         argument: *mut ::std::os::raw::c_void)
        -> ::std::os::raw::c_int;
pub type zhashx_destructor_fn =
    unsafe extern "C" fn(item: *mut *mut ::std::os::raw::c_void);
pub type zhashx_duplicator_fn =
    unsafe extern "C" fn(item: *const ::std::os::raw::c_void)
        -> *mut ::std::os::raw::c_void;
pub type zhashx_comparator_fn =
    unsafe extern "C" fn(item1: *const ::std::os::raw::c_void,
                         item2: *const ::std::os::raw::c_void)
        -> ::std::os::raw::c_int;
pub type zhashx_free_fn =
    unsafe extern "C" fn(data: *mut ::std::os::raw::c_void);
pub type zhashx_hash_fn =
    unsafe extern "C" fn(key: *const ::std::os::raw::c_void)
        -> ::std::os::raw::c_ulong;
pub type zhashx_foreach_fn =
    unsafe extern "C" fn(key: *const ::std::os::raw::c_char,
                         item: *mut ::std::os::raw::c_void,
                         argument: *mut ::std::os::raw::c_void)
        -> ::std::os::raw::c_int;
pub type zlist_compare_fn =
    unsafe extern "C" fn(item1: *mut ::std::os::raw::c_void,
                         item2: *mut ::std::os::raw::c_void)
        -> ::std::os::raw::c_int;
pub type zlist_free_fn =
    unsafe extern "C" fn(data: *mut ::std::os::raw::c_void);
pub type zlistx_destructor_fn =
    unsafe extern "C" fn(item: *mut *mut ::std::os::raw::c_void);
pub type zlistx_duplicator_fn =
    unsafe extern "C" fn(item: *const ::std::os::raw::c_void)
        -> *mut ::std::os::raw::c_void;
pub type zlistx_comparator_fn =
    unsafe extern "C" fn(item1: *const ::std::os::raw::c_void,
                         item2: *const ::std::os::raw::c_void)
        -> ::std::os::raw::c_int;
pub type zloop_reader_fn =
    unsafe extern "C" fn(_loop: *mut zloop_t, reader: *mut zsock_t,
                         arg: *mut ::std::os::raw::c_void)
        -> ::std::os::raw::c_int;
pub type zloop_fn =
    unsafe extern "C" fn(_loop: *mut zloop_t, item: *mut zmq_pollitem_t,
                         arg: *mut ::std::os::raw::c_void)
        -> ::std::os::raw::c_int;
pub type zloop_timer_fn =
    unsafe extern "C" fn(_loop: *mut zloop_t, timer_id: ::std::os::raw::c_int,
                         arg: *mut ::std::os::raw::c_void)
        -> ::std::os::raw::c_int;
pub type zsys_handler_fn = extern "C" fn(signal_value: ::std::os::raw::c_int);
pub type zsocket_free_fn =
    unsafe extern "C" fn(data: *mut ::std::os::raw::c_void,
                         arg: *mut ::std::os::raw::c_void);
pub type zthread_detached_fn =
    unsafe extern "C" fn(args: *mut ::std::os::raw::c_void)
        -> *mut ::std::os::raw::c_void;
pub type zthread_attached_fn =
    unsafe extern "C" fn(args: *mut ::std::os::raw::c_void, ctx: *mut zctx_t,
                         pipe: *mut ::std::os::raw::c_void);
pub type __builtin_va_list = [Struct___va_list_tag; 1usize];
#[repr(C)]
#[derive(Copy)]
pub struct Struct___va_list_tag {
    pub gp_offset: ::std::os::raw::c_uint,
    pub fp_offset: ::std::os::raw::c_uint,
    pub overflow_arg_area: *mut ::std::os::raw::c_void,
    pub reg_save_area: *mut ::std::os::raw::c_void,
}
impl ::std::clone::Clone for Struct___va_list_tag {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct___va_list_tag {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[link(name = "czmq")]
extern "C" {
    pub static mut __stdinp: *mut FILE;
    pub static mut __stdoutp: *mut FILE;
    pub static mut __stderrp: *mut FILE;
    pub static sys_nerr: ::std::os::raw::c_int;
    pub static mut sys_errlist: *const *const ::std::os::raw::c_char;
    pub static mut _DefaultRuneLocale: _RuneLocale;
    pub static mut _CurrentRuneLocale: *mut _RuneLocale;
    pub static mut __mb_cur_max: ::std::os::raw::c_int;
    pub static mut suboptarg: *mut ::std::os::raw::c_char;
    pub static mut tzname: *mut *mut ::std::os::raw::c_char;
    pub static mut getdate_err: ::std::os::raw::c_int;
    pub static mut timezone: ::std::os::raw::c_long;
    pub static mut daylight: ::std::os::raw::c_int;
    pub static mut signgam: ::std::os::raw::c_int;
    pub static mut sys_signame: [*const ::std::os::raw::c_char; 32usize];
    pub static mut sys_siglist: [*const ::std::os::raw::c_char; 32usize];
    pub static in6addr_any: Struct_in6_addr;
    pub static in6addr_loopback: Struct_in6_addr;
    pub static in6addr_nodelocal_allnodes: Struct_in6_addr;
    pub static in6addr_linklocal_allnodes: Struct_in6_addr;
    pub static in6addr_linklocal_allrouters: Struct_in6_addr;
    pub static in6addr_linklocal_allv2routers: Struct_in6_addr;
    pub static mut h_errno: ::std::os::raw::c_int;
    pub static mut optarg: *mut ::std::os::raw::c_char;
    pub static mut optind: ::std::os::raw::c_int;
    pub static mut opterr: ::std::os::raw::c_int;
    pub static mut optopt: ::std::os::raw::c_int;
    pub static mut optreset: ::std::os::raw::c_int;
    pub static mut NDR_record: NDR_record_t;
    pub static mut KERNEL_SECURITY_TOKEN: security_token_t;
    pub static mut KERNEL_AUDIT_TOKEN: audit_token_t;
    pub static mut vm_page_size: vm_size_t;
    pub static mut vm_page_mask: vm_size_t;
    pub static mut vm_page_shift: ::std::os::raw::c_int;
    pub static mut vm_kernel_page_size: vm_size_t;
    pub static mut vm_kernel_page_mask: vm_size_t;
    pub static mut vm_kernel_page_shift: ::std::os::raw::c_int;
    pub static mut mach_task_self_: mach_port_t;
    pub static mut bootstrap_port: mach_port_t;
    pub static mut vprintf_stderr_func:
               ::std::option::Option<unsafe extern "C" fn(format:
                                                              *const ::std::os::raw::c_char,
                                                          ap: va_list)
                                         -> ::std::os::raw::c_int>;
    pub static mut zsys_interrupted: ::std::os::raw::c_int;
    pub static mut zctx_interrupted: ::std::os::raw::c_int;
}
#[link(name = "czmq")]
extern "C" {
    pub fn __error() -> *mut ::std::os::raw::c_int;
    pub fn renameat(arg1: ::std::os::raw::c_int,
                    arg2: *const ::std::os::raw::c_char,
                    arg3: ::std::os::raw::c_int,
                    arg4: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
    pub fn clearerr(arg1: *mut FILE);
    pub fn fclose(arg1: *mut FILE) -> ::std::os::raw::c_int;
    pub fn feof(arg1: *mut FILE) -> ::std::os::raw::c_int;
    pub fn ferror(arg1: *mut FILE) -> ::std::os::raw::c_int;
    pub fn fflush(arg1: *mut FILE) -> ::std::os::raw::c_int;
    pub fn fgetc(arg1: *mut FILE) -> ::std::os::raw::c_int;
    pub fn fgetpos(arg1: *mut FILE, arg2: *mut fpos_t)
     -> ::std::os::raw::c_int;
    pub fn fgets(arg1: *mut ::std::os::raw::c_char,
                 arg2: ::std::os::raw::c_int, arg3: *mut FILE)
     -> *mut ::std::os::raw::c_char;
    pub fn fopen(arg1: *const ::std::os::raw::c_char,
                 arg2: *const ::std::os::raw::c_char) -> *mut FILE;
    pub fn fprintf(arg1: *mut FILE, arg2: *const ::std::os::raw::c_char, ...)
     -> ::std::os::raw::c_int;
    pub fn fputc(arg1: ::std::os::raw::c_int, arg2: *mut FILE)
     -> ::std::os::raw::c_int;
    pub fn fputs(arg1: *const ::std::os::raw::c_char, arg2: *mut FILE)
     -> ::std::os::raw::c_int;
    pub fn fread(arg1: *mut ::std::os::raw::c_void, arg2: size_t,
                 arg3: size_t, arg4: *mut FILE) -> size_t;
    pub fn freopen(arg1: *const ::std::os::raw::c_char,
                   arg2: *const ::std::os::raw::c_char, arg3: *mut FILE)
     -> *mut FILE;
    pub fn fscanf(arg1: *mut FILE, arg2: *const ::std::os::raw::c_char, ...)
     -> ::std::os::raw::c_int;
    pub fn fseek(arg1: *mut FILE, arg2: ::std::os::raw::c_long,
                 arg3: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
    pub fn fsetpos(arg1: *mut FILE, arg2: *const fpos_t)
     -> ::std::os::raw::c_int;
    pub fn ftell(arg1: *mut FILE) -> ::std::os::raw::c_long;
    pub fn fwrite(arg1: *const ::std::os::raw::c_void, arg2: size_t,
                  arg3: size_t, arg4: *mut FILE) -> size_t;
    pub fn getc(arg1: *mut FILE) -> ::std::os::raw::c_int;
    pub fn getchar() -> ::std::os::raw::c_int;
    pub fn gets(arg1: *mut ::std::os::raw::c_char)
     -> *mut ::std::os::raw::c_char;
    pub fn perror(arg1: *const ::std::os::raw::c_char);
    pub fn printf(arg1: *const ::std::os::raw::c_char, ...)
     -> ::std::os::raw::c_int;
    pub fn putc(arg1: ::std::os::raw::c_int, arg2: *mut FILE)
     -> ::std::os::raw::c_int;
    pub fn putchar(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
    pub fn puts(arg1: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
    pub fn remove(arg1: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
    pub fn rename(arg1: *const ::std::os::raw::c_char,
                  arg2: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
    pub fn rewind(arg1: *mut FILE);
    pub fn scanf(arg1: *const ::std::os::raw::c_char, ...)
     -> ::std::os::raw::c_int;
    pub fn setbuf(arg1: *mut FILE, arg2: *mut ::std::os::raw::c_char);
    pub fn setvbuf(arg1: *mut FILE, arg2: *mut ::std::os::raw::c_char,
                   arg3: ::std::os::raw::c_int, arg4: size_t)
     -> ::std::os::raw::c_int;
    pub fn sprintf(arg1: *mut ::std::os::raw::c_char,
                   arg2: *const ::std::os::raw::c_char, ...)
     -> ::std::os::raw::c_int;
    pub fn sscanf(arg1: *const ::std::os::raw::c_char,
                  arg2: *const ::std::os::raw::c_char, ...)
     -> ::std::os::raw::c_int;
    pub fn tmpfile() -> *mut FILE;
    pub fn tmpnam(arg1: *mut ::std::os::raw::c_char)
     -> *mut ::std::os::raw::c_char;
    pub fn ungetc(arg1: ::std::os::raw::c_int, arg2: *mut FILE)
     -> ::std::os::raw::c_int;
    pub fn vfprintf(arg1: *mut FILE, arg2: *const ::std::os::raw::c_char,
                    arg3: va_list) -> ::std::os::raw::c_int;
    pub fn vprintf(arg1: *const ::std::os::raw::c_char, arg2: va_list)
     -> ::std::os::raw::c_int;
    pub fn vsprintf(arg1: *mut ::std::os::raw::c_char,
                    arg2: *const ::std::os::raw::c_char, arg3: va_list)
     -> ::std::os::raw::c_int;
    pub fn ctermid(arg1: *mut ::std::os::raw::c_char)
     -> *mut ::std::os::raw::c_char;
    pub fn fdopen(arg1: ::std::os::raw::c_int,
                  arg2: *const ::std::os::raw::c_char) -> *mut FILE;
    pub fn fileno(arg1: *mut FILE) -> ::std::os::raw::c_int;
    pub fn pclose(arg1: *mut FILE) -> ::std::os::raw::c_int;
    pub fn popen(arg1: *const ::std::os::raw::c_char,
                 arg2: *const ::std::os::raw::c_char) -> *mut FILE;
    pub fn __srget(arg1: *mut FILE) -> ::std::os::raw::c_int;
    pub fn __svfscanf(arg1: *mut FILE, arg2: *const ::std::os::raw::c_char,
                      arg3: va_list) -> ::std::os::raw::c_int;
    pub fn __swbuf(arg1: ::std::os::raw::c_int, arg2: *mut FILE)
     -> ::std::os::raw::c_int;
    pub fn __sputc(_c: ::std::os::raw::c_int, _p: *mut FILE)
     -> ::std::os::raw::c_int;
    pub fn flockfile(arg1: *mut FILE);
    pub fn ftrylockfile(arg1: *mut FILE) -> ::std::os::raw::c_int;
    pub fn funlockfile(arg1: *mut FILE);
    pub fn getc_unlocked(arg1: *mut FILE) -> ::std::os::raw::c_int;
    pub fn getchar_unlocked() -> ::std::os::raw::c_int;
    pub fn putc_unlocked(arg1: ::std::os::raw::c_int, arg2: *mut FILE)
     -> ::std::os::raw::c_int;
    pub fn putchar_unlocked(arg1: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
    pub fn getw(arg1: *mut FILE) -> ::std::os::raw::c_int;
    pub fn putw(arg1: ::std::os::raw::c_int, arg2: *mut FILE)
     -> ::std::os::raw::c_int;
    pub fn tempnam(arg1: *const ::std::os::raw::c_char,
                   arg2: *const ::std::os::raw::c_char)
     -> *mut ::std::os::raw::c_char;
    pub fn fseeko(arg1: *mut FILE, arg2: off_t, arg3: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
    pub fn ftello(arg1: *mut FILE) -> off_t;
    pub fn snprintf(arg1: *mut ::std::os::raw::c_char, arg2: size_t,
                    arg3: *const ::std::os::raw::c_char, ...)
     -> ::std::os::raw::c_int;
    pub fn vfscanf(arg1: *mut FILE, arg2: *const ::std::os::raw::c_char,
                   arg3: va_list) -> ::std::os::raw::c_int;
    pub fn vscanf(arg1: *const ::std::os::raw::c_char, arg2: va_list)
     -> ::std::os::raw::c_int;
    pub fn vsnprintf(arg1: *mut ::std::os::raw::c_char, arg2: size_t,
                     arg3: *const ::std::os::raw::c_char, arg4: va_list)
     -> ::std::os::raw::c_int;
    pub fn vsscanf(arg1: *const ::std::os::raw::c_char,
                   arg2: *const ::std::os::raw::c_char, arg3: va_list)
     -> ::std::os::raw::c_int;
    pub fn dprintf(arg1: ::std::os::raw::c_int,
                   arg2: *const ::std::os::raw::c_char, ...)
     -> ::std::os::raw::c_int;
    pub fn vdprintf(arg1: ::std::os::raw::c_int,
                    arg2: *const ::std::os::raw::c_char, arg3: va_list)
     -> ::std::os::raw::c_int;
    pub fn getdelim(arg1: *mut *mut ::std::os::raw::c_char, arg2: *mut size_t,
                    arg3: ::std::os::raw::c_int, arg4: *mut FILE) -> ssize_t;
    pub fn getline(arg1: *mut *mut ::std::os::raw::c_char, arg2: *mut size_t,
                   arg3: *mut FILE) -> ssize_t;
    pub fn asprintf(arg1: *mut *mut ::std::os::raw::c_char,
                    arg2: *const ::std::os::raw::c_char, ...)
     -> ::std::os::raw::c_int;
    pub fn ctermid_r(arg1: *mut ::std::os::raw::c_char)
     -> *mut ::std::os::raw::c_char;
    pub fn fgetln(arg1: *mut FILE, arg2: *mut size_t)
     -> *mut ::std::os::raw::c_char;
    pub fn fmtcheck(arg1: *const ::std::os::raw::c_char,
                    arg2: *const ::std::os::raw::c_char)
     -> *const ::std::os::raw::c_char;
    pub fn fpurge(arg1: *mut FILE) -> ::std::os::raw::c_int;
    pub fn setbuffer(arg1: *mut FILE, arg2: *mut ::std::os::raw::c_char,
                     arg3: ::std::os::raw::c_int);
    pub fn setlinebuf(arg1: *mut FILE) -> ::std::os::raw::c_int;
    pub fn vasprintf(arg1: *mut *mut ::std::os::raw::c_char,
                     arg2: *const ::std::os::raw::c_char, arg3: va_list)
     -> ::std::os::raw::c_int;
    pub fn zopen(arg1: *const ::std::os::raw::c_char,
                 arg2: *const ::std::os::raw::c_char,
                 arg3: ::std::os::raw::c_int) -> *mut FILE;
    pub fn funopen(arg1: *const ::std::os::raw::c_void,
                   arg2:
                       ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                      *mut ::std::os::raw::c_void,
                                                                  arg2:
                                                                      *mut ::std::os::raw::c_char,
                                                                  arg3:
                                                                      ::std::os::raw::c_int)
                                                 -> ::std::os::raw::c_int>,
                   arg3:
                       ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                      *mut ::std::os::raw::c_void,
                                                                  arg2:
                                                                      *const ::std::os::raw::c_char,
                                                                  arg3:
                                                                      ::std::os::raw::c_int)
                                                 -> ::std::os::raw::c_int>,
                   arg4:
                       ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                      *mut ::std::os::raw::c_void,
                                                                  arg2:
                                                                      fpos_t,
                                                                  arg3:
                                                                      ::std::os::raw::c_int)
                                                 -> fpos_t>,
                   arg5:
                       ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                      *mut ::std::os::raw::c_void)
                                                 -> ::std::os::raw::c_int>)
     -> *mut FILE;
    pub fn __sprintf_chk(arg1: *mut ::std::os::raw::c_char,
                         arg2: ::std::os::raw::c_int, arg3: size_t,
                         arg4: *const ::std::os::raw::c_char, ...)
     -> ::std::os::raw::c_int;
    pub fn __snprintf_chk(arg1: *mut ::std::os::raw::c_char, arg2: size_t,
                          arg3: ::std::os::raw::c_int, arg4: size_t,
                          arg5: *const ::std::os::raw::c_char, ...)
     -> ::std::os::raw::c_int;
    pub fn __vsprintf_chk(arg1: *mut ::std::os::raw::c_char,
                          arg2: ::std::os::raw::c_int, arg3: size_t,
                          arg4: *const ::std::os::raw::c_char, arg5: va_list)
     -> ::std::os::raw::c_int;
    pub fn __vsnprintf_chk(arg1: *mut ::std::os::raw::c_char, arg2: size_t,
                           arg3: ::std::os::raw::c_int, arg4: size_t,
                           arg5: *const ::std::os::raw::c_char, arg6: va_list)
     -> ::std::os::raw::c_int;
    pub fn zmq_errno() -> ::std::os::raw::c_int;
    pub fn zmq_strerror(errnum: ::std::os::raw::c_int)
     -> *const ::std::os::raw::c_char;
    pub fn zmq_version(major: *mut ::std::os::raw::c_int,
                       minor: *mut ::std::os::raw::c_int,
                       patch: *mut ::std::os::raw::c_int);
    pub fn zmq_ctx_new() -> *mut ::std::os::raw::c_void;
    pub fn zmq_ctx_term(context: *mut ::std::os::raw::c_void)
     -> ::std::os::raw::c_int;
    pub fn zmq_ctx_shutdown(ctx_: *mut ::std::os::raw::c_void)
     -> ::std::os::raw::c_int;
    pub fn zmq_ctx_set(context: *mut ::std::os::raw::c_void,
                       option: ::std::os::raw::c_int,
                       optval: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
    pub fn zmq_ctx_get(context: *mut ::std::os::raw::c_void,
                       option: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
    pub fn zmq_init(io_threads: ::std::os::raw::c_int)
     -> *mut ::std::os::raw::c_void;
    pub fn zmq_term(context: *mut ::std::os::raw::c_void)
     -> ::std::os::raw::c_int;
    pub fn zmq_ctx_destroy(context: *mut ::std::os::raw::c_void)
     -> ::std::os::raw::c_int;
    pub fn zmq_msg_init(msg: *mut zmq_msg_t) -> ::std::os::raw::c_int;
    pub fn zmq_msg_init_size(msg: *mut zmq_msg_t, size: size_t)
     -> ::std::os::raw::c_int;
    pub fn zmq_msg_init_data(msg: *mut zmq_msg_t,
                             data: *mut ::std::os::raw::c_void, size: size_t,
                             ffn: *mut zmq_free_fn,
                             hint: *mut ::std::os::raw::c_void)
     -> ::std::os::raw::c_int;
    pub fn zmq_msg_send(msg: *mut zmq_msg_t, s: *mut ::std::os::raw::c_void,
                        flags: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
    pub fn zmq_msg_recv(msg: *mut zmq_msg_t, s: *mut ::std::os::raw::c_void,
                        flags: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
    pub fn zmq_msg_close(msg: *mut zmq_msg_t) -> ::std::os::raw::c_int;
    pub fn zmq_msg_move(dest: *mut zmq_msg_t, src: *mut zmq_msg_t)
     -> ::std::os::raw::c_int;
    pub fn zmq_msg_copy(dest: *mut zmq_msg_t, src: *mut zmq_msg_t)
     -> ::std::os::raw::c_int;
    pub fn zmq_msg_data(msg: *mut zmq_msg_t) -> *mut ::std::os::raw::c_void;
    pub fn zmq_msg_size(msg: *mut zmq_msg_t) -> size_t;
    pub fn zmq_msg_more(msg: *mut zmq_msg_t) -> ::std::os::raw::c_int;
    pub fn zmq_msg_get(msg: *mut zmq_msg_t, property: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
    pub fn zmq_msg_set(msg: *mut zmq_msg_t, property: ::std::os::raw::c_int,
                       optval: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
    pub fn zmq_msg_gets(msg: *mut zmq_msg_t,
                        property: *const ::std::os::raw::c_char)
     -> *const ::std::os::raw::c_char;
    pub fn zmq_socket(arg1: *mut ::std::os::raw::c_void,
                      _type: ::std::os::raw::c_int)
     -> *mut ::std::os::raw::c_void;
    pub fn zmq_close(s: *mut ::std::os::raw::c_void) -> ::std::os::raw::c_int;
    pub fn zmq_setsockopt(s: *mut ::std::os::raw::c_void,
                          option: ::std::os::raw::c_int,
                          optval: *const ::std::os::raw::c_void,
                          optvallen: size_t) -> ::std::os::raw::c_int;
    pub fn zmq_getsockopt(s: *mut ::std::os::raw::c_void,
                          option: ::std::os::raw::c_int,
                          optval: *mut ::std::os::raw::c_void,
                          optvallen: *mut size_t) -> ::std::os::raw::c_int;
    pub fn zmq_bind(s: *mut ::std::os::raw::c_void,
                    addr: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
    pub fn zmq_connect(s: *mut ::std::os::raw::c_void,
                       addr: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
    pub fn zmq_unbind(s: *mut ::std::os::raw::c_void,
                      addr: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
    pub fn zmq_disconnect(s: *mut ::std::os::raw::c_void,
                          addr: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
    pub fn zmq_send(s: *mut ::std::os::raw::c_void,
                    buf: *const ::std::os::raw::c_void, len: size_t,
                    flags: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
    pub fn zmq_send_const(s: *mut ::std::os::raw::c_void,
                          buf: *const ::std::os::raw::c_void, len: size_t,
                          flags: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
    pub fn zmq_recv(s: *mut ::std::os::raw::c_void,
                    buf: *mut ::std::os::raw::c_void, len: size_t,
                    flags: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
    pub fn zmq_socket_monitor(s: *mut ::std::os::raw::c_void,
                              addr: *const ::std::os::raw::c_char,
                              events: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
    pub fn zmq_poll(items: *mut zmq_pollitem_t, nitems: ::std::os::raw::c_int,
                    timeout: ::std::os::raw::c_long) -> ::std::os::raw::c_int;
    pub fn zmq_proxy(frontend: *mut ::std::os::raw::c_void,
                     backend: *mut ::std::os::raw::c_void,
                     capture: *mut ::std::os::raw::c_void)
     -> ::std::os::raw::c_int;
    pub fn zmq_proxy_steerable(frontend: *mut ::std::os::raw::c_void,
                               backend: *mut ::std::os::raw::c_void,
                               capture: *mut ::std::os::raw::c_void,
                               control: *mut ::std::os::raw::c_void)
     -> ::std::os::raw::c_int;
    pub fn zmq_has(capability: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
    pub fn zmq_device(_type: ::std::os::raw::c_int,
                      frontend: *mut ::std::os::raw::c_void,
                      backend: *mut ::std::os::raw::c_void)
     -> ::std::os::raw::c_int;
    pub fn zmq_sendmsg(s: *mut ::std::os::raw::c_void, msg: *mut zmq_msg_t,
                       flags: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
    pub fn zmq_recvmsg(s: *mut ::std::os::raw::c_void, msg: *mut zmq_msg_t,
                       flags: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
    pub fn zmq_z85_encode(dest: *mut ::std::os::raw::c_char,
                          data: *const uint8_t, size: size_t)
     -> *mut ::std::os::raw::c_char;
    pub fn zmq_z85_decode(dest: *mut uint8_t,
                          string: *const ::std::os::raw::c_char)
     -> *mut uint8_t;
    pub fn zmq_curve_keypair(z85_public_key: *mut ::std::os::raw::c_char,
                             z85_secret_key: *mut ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
    pub fn zmq_sendiov(s: *mut ::std::os::raw::c_void, iov: *mut Struct_iovec,
                       count: size_t, flags: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
    pub fn zmq_recviov(s: *mut ::std::os::raw::c_void, iov: *mut Struct_iovec,
                       count: *mut size_t, flags: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
    pub fn zmq_stopwatch_start() -> *mut ::std::os::raw::c_void;
    pub fn zmq_stopwatch_stop(watch_: *mut ::std::os::raw::c_void)
     -> ::std::os::raw::c_ulong;
    pub fn zmq_sleep(seconds_: ::std::os::raw::c_int);
    pub fn zmq_threadstart(func: *mut zmq_thread_fn,
                           arg: *mut ::std::os::raw::c_void)
     -> *mut ::std::os::raw::c_void;
    pub fn zmq_threadclose(thread: *mut ::std::os::raw::c_void);
    pub fn ___runetype(arg1: __darwin_ct_rune_t) -> ::std::os::raw::c_ulong;
    pub fn ___tolower(arg1: __darwin_ct_rune_t) -> __darwin_ct_rune_t;
    pub fn ___toupper(arg1: __darwin_ct_rune_t) -> __darwin_ct_rune_t;
    pub fn isascii(_c: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
    pub fn __maskrune(arg1: __darwin_ct_rune_t, arg2: ::std::os::raw::c_ulong)
     -> ::std::os::raw::c_int;
    pub fn __istype(_c: __darwin_ct_rune_t, _f: ::std::os::raw::c_ulong)
     -> ::std::os::raw::c_int;
    pub fn __isctype(_c: __darwin_ct_rune_t, _f: ::std::os::raw::c_ulong)
     -> __darwin_ct_rune_t;
    pub fn __toupper(arg1: __darwin_ct_rune_t) -> __darwin_ct_rune_t;
    pub fn __tolower(arg1: __darwin_ct_rune_t) -> __darwin_ct_rune_t;
    pub fn __wcwidth(_c: __darwin_ct_rune_t) -> ::std::os::raw::c_int;
    pub fn isalnum(_c: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
    pub fn isalpha(_c: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
    pub fn isblank(_c: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
    pub fn iscntrl(_c: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
    pub fn isdigit(_c: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
    pub fn isgraph(_c: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
    pub fn islower(_c: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
    pub fn isprint(_c: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
    pub fn ispunct(_c: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
    pub fn isspace(_c: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
    pub fn isupper(_c: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
    pub fn isxdigit(_c: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
    pub fn toascii(_c: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
    pub fn tolower(_c: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
    pub fn toupper(_c: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
    pub fn digittoint(_c: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
    pub fn ishexnumber(_c: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
    pub fn isideogram(_c: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
    pub fn isnumber(_c: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
    pub fn isphonogram(_c: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
    pub fn isrune(_c: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
    pub fn isspecial(_c: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
    pub fn signal(arg1: ::std::os::raw::c_int,
                  arg2:
                      ::std::option::Option<extern "C" fn(arg1:
                                                              ::std::os::raw::c_int)>)
     ->
         ::std::option::Option<extern "C" fn(arg1: ::std::os::raw::c_int,
                                             arg2:
                                                 ::std::option::Option<extern "C" fn(arg1:
                                                                                         ::std::os::raw::c_int)>)>;
    pub fn getpriority(arg1: ::std::os::raw::c_int, arg2: id_t)
     -> ::std::os::raw::c_int;
    pub fn getiopolicy_np(arg1: ::std::os::raw::c_int,
                          arg2: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
    pub fn getrlimit(arg1: ::std::os::raw::c_int, arg2: *mut Struct_rlimit)
     -> ::std::os::raw::c_int;
    pub fn getrusage(arg1: ::std::os::raw::c_int, arg2: *mut Struct_rusage)
     -> ::std::os::raw::c_int;
    pub fn setpriority(arg1: ::std::os::raw::c_int, arg2: id_t,
                       arg3: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
    pub fn setiopolicy_np(arg1: ::std::os::raw::c_int,
                          arg2: ::std::os::raw::c_int,
                          arg3: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
    pub fn setrlimit(arg1: ::std::os::raw::c_int, arg2: *const Struct_rlimit)
     -> ::std::os::raw::c_int;
    pub fn wait(arg1: *mut ::std::os::raw::c_int) -> pid_t;
    pub fn waitpid(arg1: pid_t, arg2: *mut ::std::os::raw::c_int,
                   arg3: ::std::os::raw::c_int) -> pid_t;
    pub fn waitid(arg1: idtype_t, arg2: id_t, arg3: *mut siginfo_t,
                  arg4: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
    pub fn wait3(arg1: *mut ::std::os::raw::c_int,
                 arg2: ::std::os::raw::c_int, arg3: *mut Struct_rusage)
     -> pid_t;
    pub fn wait4(arg1: pid_t, arg2: *mut ::std::os::raw::c_int,
                 arg3: ::std::os::raw::c_int, arg4: *mut Struct_rusage)
     -> pid_t;
    pub fn alloca(arg1: size_t) -> *mut ::std::os::raw::c_void;
    pub fn abort();
    pub fn abs(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
    pub fn atexit(arg1: ::std::option::Option<extern "C" fn()>)
     -> ::std::os::raw::c_int;
    pub fn atof(arg1: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_double;
    pub fn atoi(arg1: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
    pub fn atol(arg1: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_long;
    pub fn atoll(arg1: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_longlong;
    pub fn bsearch(arg1: *const ::std::os::raw::c_void,
                   arg2: *const ::std::os::raw::c_void, arg3: size_t,
                   arg4: size_t,
                   arg5:
                       ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                      *const ::std::os::raw::c_void,
                                                                  arg2:
                                                                      *const ::std::os::raw::c_void)
                                                 -> ::std::os::raw::c_int>)
     -> *mut ::std::os::raw::c_void;
    pub fn calloc(arg1: size_t, arg2: size_t) -> *mut ::std::os::raw::c_void;
    pub fn div(arg1: ::std::os::raw::c_int, arg2: ::std::os::raw::c_int)
     -> div_t;
    pub fn exit(arg1: ::std::os::raw::c_int);
    pub fn free(arg1: *mut ::std::os::raw::c_void);
    pub fn getenv(arg1: *const ::std::os::raw::c_char)
     -> *mut ::std::os::raw::c_char;
    pub fn labs(arg1: ::std::os::raw::c_long) -> ::std::os::raw::c_long;
    pub fn ldiv(arg1: ::std::os::raw::c_long, arg2: ::std::os::raw::c_long)
     -> ldiv_t;
    pub fn llabs(arg1: ::std::os::raw::c_longlong)
     -> ::std::os::raw::c_longlong;
    pub fn lldiv(arg1: ::std::os::raw::c_longlong,
                 arg2: ::std::os::raw::c_longlong) -> lldiv_t;
    pub fn malloc(arg1: size_t) -> *mut ::std::os::raw::c_void;
    pub fn mblen(arg1: *const ::std::os::raw::c_char, arg2: size_t)
     -> ::std::os::raw::c_int;
    pub fn mbstowcs(arg1: *mut wchar_t, arg2: *const ::std::os::raw::c_char,
                    arg3: size_t) -> size_t;
    pub fn mbtowc(arg1: *mut wchar_t, arg2: *const ::std::os::raw::c_char,
                  arg3: size_t) -> ::std::os::raw::c_int;
    pub fn posix_memalign(arg1: *mut *mut ::std::os::raw::c_void,
                          arg2: size_t, arg3: size_t)
     -> ::std::os::raw::c_int;
    pub fn qsort(arg1: *mut ::std::os::raw::c_void, arg2: size_t,
                 arg3: size_t,
                 arg4:
                     ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                    *const ::std::os::raw::c_void,
                                                                arg2:
                                                                    *const ::std::os::raw::c_void)
                                               -> ::std::os::raw::c_int>);
    pub fn rand() -> ::std::os::raw::c_int;
    pub fn realloc(arg1: *mut ::std::os::raw::c_void, arg2: size_t)
     -> *mut ::std::os::raw::c_void;
    pub fn srand(arg1: ::std::os::raw::c_uint);
    pub fn strtod(arg1: *const ::std::os::raw::c_char,
                  arg2: *mut *mut ::std::os::raw::c_char)
     -> ::std::os::raw::c_double;
    pub fn strtof(arg1: *const ::std::os::raw::c_char,
                  arg2: *mut *mut ::std::os::raw::c_char)
     -> ::std::os::raw::c_float;
    pub fn strtol(arg1: *const ::std::os::raw::c_char,
                  arg2: *mut *mut ::std::os::raw::c_char,
                  arg3: ::std::os::raw::c_int) -> ::std::os::raw::c_long;
    pub fn strtold(arg1: *const ::std::os::raw::c_char,
                   arg2: *mut *mut ::std::os::raw::c_char)
     -> ::std::os::raw::c_double;
    pub fn strtoll(arg1: *const ::std::os::raw::c_char,
                   arg2: *mut *mut ::std::os::raw::c_char,
                   arg3: ::std::os::raw::c_int) -> ::std::os::raw::c_longlong;
    pub fn strtoul(arg1: *const ::std::os::raw::c_char,
                   arg2: *mut *mut ::std::os::raw::c_char,
                   arg3: ::std::os::raw::c_int) -> ::std::os::raw::c_ulong;
    pub fn strtoull(arg1: *const ::std::os::raw::c_char,
                    arg2: *mut *mut ::std::os::raw::c_char,
                    arg3: ::std::os::raw::c_int)
     -> ::std::os::raw::c_ulonglong;
    pub fn system(arg1: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
    pub fn wcstombs(arg1: *mut ::std::os::raw::c_char, arg2: *const wchar_t,
                    arg3: size_t) -> size_t;
    pub fn wctomb(arg1: *mut ::std::os::raw::c_char, arg2: wchar_t)
     -> ::std::os::raw::c_int;
    pub fn _Exit(arg1: ::std::os::raw::c_int);
    pub fn a64l(arg1: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_long;
    pub fn drand48() -> ::std::os::raw::c_double;
    pub fn ecvt(arg1: ::std::os::raw::c_double, arg2: ::std::os::raw::c_int,
                arg3: *mut ::std::os::raw::c_int,
                arg4: *mut ::std::os::raw::c_int)
     -> *mut ::std::os::raw::c_char;
    pub fn erand48(arg1: *mut ::std::os::raw::c_ushort)
     -> ::std::os::raw::c_double;
    pub fn fcvt(arg1: ::std::os::raw::c_double, arg2: ::std::os::raw::c_int,
                arg3: *mut ::std::os::raw::c_int,
                arg4: *mut ::std::os::raw::c_int)
     -> *mut ::std::os::raw::c_char;
    pub fn gcvt(arg1: ::std::os::raw::c_double, arg2: ::std::os::raw::c_int,
                arg3: *mut ::std::os::raw::c_char)
     -> *mut ::std::os::raw::c_char;
    pub fn getsubopt(arg1: *mut *mut ::std::os::raw::c_char,
                     arg2: *const *mut ::std::os::raw::c_char,
                     arg3: *mut *mut ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
    pub fn grantpt(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
    pub fn initstate(arg1: ::std::os::raw::c_uint,
                     arg2: *mut ::std::os::raw::c_char, arg3: size_t)
     -> *mut ::std::os::raw::c_char;
    pub fn jrand48(arg1: *mut ::std::os::raw::c_ushort)
     -> ::std::os::raw::c_long;
    pub fn l64a(arg1: ::std::os::raw::c_long) -> *mut ::std::os::raw::c_char;
    pub fn lcong48(arg1: *mut ::std::os::raw::c_ushort);
    pub fn lrand48() -> ::std::os::raw::c_long;
    pub fn mktemp(arg1: *mut ::std::os::raw::c_char)
     -> *mut ::std::os::raw::c_char;
    pub fn mkstemp(arg1: *mut ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
    pub fn mrand48() -> ::std::os::raw::c_long;
    pub fn nrand48(arg1: *mut ::std::os::raw::c_ushort)
     -> ::std::os::raw::c_long;
    pub fn posix_openpt(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
    pub fn ptsname(arg1: ::std::os::raw::c_int)
     -> *mut ::std::os::raw::c_char;
    pub fn putenv(arg1: *mut ::std::os::raw::c_char) -> ::std::os::raw::c_int;
    pub fn random() -> ::std::os::raw::c_long;
    pub fn rand_r(arg1: *mut ::std::os::raw::c_uint) -> ::std::os::raw::c_int;
    pub fn realpath(arg1: *const ::std::os::raw::c_char,
                    arg2: *mut ::std::os::raw::c_char)
     -> *mut ::std::os::raw::c_char;
    pub fn seed48(arg1: *mut ::std::os::raw::c_ushort)
     -> *mut ::std::os::raw::c_ushort;
    pub fn setenv(arg1: *const ::std::os::raw::c_char,
                  arg2: *const ::std::os::raw::c_char,
                  arg3: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
    pub fn setkey(arg1: *const ::std::os::raw::c_char);
    pub fn setstate(arg1: *const ::std::os::raw::c_char)
     -> *mut ::std::os::raw::c_char;
    pub fn srand48(arg1: ::std::os::raw::c_long);
    pub fn srandom(arg1: ::std::os::raw::c_uint);
    pub fn unlockpt(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
    pub fn unsetenv(arg1: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
    pub fn arc4random() -> u_int32_t;
    pub fn arc4random_addrandom(arg1: *mut ::std::os::raw::c_uchar,
                                arg2: ::std::os::raw::c_int);
    pub fn arc4random_buf(arg1: *mut ::std::os::raw::c_void, arg2: size_t);
    pub fn arc4random_stir();
    pub fn arc4random_uniform(arg1: u_int32_t) -> u_int32_t;
    pub fn atexit_b(arg1: ::std::os::raw::c_void) -> ::std::os::raw::c_int;
    pub fn bsearch_b(arg1: *const ::std::os::raw::c_void,
                     arg2: *const ::std::os::raw::c_void, arg3: size_t,
                     arg4: size_t, arg5: ::std::os::raw::c_void)
     -> *mut ::std::os::raw::c_void;
    pub fn cgetcap(arg1: *mut ::std::os::raw::c_char,
                   arg2: *const ::std::os::raw::c_char,
                   arg3: ::std::os::raw::c_int)
     -> *mut ::std::os::raw::c_char;
    pub fn cgetclose() -> ::std::os::raw::c_int;
    pub fn cgetent(arg1: *mut *mut ::std::os::raw::c_char,
                   arg2: *mut *mut ::std::os::raw::c_char,
                   arg3: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
    pub fn cgetfirst(arg1: *mut *mut ::std::os::raw::c_char,
                     arg2: *mut *mut ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
    pub fn cgetmatch(arg1: *const ::std::os::raw::c_char,
                     arg2: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
    pub fn cgetnext(arg1: *mut *mut ::std::os::raw::c_char,
                    arg2: *mut *mut ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
    pub fn cgetnum(arg1: *mut ::std::os::raw::c_char,
                   arg2: *const ::std::os::raw::c_char,
                   arg3: *mut ::std::os::raw::c_long)
     -> ::std::os::raw::c_int;
    pub fn cgetset(arg1: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
    pub fn cgetstr(arg1: *mut ::std::os::raw::c_char,
                   arg2: *const ::std::os::raw::c_char,
                   arg3: *mut *mut ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
    pub fn cgetustr(arg1: *mut ::std::os::raw::c_char,
                    arg2: *const ::std::os::raw::c_char,
                    arg3: *mut *mut ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
    pub fn daemon(arg1: ::std::os::raw::c_int, arg2: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
    pub fn devname(arg1: dev_t, arg2: mode_t) -> *mut ::std::os::raw::c_char;
    pub fn devname_r(arg1: dev_t, arg2: mode_t,
                     buf: *mut ::std::os::raw::c_char,
                     len: ::std::os::raw::c_int)
     -> *mut ::std::os::raw::c_char;
    pub fn getbsize(arg1: *mut ::std::os::raw::c_int,
                    arg2: *mut ::std::os::raw::c_long)
     -> *mut ::std::os::raw::c_char;
    pub fn getloadavg(arg1: *mut ::std::os::raw::c_double,
                      arg2: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
    pub fn getprogname() -> *const ::std::os::raw::c_char;
    pub fn heapsort(arg1: *mut ::std::os::raw::c_void, arg2: size_t,
                    arg3: size_t,
                    arg4:
                        ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                       *const ::std::os::raw::c_void,
                                                                   arg2:
                                                                       *const ::std::os::raw::c_void)
                                                  -> ::std::os::raw::c_int>)
     -> ::std::os::raw::c_int;
    pub fn heapsort_b(arg1: *mut ::std::os::raw::c_void, arg2: size_t,
                      arg3: size_t, arg4: ::std::os::raw::c_void)
     -> ::std::os::raw::c_int;
    pub fn mergesort(arg1: *mut ::std::os::raw::c_void, arg2: size_t,
                     arg3: size_t,
                     arg4:
                         ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                        *const ::std::os::raw::c_void,
                                                                    arg2:
                                                                        *const ::std::os::raw::c_void)
                                                   -> ::std::os::raw::c_int>)
     -> ::std::os::raw::c_int;
    pub fn mergesort_b(arg1: *mut ::std::os::raw::c_void, arg2: size_t,
                       arg3: size_t, arg4: ::std::os::raw::c_void)
     -> ::std::os::raw::c_int;
    pub fn psort(arg1: *mut ::std::os::raw::c_void, arg2: size_t,
                 arg3: size_t,
                 arg4:
                     ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                    *const ::std::os::raw::c_void,
                                                                arg2:
                                                                    *const ::std::os::raw::c_void)
                                               -> ::std::os::raw::c_int>);
    pub fn psort_b(arg1: *mut ::std::os::raw::c_void, arg2: size_t,
                   arg3: size_t, arg4: ::std::os::raw::c_void);
    pub fn psort_r(arg1: *mut ::std::os::raw::c_void, arg2: size_t,
                   arg3: size_t, arg4: *mut ::std::os::raw::c_void,
                   arg5:
                       ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                      *mut ::std::os::raw::c_void,
                                                                  arg2:
                                                                      *const ::std::os::raw::c_void,
                                                                  arg3:
                                                                      *const ::std::os::raw::c_void)
                                                 -> ::std::os::raw::c_int>);
    pub fn qsort_b(arg1: *mut ::std::os::raw::c_void, arg2: size_t,
                   arg3: size_t, arg4: ::std::os::raw::c_void);
    pub fn qsort_r(arg1: *mut ::std::os::raw::c_void, arg2: size_t,
                   arg3: size_t, arg4: *mut ::std::os::raw::c_void,
                   arg5:
                       ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                      *mut ::std::os::raw::c_void,
                                                                  arg2:
                                                                      *const ::std::os::raw::c_void,
                                                                  arg3:
                                                                      *const ::std::os::raw::c_void)
                                                 -> ::std::os::raw::c_int>);
    pub fn radixsort(arg1: *mut *const ::std::os::raw::c_uchar,
                     arg2: ::std::os::raw::c_int,
                     arg3: *const ::std::os::raw::c_uchar,
                     arg4: ::std::os::raw::c_uint) -> ::std::os::raw::c_int;
    pub fn setprogname(arg1: *const ::std::os::raw::c_char);
    pub fn sradixsort(arg1: *mut *const ::std::os::raw::c_uchar,
                      arg2: ::std::os::raw::c_int,
                      arg3: *const ::std::os::raw::c_uchar,
                      arg4: ::std::os::raw::c_uint) -> ::std::os::raw::c_int;
    pub fn sranddev();
    pub fn srandomdev();
    pub fn reallocf(arg1: *mut ::std::os::raw::c_void, arg2: size_t)
     -> *mut ::std::os::raw::c_void;
    pub fn strtoq(arg1: *const ::std::os::raw::c_char,
                  arg2: *mut *mut ::std::os::raw::c_char,
                  arg3: ::std::os::raw::c_int) -> ::std::os::raw::c_longlong;
    pub fn strtouq(arg1: *const ::std::os::raw::c_char,
                   arg2: *mut *mut ::std::os::raw::c_char,
                   arg3: ::std::os::raw::c_int)
     -> ::std::os::raw::c_ulonglong;
    pub fn valloc(arg1: size_t) -> *mut ::std::os::raw::c_void;
    pub fn memchr(arg1: *const ::std::os::raw::c_void,
                  arg2: ::std::os::raw::c_int, arg3: size_t)
     -> *mut ::std::os::raw::c_void;
    pub fn memcmp(arg1: *const ::std::os::raw::c_void,
                  arg2: *const ::std::os::raw::c_void, arg3: size_t)
     -> ::std::os::raw::c_int;
    pub fn memcpy(arg1: *mut ::std::os::raw::c_void,
                  arg2: *const ::std::os::raw::c_void, arg3: size_t)
     -> *mut ::std::os::raw::c_void;
    pub fn memmove(arg1: *mut ::std::os::raw::c_void,
                   arg2: *const ::std::os::raw::c_void, arg3: size_t)
     -> *mut ::std::os::raw::c_void;
    pub fn memset(arg1: *mut ::std::os::raw::c_void,
                  arg2: ::std::os::raw::c_int, arg3: size_t)
     -> *mut ::std::os::raw::c_void;
    pub fn strcat(arg1: *mut ::std::os::raw::c_char,
                  arg2: *const ::std::os::raw::c_char)
     -> *mut ::std::os::raw::c_char;
    pub fn strchr(arg1: *const ::std::os::raw::c_char,
                  arg2: ::std::os::raw::c_int) -> *mut ::std::os::raw::c_char;
    pub fn strcmp(arg1: *const ::std::os::raw::c_char,
                  arg2: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
    pub fn strcoll(arg1: *const ::std::os::raw::c_char,
                   arg2: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
    pub fn strcpy(arg1: *mut ::std::os::raw::c_char,
                  arg2: *const ::std::os::raw::c_char)
     -> *mut ::std::os::raw::c_char;
    pub fn strcspn(arg1: *const ::std::os::raw::c_char,
                   arg2: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_ulong;
    pub fn strerror(arg1: ::std::os::raw::c_int)
     -> *mut ::std::os::raw::c_char;
    pub fn strlen(arg1: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_ulong;
    pub fn strncat(arg1: *mut ::std::os::raw::c_char,
                   arg2: *const ::std::os::raw::c_char, arg3: size_t)
     -> *mut ::std::os::raw::c_char;
    pub fn strncmp(arg1: *const ::std::os::raw::c_char,
                   arg2: *const ::std::os::raw::c_char, arg3: size_t)
     -> ::std::os::raw::c_int;
    pub fn strncpy(arg1: *mut ::std::os::raw::c_char,
                   arg2: *const ::std::os::raw::c_char, arg3: size_t)
     -> *mut ::std::os::raw::c_char;
    pub fn strpbrk(arg1: *const ::std::os::raw::c_char,
                   arg2: *const ::std::os::raw::c_char)
     -> *mut ::std::os::raw::c_char;
    pub fn strrchr(arg1: *const ::std::os::raw::c_char,
                   arg2: ::std::os::raw::c_int)
     -> *mut ::std::os::raw::c_char;
    pub fn strspn(arg1: *const ::std::os::raw::c_char,
                  arg2: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_ulong;
    pub fn strstr(arg1: *const ::std::os::raw::c_char,
                  arg2: *const ::std::os::raw::c_char)
     -> *mut ::std::os::raw::c_char;
    pub fn strtok(arg1: *mut ::std::os::raw::c_char,
                  arg2: *const ::std::os::raw::c_char)
     -> *mut ::std::os::raw::c_char;
    pub fn strxfrm(arg1: *mut ::std::os::raw::c_char,
                   arg2: *const ::std::os::raw::c_char, arg3: size_t)
     -> ::std::os::raw::c_ulong;
    pub fn strtok_r(arg1: *mut ::std::os::raw::c_char,
                    arg2: *const ::std::os::raw::c_char,
                    arg3: *mut *mut ::std::os::raw::c_char)
     -> *mut ::std::os::raw::c_char;
    pub fn strerror_r(arg1: ::std::os::raw::c_int,
                      arg2: *mut ::std::os::raw::c_char, arg3: size_t)
     -> ::std::os::raw::c_int;
    pub fn strdup(arg1: *const ::std::os::raw::c_char)
     -> *mut ::std::os::raw::c_char;
    pub fn memccpy(arg1: *mut ::std::os::raw::c_void,
                   arg2: *const ::std::os::raw::c_void,
                   arg3: ::std::os::raw::c_int, arg4: size_t)
     -> *mut ::std::os::raw::c_void;
    pub fn stpcpy(arg1: *mut ::std::os::raw::c_char,
                  arg2: *const ::std::os::raw::c_char)
     -> *mut ::std::os::raw::c_char;
    pub fn stpncpy(arg1: *mut ::std::os::raw::c_char,
                   arg2: *const ::std::os::raw::c_char, arg3: size_t)
     -> *mut ::std::os::raw::c_char;
    pub fn strndup(arg1: *const ::std::os::raw::c_char, arg2: size_t)
     -> *mut ::std::os::raw::c_char;
    pub fn strnlen(arg1: *const ::std::os::raw::c_char, arg2: size_t)
     -> size_t;
    pub fn strsignal(sig: ::std::os::raw::c_int)
     -> *mut ::std::os::raw::c_char;
    pub fn memset_s(arg1: *mut ::std::os::raw::c_void, arg2: rsize_t,
                    arg3: ::std::os::raw::c_int, arg4: rsize_t) -> errno_t;
    pub fn memmem(arg1: *const ::std::os::raw::c_void, arg2: size_t,
                  arg3: *const ::std::os::raw::c_void, arg4: size_t)
     -> *mut ::std::os::raw::c_void;
    pub fn memset_pattern4(arg1: *mut ::std::os::raw::c_void,
                           arg2: *const ::std::os::raw::c_void, arg3: size_t);
    pub fn memset_pattern8(arg1: *mut ::std::os::raw::c_void,
                           arg2: *const ::std::os::raw::c_void, arg3: size_t);
    pub fn memset_pattern16(arg1: *mut ::std::os::raw::c_void,
                            arg2: *const ::std::os::raw::c_void,
                            arg3: size_t);
    pub fn strcasestr(arg1: *const ::std::os::raw::c_char,
                      arg2: *const ::std::os::raw::c_char)
     -> *mut ::std::os::raw::c_char;
    pub fn strnstr(arg1: *const ::std::os::raw::c_char,
                   arg2: *const ::std::os::raw::c_char, arg3: size_t)
     -> *mut ::std::os::raw::c_char;
    pub fn strlcat(arg1: *mut ::std::os::raw::c_char,
                   arg2: *const ::std::os::raw::c_char, arg3: size_t)
     -> ::std::os::raw::c_ulong;
    pub fn strlcpy(arg1: *mut ::std::os::raw::c_char,
                   arg2: *const ::std::os::raw::c_char, arg3: size_t)
     -> ::std::os::raw::c_ulong;
    pub fn strmode(arg1: ::std::os::raw::c_int,
                   arg2: *mut ::std::os::raw::c_char);
    pub fn strsep(arg1: *mut *mut ::std::os::raw::c_char,
                  arg2: *const ::std::os::raw::c_char)
     -> *mut ::std::os::raw::c_char;
    pub fn swab(arg1: *const ::std::os::raw::c_void,
                arg2: *mut ::std::os::raw::c_void, arg3: ssize_t);
    pub fn bcmp(arg1: *const ::std::os::raw::c_void,
                arg2: *const ::std::os::raw::c_void, arg3: size_t)
     -> ::std::os::raw::c_int;
    pub fn bcopy(arg1: *const ::std::os::raw::c_void,
                 arg2: *mut ::std::os::raw::c_void, arg3: size_t);
    pub fn bzero(arg1: *mut ::std::os::raw::c_void, arg2: size_t);
    pub fn index(arg1: *const ::std::os::raw::c_char,
                 arg2: ::std::os::raw::c_int) -> *mut ::std::os::raw::c_char;
    pub fn rindex(arg1: *const ::std::os::raw::c_char,
                  arg2: ::std::os::raw::c_int) -> *mut ::std::os::raw::c_char;
    pub fn ffs(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
    pub fn strcasecmp(arg1: *const ::std::os::raw::c_char,
                      arg2: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
    pub fn strncasecmp(arg1: *const ::std::os::raw::c_char,
                       arg2: *const ::std::os::raw::c_char, arg3: size_t)
     -> ::std::os::raw::c_int;
    pub fn ffsl(arg1: ::std::os::raw::c_long) -> ::std::os::raw::c_int;
    pub fn ffsll(arg1: ::std::os::raw::c_longlong) -> ::std::os::raw::c_int;
    pub fn fls(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
    pub fn flsl(arg1: ::std::os::raw::c_long) -> ::std::os::raw::c_int;
    pub fn flsll(arg1: ::std::os::raw::c_longlong) -> ::std::os::raw::c_int;
    pub fn asctime(arg1: *const Struct_tm) -> *mut ::std::os::raw::c_char;
    pub fn clock() -> clock_t;
    pub fn ctime(arg1: *const time_t) -> *mut ::std::os::raw::c_char;
    pub fn difftime(arg1: time_t, arg2: time_t) -> ::std::os::raw::c_double;
    pub fn getdate(arg1: *const ::std::os::raw::c_char) -> *mut Struct_tm;
    pub fn gmtime(arg1: *const time_t) -> *mut Struct_tm;
    pub fn localtime(arg1: *const time_t) -> *mut Struct_tm;
    pub fn mktime(arg1: *mut Struct_tm) -> time_t;
    pub fn strftime(arg1: *mut ::std::os::raw::c_char, arg2: size_t,
                    arg3: *const ::std::os::raw::c_char,
                    arg4: *const Struct_tm) -> size_t;
    pub fn strptime(arg1: *const ::std::os::raw::c_char,
                    arg2: *const ::std::os::raw::c_char, arg3: *mut Struct_tm)
     -> *mut ::std::os::raw::c_char;
    pub fn time(arg1: *mut time_t) -> time_t;
    pub fn tzset();
    pub fn asctime_r(arg1: *const Struct_tm,
                     arg2: *mut ::std::os::raw::c_char)
     -> *mut ::std::os::raw::c_char;
    pub fn ctime_r(arg1: *const time_t, arg2: *mut ::std::os::raw::c_char)
     -> *mut ::std::os::raw::c_char;
    pub fn gmtime_r(arg1: *const time_t, arg2: *mut Struct_tm)
     -> *mut Struct_tm;
    pub fn localtime_r(arg1: *const time_t, arg2: *mut Struct_tm)
     -> *mut Struct_tm;
    pub fn posix2time(arg1: time_t) -> time_t;
    pub fn tzsetwall();
    pub fn time2posix(arg1: time_t) -> time_t;
    pub fn timelocal(arg1: *mut Struct_tm) -> time_t;
    pub fn timegm(arg1: *mut Struct_tm) -> time_t;
    pub fn nanosleep(arg1: *const Struct_timespec, arg2: *mut Struct_timespec)
     -> ::std::os::raw::c_int;
    pub fn __math_errhandling() -> ::std::os::raw::c_int;
    pub fn __fpclassifyf(arg1: ::std::os::raw::c_float)
     -> ::std::os::raw::c_int;
    pub fn __fpclassifyd(arg1: ::std::os::raw::c_double)
     -> ::std::os::raw::c_int;
    pub fn __fpclassifyl(arg1: ::std::os::raw::c_double)
     -> ::std::os::raw::c_int;
    pub fn __inline_isfinitef(__x: ::std::os::raw::c_float)
     -> ::std::os::raw::c_int;
    pub fn __inline_isfinited(__x: ::std::os::raw::c_double)
     -> ::std::os::raw::c_int;
    pub fn __inline_isfinitel(__x: ::std::os::raw::c_double)
     -> ::std::os::raw::c_int;
    pub fn __inline_isinff(__x: ::std::os::raw::c_float)
     -> ::std::os::raw::c_int;
    pub fn __inline_isinfd(__x: ::std::os::raw::c_double)
     -> ::std::os::raw::c_int;
    pub fn __inline_isinfl(__x: ::std::os::raw::c_double)
     -> ::std::os::raw::c_int;
    pub fn __inline_isnanf(__x: ::std::os::raw::c_float)
     -> ::std::os::raw::c_int;
    pub fn __inline_isnand(__x: ::std::os::raw::c_double)
     -> ::std::os::raw::c_int;
    pub fn __inline_isnanl(__x: ::std::os::raw::c_double)
     -> ::std::os::raw::c_int;
    pub fn __inline_isnormalf(__x: ::std::os::raw::c_float)
     -> ::std::os::raw::c_int;
    pub fn __inline_isnormald(__x: ::std::os::raw::c_double)
     -> ::std::os::raw::c_int;
    pub fn __inline_isnormall(__x: ::std::os::raw::c_double)
     -> ::std::os::raw::c_int;
    pub fn __inline_signbitf(__x: ::std::os::raw::c_float)
     -> ::std::os::raw::c_int;
    pub fn __inline_signbitd(__x: ::std::os::raw::c_double)
     -> ::std::os::raw::c_int;
    pub fn __inline_signbitl(__x: ::std::os::raw::c_double)
     -> ::std::os::raw::c_int;
    pub fn acosf(arg1: ::std::os::raw::c_float) -> ::std::os::raw::c_float;
    pub fn acos(arg1: ::std::os::raw::c_double) -> ::std::os::raw::c_double;
    pub fn acosl(arg1: ::std::os::raw::c_double) -> ::std::os::raw::c_double;
    pub fn asinf(arg1: ::std::os::raw::c_float) -> ::std::os::raw::c_float;
    pub fn asin(arg1: ::std::os::raw::c_double) -> ::std::os::raw::c_double;
    pub fn asinl(arg1: ::std::os::raw::c_double) -> ::std::os::raw::c_double;
    pub fn atanf(arg1: ::std::os::raw::c_float) -> ::std::os::raw::c_float;
    pub fn atan(arg1: ::std::os::raw::c_double) -> ::std::os::raw::c_double;
    pub fn atanl(arg1: ::std::os::raw::c_double) -> ::std::os::raw::c_double;
    pub fn atan2f(arg1: ::std::os::raw::c_float,
                  arg2: ::std::os::raw::c_float) -> ::std::os::raw::c_float;
    pub fn atan2(arg1: ::std::os::raw::c_double,
                 arg2: ::std::os::raw::c_double) -> ::std::os::raw::c_double;
    pub fn atan2l(arg1: ::std::os::raw::c_double,
                  arg2: ::std::os::raw::c_double) -> ::std::os::raw::c_double;
    pub fn cosf(arg1: ::std::os::raw::c_float) -> ::std::os::raw::c_float;
    pub fn cos(arg1: ::std::os::raw::c_double) -> ::std::os::raw::c_double;
    pub fn cosl(arg1: ::std::os::raw::c_double) -> ::std::os::raw::c_double;
    pub fn sinf(arg1: ::std::os::raw::c_float) -> ::std::os::raw::c_float;
    pub fn sin(arg1: ::std::os::raw::c_double) -> ::std::os::raw::c_double;
    pub fn sinl(arg1: ::std::os::raw::c_double) -> ::std::os::raw::c_double;
    pub fn tanf(arg1: ::std::os::raw::c_float) -> ::std::os::raw::c_float;
    pub fn tan(arg1: ::std::os::raw::c_double) -> ::std::os::raw::c_double;
    pub fn tanl(arg1: ::std::os::raw::c_double) -> ::std::os::raw::c_double;
    pub fn acoshf(arg1: ::std::os::raw::c_float) -> ::std::os::raw::c_float;
    pub fn acosh(arg1: ::std::os::raw::c_double) -> ::std::os::raw::c_double;
    pub fn acoshl(arg1: ::std::os::raw::c_double) -> ::std::os::raw::c_double;
    pub fn asinhf(arg1: ::std::os::raw::c_float) -> ::std::os::raw::c_float;
    pub fn asinh(arg1: ::std::os::raw::c_double) -> ::std::os::raw::c_double;
    pub fn asinhl(arg1: ::std::os::raw::c_double) -> ::std::os::raw::c_double;
    pub fn atanhf(arg1: ::std::os::raw::c_float) -> ::std::os::raw::c_float;
    pub fn atanh(arg1: ::std::os::raw::c_double) -> ::std::os::raw::c_double;
    pub fn atanhl(arg1: ::std::os::raw::c_double) -> ::std::os::raw::c_double;
    pub fn coshf(arg1: ::std::os::raw::c_float) -> ::std::os::raw::c_float;
    pub fn cosh(arg1: ::std::os::raw::c_double) -> ::std::os::raw::c_double;
    pub fn coshl(arg1: ::std::os::raw::c_double) -> ::std::os::raw::c_double;
    pub fn sinhf(arg1: ::std::os::raw::c_float) -> ::std::os::raw::c_float;
    pub fn sinh(arg1: ::std::os::raw::c_double) -> ::std::os::raw::c_double;
    pub fn sinhl(arg1: ::std::os::raw::c_double) -> ::std::os::raw::c_double;
    pub fn tanhf(arg1: ::std::os::raw::c_float) -> ::std::os::raw::c_float;
    pub fn tanh(arg1: ::std::os::raw::c_double) -> ::std::os::raw::c_double;
    pub fn tanhl(arg1: ::std::os::raw::c_double) -> ::std::os::raw::c_double;
    pub fn expf(arg1: ::std::os::raw::c_float) -> ::std::os::raw::c_float;
    pub fn exp(arg1: ::std::os::raw::c_double) -> ::std::os::raw::c_double;
    pub fn expl(arg1: ::std::os::raw::c_double) -> ::std::os::raw::c_double;
    pub fn exp2f(arg1: ::std::os::raw::c_float) -> ::std::os::raw::c_float;
    pub fn exp2(arg1: ::std::os::raw::c_double) -> ::std::os::raw::c_double;
    pub fn exp2l(arg1: ::std::os::raw::c_double) -> ::std::os::raw::c_double;
    pub fn expm1f(arg1: ::std::os::raw::c_float) -> ::std::os::raw::c_float;
    pub fn expm1(arg1: ::std::os::raw::c_double) -> ::std::os::raw::c_double;
    pub fn expm1l(arg1: ::std::os::raw::c_double) -> ::std::os::raw::c_double;
    pub fn logf(arg1: ::std::os::raw::c_float) -> ::std::os::raw::c_float;
    pub fn log(arg1: ::std::os::raw::c_double) -> ::std::os::raw::c_double;
    pub fn logl(arg1: ::std::os::raw::c_double) -> ::std::os::raw::c_double;
    pub fn log10f(arg1: ::std::os::raw::c_float) -> ::std::os::raw::c_float;
    pub fn log10(arg1: ::std::os::raw::c_double) -> ::std::os::raw::c_double;
    pub fn log10l(arg1: ::std::os::raw::c_double) -> ::std::os::raw::c_double;
    pub fn log2f(arg1: ::std::os::raw::c_float) -> ::std::os::raw::c_float;
    pub fn log2(arg1: ::std::os::raw::c_double) -> ::std::os::raw::c_double;
    pub fn log2l(arg1: ::std::os::raw::c_double) -> ::std::os::raw::c_double;
    pub fn log1pf(arg1: ::std::os::raw::c_float) -> ::std::os::raw::c_float;
    pub fn log1p(arg1: ::std::os::raw::c_double) -> ::std::os::raw::c_double;
    pub fn log1pl(arg1: ::std::os::raw::c_double) -> ::std::os::raw::c_double;
    pub fn logbf(arg1: ::std::os::raw::c_float) -> ::std::os::raw::c_float;
    pub fn logb(arg1: ::std::os::raw::c_double) -> ::std::os::raw::c_double;
    pub fn logbl(arg1: ::std::os::raw::c_double) -> ::std::os::raw::c_double;
    pub fn modff(arg1: ::std::os::raw::c_float,
                 arg2: *mut ::std::os::raw::c_float)
     -> ::std::os::raw::c_float;
    pub fn modf(arg1: ::std::os::raw::c_double,
                arg2: *mut ::std::os::raw::c_double)
     -> ::std::os::raw::c_double;
    pub fn modfl(arg1: ::std::os::raw::c_double,
                 arg2: *mut ::std::os::raw::c_double)
     -> ::std::os::raw::c_double;
    pub fn ldexpf(arg1: ::std::os::raw::c_float, arg2: ::std::os::raw::c_int)
     -> ::std::os::raw::c_float;
    pub fn ldexp(arg1: ::std::os::raw::c_double, arg2: ::std::os::raw::c_int)
     -> ::std::os::raw::c_double;
    pub fn ldexpl(arg1: ::std::os::raw::c_double, arg2: ::std::os::raw::c_int)
     -> ::std::os::raw::c_double;
    pub fn frexpf(arg1: ::std::os::raw::c_float,
                  arg2: *mut ::std::os::raw::c_int)
     -> ::std::os::raw::c_float;
    pub fn frexp(arg1: ::std::os::raw::c_double,
                 arg2: *mut ::std::os::raw::c_int)
     -> ::std::os::raw::c_double;
    pub fn frexpl(arg1: ::std::os::raw::c_double,
                  arg2: *mut ::std::os::raw::c_int)
     -> ::std::os::raw::c_double;
    pub fn ilogbf(arg1: ::std::os::raw::c_float) -> ::std::os::raw::c_int;
    pub fn ilogb(arg1: ::std::os::raw::c_double) -> ::std::os::raw::c_int;
    pub fn ilogbl(arg1: ::std::os::raw::c_double) -> ::std::os::raw::c_int;
    pub fn scalbnf(arg1: ::std::os::raw::c_float, arg2: ::std::os::raw::c_int)
     -> ::std::os::raw::c_float;
    pub fn scalbn(arg1: ::std::os::raw::c_double, arg2: ::std::os::raw::c_int)
     -> ::std::os::raw::c_double;
    pub fn scalbnl(arg1: ::std::os::raw::c_double,
                   arg2: ::std::os::raw::c_int) -> ::std::os::raw::c_double;
    pub fn scalblnf(arg1: ::std::os::raw::c_float,
                    arg2: ::std::os::raw::c_long) -> ::std::os::raw::c_float;
    pub fn scalbln(arg1: ::std::os::raw::c_double,
                   arg2: ::std::os::raw::c_long) -> ::std::os::raw::c_double;
    pub fn scalblnl(arg1: ::std::os::raw::c_double,
                    arg2: ::std::os::raw::c_long) -> ::std::os::raw::c_double;
    pub fn fabsf(arg1: ::std::os::raw::c_float) -> ::std::os::raw::c_float;
    pub fn fabs(arg1: ::std::os::raw::c_double) -> ::std::os::raw::c_double;
    pub fn fabsl(arg1: ::std::os::raw::c_double) -> ::std::os::raw::c_double;
    pub fn cbrtf(arg1: ::std::os::raw::c_float) -> ::std::os::raw::c_float;
    pub fn cbrt(arg1: ::std::os::raw::c_double) -> ::std::os::raw::c_double;
    pub fn cbrtl(arg1: ::std::os::raw::c_double) -> ::std::os::raw::c_double;
    pub fn hypotf(arg1: ::std::os::raw::c_float,
                  arg2: ::std::os::raw::c_float) -> ::std::os::raw::c_float;
    pub fn hypot(arg1: ::std::os::raw::c_double,
                 arg2: ::std::os::raw::c_double) -> ::std::os::raw::c_double;
    pub fn hypotl(arg1: ::std::os::raw::c_double,
                  arg2: ::std::os::raw::c_double) -> ::std::os::raw::c_double;
    pub fn powf(arg1: ::std::os::raw::c_float, arg2: ::std::os::raw::c_float)
     -> ::std::os::raw::c_float;
    pub fn pow(arg1: ::std::os::raw::c_double, arg2: ::std::os::raw::c_double)
     -> ::std::os::raw::c_double;
    pub fn powl(arg1: ::std::os::raw::c_double,
                arg2: ::std::os::raw::c_double) -> ::std::os::raw::c_double;
    pub fn sqrtf(arg1: ::std::os::raw::c_float) -> ::std::os::raw::c_float;
    pub fn sqrt(arg1: ::std::os::raw::c_double) -> ::std::os::raw::c_double;
    pub fn sqrtl(arg1: ::std::os::raw::c_double) -> ::std::os::raw::c_double;
    pub fn erff(arg1: ::std::os::raw::c_float) -> ::std::os::raw::c_float;
    pub fn erf(arg1: ::std::os::raw::c_double) -> ::std::os::raw::c_double;
    pub fn erfl(arg1: ::std::os::raw::c_double) -> ::std::os::raw::c_double;
    pub fn erfcf(arg1: ::std::os::raw::c_float) -> ::std::os::raw::c_float;
    pub fn erfc(arg1: ::std::os::raw::c_double) -> ::std::os::raw::c_double;
    pub fn erfcl(arg1: ::std::os::raw::c_double) -> ::std::os::raw::c_double;
    pub fn lgammaf(arg1: ::std::os::raw::c_float) -> ::std::os::raw::c_float;
    pub fn lgamma(arg1: ::std::os::raw::c_double) -> ::std::os::raw::c_double;
    pub fn lgammal(arg1: ::std::os::raw::c_double)
     -> ::std::os::raw::c_double;
    pub fn tgammaf(arg1: ::std::os::raw::c_float) -> ::std::os::raw::c_float;
    pub fn tgamma(arg1: ::std::os::raw::c_double) -> ::std::os::raw::c_double;
    pub fn tgammal(arg1: ::std::os::raw::c_double)
     -> ::std::os::raw::c_double;
    pub fn ceilf(arg1: ::std::os::raw::c_float) -> ::std::os::raw::c_float;
    pub fn ceil(arg1: ::std::os::raw::c_double) -> ::std::os::raw::c_double;
    pub fn ceill(arg1: ::std::os::raw::c_double) -> ::std::os::raw::c_double;
    pub fn floorf(arg1: ::std::os::raw::c_float) -> ::std::os::raw::c_float;
    pub fn floor(arg1: ::std::os::raw::c_double) -> ::std::os::raw::c_double;
    pub fn floorl(arg1: ::std::os::raw::c_double) -> ::std::os::raw::c_double;
    pub fn nearbyintf(arg1: ::std::os::raw::c_float)
     -> ::std::os::raw::c_float;
    pub fn nearbyint(arg1: ::std::os::raw::c_double)
     -> ::std::os::raw::c_double;
    pub fn nearbyintl(arg1: ::std::os::raw::c_double)
     -> ::std::os::raw::c_double;
    pub fn rintf(arg1: ::std::os::raw::c_float) -> ::std::os::raw::c_float;
    pub fn rint(arg1: ::std::os::raw::c_double) -> ::std::os::raw::c_double;
    pub fn rintl(arg1: ::std::os::raw::c_double) -> ::std::os::raw::c_double;
    pub fn lrintf(arg1: ::std::os::raw::c_float) -> ::std::os::raw::c_long;
    pub fn lrint(arg1: ::std::os::raw::c_double) -> ::std::os::raw::c_long;
    pub fn lrintl(arg1: ::std::os::raw::c_double) -> ::std::os::raw::c_long;
    pub fn roundf(arg1: ::std::os::raw::c_float) -> ::std::os::raw::c_float;
    pub fn round(arg1: ::std::os::raw::c_double) -> ::std::os::raw::c_double;
    pub fn roundl(arg1: ::std::os::raw::c_double) -> ::std::os::raw::c_double;
    pub fn lroundf(arg1: ::std::os::raw::c_float) -> ::std::os::raw::c_long;
    pub fn lround(arg1: ::std::os::raw::c_double) -> ::std::os::raw::c_long;
    pub fn lroundl(arg1: ::std::os::raw::c_double) -> ::std::os::raw::c_long;
    pub fn llrintf(arg1: ::std::os::raw::c_float)
     -> ::std::os::raw::c_longlong;
    pub fn llrint(arg1: ::std::os::raw::c_double)
     -> ::std::os::raw::c_longlong;
    pub fn llrintl(arg1: ::std::os::raw::c_double)
     -> ::std::os::raw::c_longlong;
    pub fn llroundf(arg1: ::std::os::raw::c_float)
     -> ::std::os::raw::c_longlong;
    pub fn llround(arg1: ::std::os::raw::c_double)
     -> ::std::os::raw::c_longlong;
    pub fn llroundl(arg1: ::std::os::raw::c_double)
     -> ::std::os::raw::c_longlong;
    pub fn truncf(arg1: ::std::os::raw::c_float) -> ::std::os::raw::c_float;
    pub fn trunc(arg1: ::std::os::raw::c_double) -> ::std::os::raw::c_double;
    pub fn truncl(arg1: ::std::os::raw::c_double) -> ::std::os::raw::c_double;
    pub fn fmodf(arg1: ::std::os::raw::c_float, arg2: ::std::os::raw::c_float)
     -> ::std::os::raw::c_float;
    pub fn fmod(arg1: ::std::os::raw::c_double,
                arg2: ::std::os::raw::c_double) -> ::std::os::raw::c_double;
    pub fn fmodl(arg1: ::std::os::raw::c_double,
                 arg2: ::std::os::raw::c_double) -> ::std::os::raw::c_double;
    pub fn remainderf(arg1: ::std::os::raw::c_float,
                      arg2: ::std::os::raw::c_float)
     -> ::std::os::raw::c_float;
    pub fn remainder(arg1: ::std::os::raw::c_double,
                     arg2: ::std::os::raw::c_double)
     -> ::std::os::raw::c_double;
    pub fn remainderl(arg1: ::std::os::raw::c_double,
                      arg2: ::std::os::raw::c_double)
     -> ::std::os::raw::c_double;
    pub fn remquof(arg1: ::std::os::raw::c_float,
                   arg2: ::std::os::raw::c_float,
                   arg3: *mut ::std::os::raw::c_int)
     -> ::std::os::raw::c_float;
    pub fn remquo(arg1: ::std::os::raw::c_double,
                  arg2: ::std::os::raw::c_double,
                  arg3: *mut ::std::os::raw::c_int)
     -> ::std::os::raw::c_double;
    pub fn remquol(arg1: ::std::os::raw::c_double,
                   arg2: ::std::os::raw::c_double,
                   arg3: *mut ::std::os::raw::c_int)
     -> ::std::os::raw::c_double;
    pub fn copysignf(arg1: ::std::os::raw::c_float,
                     arg2: ::std::os::raw::c_float)
     -> ::std::os::raw::c_float;
    pub fn copysign(arg1: ::std::os::raw::c_double,
                    arg2: ::std::os::raw::c_double)
     -> ::std::os::raw::c_double;
    pub fn copysignl(arg1: ::std::os::raw::c_double,
                     arg2: ::std::os::raw::c_double)
     -> ::std::os::raw::c_double;
    pub fn nanf(arg1: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_float;
    pub fn nan(arg1: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_double;
    pub fn nanl(arg1: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_double;
    pub fn nextafterf(arg1: ::std::os::raw::c_float,
                      arg2: ::std::os::raw::c_float)
     -> ::std::os::raw::c_float;
    pub fn nextafter(arg1: ::std::os::raw::c_double,
                     arg2: ::std::os::raw::c_double)
     -> ::std::os::raw::c_double;
    pub fn nextafterl(arg1: ::std::os::raw::c_double,
                      arg2: ::std::os::raw::c_double)
     -> ::std::os::raw::c_double;
    pub fn nexttoward(arg1: ::std::os::raw::c_double,
                      arg2: ::std::os::raw::c_double)
     -> ::std::os::raw::c_double;
    pub fn nexttowardf(arg1: ::std::os::raw::c_float,
                       arg2: ::std::os::raw::c_double)
     -> ::std::os::raw::c_float;
    pub fn nexttowardl(arg1: ::std::os::raw::c_double,
                       arg2: ::std::os::raw::c_double)
     -> ::std::os::raw::c_double;
    pub fn fdimf(arg1: ::std::os::raw::c_float, arg2: ::std::os::raw::c_float)
     -> ::std::os::raw::c_float;
    pub fn fdim(arg1: ::std::os::raw::c_double,
                arg2: ::std::os::raw::c_double) -> ::std::os::raw::c_double;
    pub fn fdiml(arg1: ::std::os::raw::c_double,
                 arg2: ::std::os::raw::c_double) -> ::std::os::raw::c_double;
    pub fn fmaxf(arg1: ::std::os::raw::c_float, arg2: ::std::os::raw::c_float)
     -> ::std::os::raw::c_float;
    pub fn fmax(arg1: ::std::os::raw::c_double,
                arg2: ::std::os::raw::c_double) -> ::std::os::raw::c_double;
    pub fn fmaxl(arg1: ::std::os::raw::c_double,
                 arg2: ::std::os::raw::c_double) -> ::std::os::raw::c_double;
    pub fn fminf(arg1: ::std::os::raw::c_float, arg2: ::std::os::raw::c_float)
     -> ::std::os::raw::c_float;
    pub fn fmin(arg1: ::std::os::raw::c_double,
                arg2: ::std::os::raw::c_double) -> ::std::os::raw::c_double;
    pub fn fminl(arg1: ::std::os::raw::c_double,
                 arg2: ::std::os::raw::c_double) -> ::std::os::raw::c_double;
    pub fn fmaf(arg1: ::std::os::raw::c_float, arg2: ::std::os::raw::c_float,
                arg3: ::std::os::raw::c_float) -> ::std::os::raw::c_float;
    pub fn fma(arg1: ::std::os::raw::c_double, arg2: ::std::os::raw::c_double,
               arg3: ::std::os::raw::c_double) -> ::std::os::raw::c_double;
    pub fn fmal(arg1: ::std::os::raw::c_double,
                arg2: ::std::os::raw::c_double,
                arg3: ::std::os::raw::c_double) -> ::std::os::raw::c_double;
    pub fn __inff() -> ::std::os::raw::c_float;
    pub fn __inf() -> ::std::os::raw::c_double;
    pub fn __infl() -> ::std::os::raw::c_double;
    pub fn __nan() -> ::std::os::raw::c_float;
    pub fn __exp10f(arg1: ::std::os::raw::c_float) -> ::std::os::raw::c_float;
    pub fn __exp10(arg1: ::std::os::raw::c_double)
     -> ::std::os::raw::c_double;
    pub fn __sincosf(__x: ::std::os::raw::c_float,
                     __sinp: *mut ::std::os::raw::c_float,
                     __cosp: *mut ::std::os::raw::c_float);
    pub fn __sincos(__x: ::std::os::raw::c_double,
                    __sinp: *mut ::std::os::raw::c_double,
                    __cosp: *mut ::std::os::raw::c_double);
    pub fn __cospif(arg1: ::std::os::raw::c_float) -> ::std::os::raw::c_float;
    pub fn __cospi(arg1: ::std::os::raw::c_double)
     -> ::std::os::raw::c_double;
    pub fn __sinpif(arg1: ::std::os::raw::c_float) -> ::std::os::raw::c_float;
    pub fn __sinpi(arg1: ::std::os::raw::c_double)
     -> ::std::os::raw::c_double;
    pub fn __tanpif(arg1: ::std::os::raw::c_float) -> ::std::os::raw::c_float;
    pub fn __tanpi(arg1: ::std::os::raw::c_double)
     -> ::std::os::raw::c_double;
    pub fn __sincospif(__x: ::std::os::raw::c_float,
                       __sinp: *mut ::std::os::raw::c_float,
                       __cosp: *mut ::std::os::raw::c_float);
    pub fn __sincospi(__x: ::std::os::raw::c_double,
                      __sinp: *mut ::std::os::raw::c_double,
                      __cosp: *mut ::std::os::raw::c_double);
    pub fn __sincosf_stret(arg1: ::std::os::raw::c_float) -> Struct___float2;
    pub fn __sincos_stret(arg1: ::std::os::raw::c_double) -> Struct___double2;
    pub fn __sincospif_stret(arg1: ::std::os::raw::c_float)
     -> Struct___float2;
    pub fn __sincospi_stret(arg1: ::std::os::raw::c_double)
     -> Struct___double2;
    pub fn j0(arg1: ::std::os::raw::c_double) -> ::std::os::raw::c_double;
    pub fn j1(arg1: ::std::os::raw::c_double) -> ::std::os::raw::c_double;
    pub fn jn(arg1: ::std::os::raw::c_int, arg2: ::std::os::raw::c_double)
     -> ::std::os::raw::c_double;
    pub fn y0(arg1: ::std::os::raw::c_double) -> ::std::os::raw::c_double;
    pub fn y1(arg1: ::std::os::raw::c_double) -> ::std::os::raw::c_double;
    pub fn yn(arg1: ::std::os::raw::c_int, arg2: ::std::os::raw::c_double)
     -> ::std::os::raw::c_double;
    pub fn scalb(arg1: ::std::os::raw::c_double,
                 arg2: ::std::os::raw::c_double) -> ::std::os::raw::c_double;
    pub fn rinttol(arg1: ::std::os::raw::c_double) -> ::std::os::raw::c_long;
    pub fn roundtol(arg1: ::std::os::raw::c_double) -> ::std::os::raw::c_long;
    pub fn drem(arg1: ::std::os::raw::c_double,
                arg2: ::std::os::raw::c_double) -> ::std::os::raw::c_double;
    pub fn finite(arg1: ::std::os::raw::c_double) -> ::std::os::raw::c_int;
    pub fn gamma(arg1: ::std::os::raw::c_double) -> ::std::os::raw::c_double;
    pub fn significand(arg1: ::std::os::raw::c_double)
     -> ::std::os::raw::c_double;
    pub fn matherr(arg1: *mut Struct_exception) -> ::std::os::raw::c_int;
    pub fn raise(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
    pub fn bsd_signal(arg1: ::std::os::raw::c_int,
                      arg2:
                          ::std::option::Option<extern "C" fn(arg1:
                                                                  ::std::os::raw::c_int)>)
     ->
         ::std::option::Option<extern "C" fn(arg1: ::std::os::raw::c_int,
                                             arg2:
                                                 ::std::option::Option<extern "C" fn(arg1:
                                                                                         ::std::os::raw::c_int)>)>;
    pub fn kill(arg1: pid_t, arg2: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
    pub fn killpg(arg1: pid_t, arg2: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
    pub fn pthread_kill(arg1: pthread_t, arg2: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
    pub fn pthread_sigmask(arg1: ::std::os::raw::c_int, arg2: *const sigset_t,
                           arg3: *mut sigset_t) -> ::std::os::raw::c_int;
    pub fn sigaction(arg1: ::std::os::raw::c_int,
                     arg2: *const Struct_sigaction,
                     arg3: *mut Struct_sigaction) -> ::std::os::raw::c_int;
    pub fn sigaddset(arg1: *mut sigset_t, arg2: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
    pub fn sigaltstack(arg1: *const stack_t, arg2: *mut stack_t)
     -> ::std::os::raw::c_int;
    pub fn sigdelset(arg1: *mut sigset_t, arg2: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
    pub fn sigemptyset(arg1: *mut sigset_t) -> ::std::os::raw::c_int;
    pub fn sigfillset(arg1: *mut sigset_t) -> ::std::os::raw::c_int;
    pub fn sighold(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
    pub fn sigignore(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
    pub fn siginterrupt(arg1: ::std::os::raw::c_int,
                        arg2: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
    pub fn sigismember(arg1: *const sigset_t, arg2: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
    pub fn sigpause(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
    pub fn sigpending(arg1: *mut sigset_t) -> ::std::os::raw::c_int;
    pub fn sigprocmask(arg1: ::std::os::raw::c_int, arg2: *const sigset_t,
                       arg3: *mut sigset_t) -> ::std::os::raw::c_int;
    pub fn sigrelse(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
    pub fn sigset(arg1: ::std::os::raw::c_int,
                  arg2:
                      ::std::option::Option<extern "C" fn(arg1:
                                                              ::std::os::raw::c_int)>)
     ->
         ::std::option::Option<extern "C" fn(arg1: ::std::os::raw::c_int,
                                             arg2:
                                                 ::std::option::Option<extern "C" fn(arg1:
                                                                                         ::std::os::raw::c_int)>)>;
    pub fn sigsuspend(arg1: *const sigset_t) -> ::std::os::raw::c_int;
    pub fn sigwait(arg1: *const sigset_t, arg2: *mut ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
    pub fn psignal(arg1: ::std::os::raw::c_uint,
                   arg2: *const ::std::os::raw::c_char);
    pub fn sigblock(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
    pub fn sigsetmask(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
    pub fn sigvec(arg1: ::std::os::raw::c_int, arg2: *mut Struct_sigvec,
                  arg3: *mut Struct_sigvec) -> ::std::os::raw::c_int;
    pub fn __sigbits(__signo: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
    pub fn setjmp(arg1: jmp_buf) -> ::std::os::raw::c_int;
    pub fn longjmp(arg1: jmp_buf, arg2: ::std::os::raw::c_int);
    pub fn _setjmp(arg1: jmp_buf) -> ::std::os::raw::c_int;
    pub fn _longjmp(arg1: jmp_buf, arg2: ::std::os::raw::c_int);
    pub fn sigsetjmp(arg1: sigjmp_buf, arg2: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
    pub fn siglongjmp(arg1: sigjmp_buf, arg2: ::std::os::raw::c_int);
    pub fn longjmperror();
    pub fn __assert_rtn(arg1: *const ::std::os::raw::c_char,
                        arg2: *const ::std::os::raw::c_char,
                        arg3: ::std::os::raw::c_int,
                        arg4: *const ::std::os::raw::c_char);
    pub fn open(arg1: *const ::std::os::raw::c_char,
                arg2: ::std::os::raw::c_int, ...) -> ::std::os::raw::c_int;
    pub fn openat(arg1: ::std::os::raw::c_int,
                  arg2: *const ::std::os::raw::c_char,
                  arg3: ::std::os::raw::c_int, ...) -> ::std::os::raw::c_int;
    pub fn creat(arg1: *const ::std::os::raw::c_char, arg2: mode_t)
     -> ::std::os::raw::c_int;
    pub fn fcntl(arg1: ::std::os::raw::c_int,
                 arg2: ::std::os::raw::c_int, ...) -> ::std::os::raw::c_int;
    pub fn openx_np(arg1: *const ::std::os::raw::c_char,
                    arg2: ::std::os::raw::c_int, arg3: filesec_t)
     -> ::std::os::raw::c_int;
    pub fn open_dprotected_np(arg1: *const ::std::os::raw::c_char,
                              arg2: ::std::os::raw::c_int,
                              arg3: ::std::os::raw::c_int,
                              arg4: ::std::os::raw::c_int, ...)
     -> ::std::os::raw::c_int;
    pub fn flock(arg1: ::std::os::raw::c_int, arg2: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
    pub fn filesec_init() -> filesec_t;
    pub fn filesec_dup(arg1: filesec_t) -> filesec_t;
    pub fn filesec_free(arg1: filesec_t);
    pub fn filesec_get_property(arg1: filesec_t, arg2: filesec_property_t,
                                arg3: *mut ::std::os::raw::c_void)
     -> ::std::os::raw::c_int;
    pub fn filesec_query_property(arg1: filesec_t, arg2: filesec_property_t,
                                  arg3: *mut ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
    pub fn filesec_set_property(arg1: filesec_t, arg2: filesec_property_t,
                                arg3: *const ::std::os::raw::c_void)
     -> ::std::os::raw::c_int;
    pub fn filesec_unset_property(arg1: filesec_t, arg2: filesec_property_t)
     -> ::std::os::raw::c_int;
    pub fn accept(arg1: ::std::os::raw::c_int, arg2: *mut Struct_sockaddr,
                  arg3: *mut socklen_t) -> ::std::os::raw::c_int;
    pub fn bind(arg1: ::std::os::raw::c_int, arg2: *const Struct_sockaddr,
                arg3: socklen_t) -> ::std::os::raw::c_int;
    pub fn connect(arg1: ::std::os::raw::c_int, arg2: *const Struct_sockaddr,
                   arg3: socklen_t) -> ::std::os::raw::c_int;
    pub fn getpeername(arg1: ::std::os::raw::c_int,
                       arg2: *mut Struct_sockaddr, arg3: *mut socklen_t)
     -> ::std::os::raw::c_int;
    pub fn getsockname(arg1: ::std::os::raw::c_int,
                       arg2: *mut Struct_sockaddr, arg3: *mut socklen_t)
     -> ::std::os::raw::c_int;
    pub fn getsockopt(arg1: ::std::os::raw::c_int,
                      arg2: ::std::os::raw::c_int,
                      arg3: ::std::os::raw::c_int,
                      arg4: *mut ::std::os::raw::c_void, arg5: *mut socklen_t)
     -> ::std::os::raw::c_int;
    pub fn listen(arg1: ::std::os::raw::c_int, arg2: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
    pub fn recv(arg1: ::std::os::raw::c_int,
                arg2: *mut ::std::os::raw::c_void, arg3: size_t,
                arg4: ::std::os::raw::c_int) -> ssize_t;
    pub fn recvfrom(arg1: ::std::os::raw::c_int,
                    arg2: *mut ::std::os::raw::c_void, arg3: size_t,
                    arg4: ::std::os::raw::c_int, arg5: *mut Struct_sockaddr,
                    arg6: *mut socklen_t) -> ssize_t;
    pub fn recvmsg(arg1: ::std::os::raw::c_int, arg2: *mut Struct_msghdr,
                   arg3: ::std::os::raw::c_int) -> ssize_t;
    pub fn send(arg1: ::std::os::raw::c_int,
                arg2: *const ::std::os::raw::c_void, arg3: size_t,
                arg4: ::std::os::raw::c_int) -> ssize_t;
    pub fn sendmsg(arg1: ::std::os::raw::c_int, arg2: *const Struct_msghdr,
                   arg3: ::std::os::raw::c_int) -> ssize_t;
    pub fn sendto(arg1: ::std::os::raw::c_int,
                  arg2: *const ::std::os::raw::c_void, arg3: size_t,
                  arg4: ::std::os::raw::c_int, arg5: *const Struct_sockaddr,
                  arg6: socklen_t) -> ssize_t;
    pub fn setsockopt(arg1: ::std::os::raw::c_int,
                      arg2: ::std::os::raw::c_int,
                      arg3: ::std::os::raw::c_int,
                      arg4: *const ::std::os::raw::c_void, arg5: socklen_t)
     -> ::std::os::raw::c_int;
    pub fn shutdown(arg1: ::std::os::raw::c_int, arg2: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
    pub fn sockatmark(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
    pub fn socket(arg1: ::std::os::raw::c_int, arg2: ::std::os::raw::c_int,
                  arg3: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
    pub fn socketpair(arg1: ::std::os::raw::c_int,
                      arg2: ::std::os::raw::c_int,
                      arg3: ::std::os::raw::c_int,
                      arg4: *mut ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
    pub fn sendfile(arg1: ::std::os::raw::c_int, arg2: ::std::os::raw::c_int,
                    arg3: off_t, arg4: *mut off_t, arg5: *mut Struct_sf_hdtr,
                    arg6: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
    pub fn pfctlinput(arg1: ::std::os::raw::c_int,
                      arg2: *mut Struct_sockaddr);
    pub fn connectx(arg1: ::std::os::raw::c_int, arg2: *const sa_endpoints_t,
                    arg3: sae_associd_t, arg4: ::std::os::raw::c_uint,
                    arg5: *const Struct_iovec, arg6: ::std::os::raw::c_uint,
                    arg7: *mut size_t, arg8: *mut sae_connid_t)
     -> ::std::os::raw::c_int;
    pub fn disconnectx(arg1: ::std::os::raw::c_int, arg2: sae_associd_t,
                       arg3: sae_connid_t) -> ::std::os::raw::c_int;
    pub fn setipv4sourcefilter(arg1: ::std::os::raw::c_int,
                               arg2: Struct_in_addr, arg3: Struct_in_addr,
                               arg4: uint32_t, arg5: uint32_t,
                               arg6: *mut Struct_in_addr)
     -> ::std::os::raw::c_int;
    pub fn getipv4sourcefilter(arg1: ::std::os::raw::c_int,
                               arg2: Struct_in_addr, arg3: Struct_in_addr,
                               arg4: *mut uint32_t, arg5: *mut uint32_t,
                               arg6: *mut Struct_in_addr)
     -> ::std::os::raw::c_int;
    pub fn setsourcefilter(arg1: ::std::os::raw::c_int, arg2: uint32_t,
                           arg3: *mut Struct_sockaddr, arg4: socklen_t,
                           arg5: uint32_t, arg6: uint32_t,
                           arg7: *mut Struct_sockaddr_storage)
     -> ::std::os::raw::c_int;
    pub fn getsourcefilter(arg1: ::std::os::raw::c_int, arg2: uint32_t,
                           arg3: *mut Struct_sockaddr, arg4: socklen_t,
                           arg5: *mut uint32_t, arg6: *mut uint32_t,
                           arg7: *mut Struct_sockaddr_storage)
     -> ::std::os::raw::c_int;
    pub fn inet6_option_space(arg1: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
    pub fn inet6_option_init(arg1: *mut ::std::os::raw::c_void,
                             arg2: *mut *mut Struct_cmsghdr,
                             arg3: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
    pub fn inet6_option_append(arg1: *mut Struct_cmsghdr,
                               arg2: *const __uint8_t,
                               arg3: ::std::os::raw::c_int,
                               arg4: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
    pub fn inet6_option_alloc(arg1: *mut Struct_cmsghdr,
                              arg2: ::std::os::raw::c_int,
                              arg3: ::std::os::raw::c_int,
                              arg4: ::std::os::raw::c_int) -> *mut __uint8_t;
    pub fn inet6_option_next(arg1: *const Struct_cmsghdr,
                             arg2: *mut *mut __uint8_t)
     -> ::std::os::raw::c_int;
    pub fn inet6_option_find(arg1: *const Struct_cmsghdr,
                             arg2: *mut *mut __uint8_t,
                             arg3: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
    pub fn inet6_rthdr_space(arg1: ::std::os::raw::c_int,
                             arg2: ::std::os::raw::c_int) -> size_t;
    pub fn inet6_rthdr_init(arg1: *mut ::std::os::raw::c_void,
                            arg2: ::std::os::raw::c_int)
     -> *mut Struct_cmsghdr;
    pub fn inet6_rthdr_add(arg1: *mut Struct_cmsghdr,
                           arg2: *const Struct_in6_addr,
                           arg3: ::std::os::raw::c_uint)
     -> ::std::os::raw::c_int;
    pub fn inet6_rthdr_lasthop(arg1: *mut Struct_cmsghdr,
                               arg2: ::std::os::raw::c_uint)
     -> ::std::os::raw::c_int;
    pub fn inet6_rthdr_segments(arg1: *const Struct_cmsghdr)
     -> ::std::os::raw::c_int;
    pub fn inet6_rthdr_getaddr(arg1: *mut Struct_cmsghdr,
                               arg2: ::std::os::raw::c_int)
     -> *mut Struct_in6_addr;
    pub fn inet6_rthdr_getflags(arg1: *const Struct_cmsghdr,
                                arg2: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
    pub fn inet6_opt_init(arg1: *mut ::std::os::raw::c_void, arg2: socklen_t)
     -> ::std::os::raw::c_int;
    pub fn inet6_opt_append(arg1: *mut ::std::os::raw::c_void,
                            arg2: socklen_t, arg3: ::std::os::raw::c_int,
                            arg4: __uint8_t, arg5: socklen_t, arg6: __uint8_t,
                            arg7: *mut *mut ::std::os::raw::c_void)
     -> ::std::os::raw::c_int;
    pub fn inet6_opt_finish(arg1: *mut ::std::os::raw::c_void,
                            arg2: socklen_t, arg3: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
    pub fn inet6_opt_set_val(arg1: *mut ::std::os::raw::c_void,
                             arg2: ::std::os::raw::c_int,
                             arg3: *mut ::std::os::raw::c_void,
                             arg4: socklen_t) -> ::std::os::raw::c_int;
    pub fn inet6_opt_next(arg1: *mut ::std::os::raw::c_void, arg2: socklen_t,
                          arg3: ::std::os::raw::c_int, arg4: *mut __uint8_t,
                          arg5: *mut socklen_t,
                          arg6: *mut *mut ::std::os::raw::c_void)
     -> ::std::os::raw::c_int;
    pub fn inet6_opt_find(arg1: *mut ::std::os::raw::c_void, arg2: socklen_t,
                          arg3: ::std::os::raw::c_int, arg4: __uint8_t,
                          arg5: *mut socklen_t,
                          arg6: *mut *mut ::std::os::raw::c_void)
     -> ::std::os::raw::c_int;
    pub fn inet6_opt_get_val(arg1: *mut ::std::os::raw::c_void,
                             arg2: ::std::os::raw::c_int,
                             arg3: *mut ::std::os::raw::c_void,
                             arg4: socklen_t) -> ::std::os::raw::c_int;
    pub fn inet6_rth_space(arg1: ::std::os::raw::c_int,
                           arg2: ::std::os::raw::c_int) -> socklen_t;
    pub fn inet6_rth_init(arg1: *mut ::std::os::raw::c_void, arg2: socklen_t,
                          arg3: ::std::os::raw::c_int,
                          arg4: ::std::os::raw::c_int)
     -> *mut ::std::os::raw::c_void;
    pub fn inet6_rth_add(arg1: *mut ::std::os::raw::c_void,
                         arg2: *const Struct_in6_addr)
     -> ::std::os::raw::c_int;
    pub fn inet6_rth_reverse(arg1: *const ::std::os::raw::c_void,
                             arg2: *mut ::std::os::raw::c_void)
     -> ::std::os::raw::c_int;
    pub fn inet6_rth_segments(arg1: *const ::std::os::raw::c_void)
     -> ::std::os::raw::c_int;
    pub fn inet6_rth_getaddr(arg1: *const ::std::os::raw::c_void,
                             arg2: ::std::os::raw::c_int)
     -> *mut Struct_in6_addr;
    pub fn addrsel_policy_init();
    pub fn bindresvport(arg1: ::std::os::raw::c_int,
                        arg2: *mut Struct_sockaddr_in)
     -> ::std::os::raw::c_int;
    pub fn bindresvport_sa(arg1: ::std::os::raw::c_int,
                           arg2: *mut Struct_sockaddr)
     -> ::std::os::raw::c_int;
    pub fn endhostent();
    pub fn endnetent();
    pub fn endprotoent();
    pub fn endservent();
    pub fn freeaddrinfo(arg1: *mut Struct_addrinfo);
    pub fn gai_strerror(arg1: ::std::os::raw::c_int)
     -> *const ::std::os::raw::c_char;
    pub fn getaddrinfo(arg1: *const ::std::os::raw::c_char,
                       arg2: *const ::std::os::raw::c_char,
                       arg3: *const Struct_addrinfo,
                       arg4: *mut *mut Struct_addrinfo)
     -> ::std::os::raw::c_int;
    pub fn gethostbyaddr(arg1: *const ::std::os::raw::c_void, arg2: socklen_t,
                         arg3: ::std::os::raw::c_int) -> *mut Struct_hostent;
    pub fn gethostbyname(arg1: *const ::std::os::raw::c_char)
     -> *mut Struct_hostent;
    pub fn gethostent() -> *mut Struct_hostent;
    pub fn getnameinfo(arg1: *const Struct_sockaddr, arg2: socklen_t,
                       arg3: *mut ::std::os::raw::c_char, arg4: socklen_t,
                       arg5: *mut ::std::os::raw::c_char, arg6: socklen_t,
                       arg7: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
    pub fn getnetbyaddr(arg1: uint32_t, arg2: ::std::os::raw::c_int)
     -> *mut Struct_netent;
    pub fn getnetbyname(arg1: *const ::std::os::raw::c_char)
     -> *mut Struct_netent;
    pub fn getnetent() -> *mut Struct_netent;
    pub fn getprotobyname(arg1: *const ::std::os::raw::c_char)
     -> *mut Struct_protoent;
    pub fn getprotobynumber(arg1: ::std::os::raw::c_int)
     -> *mut Struct_protoent;
    pub fn getprotoent() -> *mut Struct_protoent;
    pub fn getservbyname(arg1: *const ::std::os::raw::c_char,
                         arg2: *const ::std::os::raw::c_char)
     -> *mut Struct_servent;
    pub fn getservbyport(arg1: ::std::os::raw::c_int,
                         arg2: *const ::std::os::raw::c_char)
     -> *mut Struct_servent;
    pub fn getservent() -> *mut Struct_servent;
    pub fn sethostent(arg1: ::std::os::raw::c_int);
    pub fn setnetent(arg1: ::std::os::raw::c_int);
    pub fn setprotoent(arg1: ::std::os::raw::c_int);
    pub fn setservent(arg1: ::std::os::raw::c_int);
    pub fn freehostent(arg1: *mut Struct_hostent);
    pub fn gethostbyname2(arg1: *const ::std::os::raw::c_char,
                          arg2: ::std::os::raw::c_int) -> *mut Struct_hostent;
    pub fn getipnodebyaddr(arg1: *const ::std::os::raw::c_void, arg2: size_t,
                           arg3: ::std::os::raw::c_int,
                           arg4: *mut ::std::os::raw::c_int)
     -> *mut Struct_hostent;
    pub fn getipnodebyname(arg1: *const ::std::os::raw::c_char,
                           arg2: ::std::os::raw::c_int,
                           arg3: ::std::os::raw::c_int,
                           arg4: *mut ::std::os::raw::c_int)
     -> *mut Struct_hostent;
    pub fn getrpcbyname(name: *const ::std::os::raw::c_char)
     -> *mut Struct_rpcent;
    pub fn getrpcbynumber(number: ::std::os::raw::c_int)
     -> *mut Struct_rpcent;
    pub fn getrpcent() -> *mut Struct_rpcent;
    pub fn setrpcent(stayopen: ::std::os::raw::c_int);
    pub fn endrpcent();
    pub fn herror(arg1: *const ::std::os::raw::c_char);
    pub fn hstrerror(arg1: ::std::os::raw::c_int)
     -> *const ::std::os::raw::c_char;
    pub fn innetgr(arg1: *const ::std::os::raw::c_char,
                   arg2: *const ::std::os::raw::c_char,
                   arg3: *const ::std::os::raw::c_char,
                   arg4: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
    pub fn getnetgrent(arg1: *mut *mut ::std::os::raw::c_char,
                       arg2: *mut *mut ::std::os::raw::c_char,
                       arg3: *mut *mut ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
    pub fn endnetgrent();
    pub fn setnetgrent(arg1: *const ::std::os::raw::c_char);
    pub fn getattrlistbulk(arg1: ::std::os::raw::c_int,
                           arg2: *mut ::std::os::raw::c_void,
                           arg3: *mut ::std::os::raw::c_void, arg4: size_t,
                           arg5: uint64_t) -> ::std::os::raw::c_int;
    pub fn faccessat(arg1: ::std::os::raw::c_int,
                     arg2: *const ::std::os::raw::c_char,
                     arg3: ::std::os::raw::c_int, arg4: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
    pub fn fchownat(arg1: ::std::os::raw::c_int,
                    arg2: *const ::std::os::raw::c_char, arg3: uid_t,
                    arg4: gid_t, arg5: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
    pub fn linkat(arg1: ::std::os::raw::c_int,
                  arg2: *const ::std::os::raw::c_char,
                  arg3: ::std::os::raw::c_int,
                  arg4: *const ::std::os::raw::c_char,
                  arg5: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
    pub fn readlinkat(arg1: ::std::os::raw::c_int,
                      arg2: *const ::std::os::raw::c_char,
                      arg3: *mut ::std::os::raw::c_char, arg4: size_t)
     -> ssize_t;
    pub fn symlinkat(arg1: *const ::std::os::raw::c_char,
                     arg2: ::std::os::raw::c_int,
                     arg3: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
    pub fn unlinkat(arg1: ::std::os::raw::c_int,
                    arg2: *const ::std::os::raw::c_char,
                    arg3: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
    pub fn getattrlistat(arg1: ::std::os::raw::c_int,
                         arg2: *const ::std::os::raw::c_char,
                         arg3: *mut ::std::os::raw::c_void,
                         arg4: *mut ::std::os::raw::c_void, arg5: size_t,
                         arg6: ::std::os::raw::c_ulong)
     -> ::std::os::raw::c_int;
    pub fn _exit(arg1: ::std::os::raw::c_int);
    pub fn access(arg1: *const ::std::os::raw::c_char,
                  arg2: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
    pub fn alarm(arg1: ::std::os::raw::c_uint) -> ::std::os::raw::c_uint;
    pub fn chdir(arg1: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
    pub fn chown(arg1: *const ::std::os::raw::c_char, arg2: uid_t,
                 arg3: gid_t) -> ::std::os::raw::c_int;
    pub fn close(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
    pub fn dup(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
    pub fn dup2(arg1: ::std::os::raw::c_int, arg2: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
    pub fn execl(arg1: *const ::std::os::raw::c_char,
                 arg2: *const ::std::os::raw::c_char, ...)
     -> ::std::os::raw::c_int;
    pub fn execle(arg1: *const ::std::os::raw::c_char,
                  arg2: *const ::std::os::raw::c_char, ...)
     -> ::std::os::raw::c_int;
    pub fn execlp(arg1: *const ::std::os::raw::c_char,
                  arg2: *const ::std::os::raw::c_char, ...)
     -> ::std::os::raw::c_int;
    pub fn execv(arg1: *const ::std::os::raw::c_char,
                 arg2: *const *mut ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
    pub fn execve(arg1: *const ::std::os::raw::c_char,
                  arg2: *const *mut ::std::os::raw::c_char,
                  arg3: *const *mut ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
    pub fn execvp(arg1: *const ::std::os::raw::c_char,
                  arg2: *const *mut ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
    pub fn fork() -> pid_t;
    pub fn fpathconf(arg1: ::std::os::raw::c_int, arg2: ::std::os::raw::c_int)
     -> ::std::os::raw::c_long;
    pub fn getcwd(arg1: *mut ::std::os::raw::c_char, arg2: size_t)
     -> *mut ::std::os::raw::c_char;
    pub fn getegid() -> gid_t;
    pub fn geteuid() -> uid_t;
    pub fn getgid() -> gid_t;
    pub fn getgroups(arg1: ::std::os::raw::c_int, arg2: *mut gid_t)
     -> ::std::os::raw::c_int;
    pub fn getlogin() -> *mut ::std::os::raw::c_char;
    pub fn getpgrp() -> pid_t;
    pub fn getpid() -> pid_t;
    pub fn getppid() -> pid_t;
    pub fn getuid() -> uid_t;
    pub fn isatty(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
    pub fn link(arg1: *const ::std::os::raw::c_char,
                arg2: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
    pub fn lseek(arg1: ::std::os::raw::c_int, arg2: off_t,
                 arg3: ::std::os::raw::c_int) -> off_t;
    pub fn pathconf(arg1: *const ::std::os::raw::c_char,
                    arg2: ::std::os::raw::c_int) -> ::std::os::raw::c_long;
    pub fn pause() -> ::std::os::raw::c_int;
    pub fn pipe(arg1: *mut ::std::os::raw::c_int) -> ::std::os::raw::c_int;
    pub fn read(arg1: ::std::os::raw::c_int,
                arg2: *mut ::std::os::raw::c_void, arg3: size_t) -> ssize_t;
    pub fn rmdir(arg1: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
    pub fn setgid(arg1: gid_t) -> ::std::os::raw::c_int;
    pub fn setpgid(arg1: pid_t, arg2: pid_t) -> ::std::os::raw::c_int;
    pub fn setsid() -> pid_t;
    pub fn setuid(arg1: uid_t) -> ::std::os::raw::c_int;
    pub fn sleep(arg1: ::std::os::raw::c_uint) -> ::std::os::raw::c_uint;
    pub fn sysconf(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_long;
    pub fn tcgetpgrp(arg1: ::std::os::raw::c_int) -> pid_t;
    pub fn tcsetpgrp(arg1: ::std::os::raw::c_int, arg2: pid_t)
     -> ::std::os::raw::c_int;
    pub fn ttyname(arg1: ::std::os::raw::c_int)
     -> *mut ::std::os::raw::c_char;
    pub fn ttyname_r(arg1: ::std::os::raw::c_int,
                     arg2: *mut ::std::os::raw::c_char, arg3: size_t)
     -> ::std::os::raw::c_int;
    pub fn unlink(arg1: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
    pub fn write(arg1: ::std::os::raw::c_int,
                 arg2: *const ::std::os::raw::c_void, arg3: size_t)
     -> ssize_t;
    pub fn confstr(arg1: ::std::os::raw::c_int,
                   arg2: *mut ::std::os::raw::c_char, arg3: size_t) -> size_t;
    pub fn getopt(arg1: ::std::os::raw::c_int,
                  arg2: *const *mut ::std::os::raw::c_char,
                  arg3: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
    pub fn brk(arg1: *const ::std::os::raw::c_void)
     -> *mut ::std::os::raw::c_void;
    pub fn chroot(arg1: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
    pub fn crypt(arg1: *const ::std::os::raw::c_char,
                 arg2: *const ::std::os::raw::c_char)
     -> *mut ::std::os::raw::c_char;
    pub fn encrypt(arg1: *mut ::std::os::raw::c_char,
                   arg2: ::std::os::raw::c_int);
    pub fn fchdir(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
    pub fn gethostid() -> ::std::os::raw::c_long;
    pub fn getpgid(arg1: pid_t) -> pid_t;
    pub fn getsid(arg1: pid_t) -> pid_t;
    pub fn getdtablesize() -> ::std::os::raw::c_int;
    pub fn getpagesize() -> ::std::os::raw::c_int;
    pub fn getpass(arg1: *const ::std::os::raw::c_char)
     -> *mut ::std::os::raw::c_char;
    pub fn getwd(arg1: *mut ::std::os::raw::c_char)
     -> *mut ::std::os::raw::c_char;
    pub fn lchown(arg1: *const ::std::os::raw::c_char, arg2: uid_t,
                  arg3: gid_t) -> ::std::os::raw::c_int;
    pub fn lockf(arg1: ::std::os::raw::c_int, arg2: ::std::os::raw::c_int,
                 arg3: off_t) -> ::std::os::raw::c_int;
    pub fn nice(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
    pub fn pread(arg1: ::std::os::raw::c_int,
                 arg2: *mut ::std::os::raw::c_void, arg3: size_t, arg4: off_t)
     -> ssize_t;
    pub fn pwrite(arg1: ::std::os::raw::c_int,
                  arg2: *const ::std::os::raw::c_void, arg3: size_t,
                  arg4: off_t) -> ssize_t;
    pub fn sbrk(arg1: ::std::os::raw::c_int) -> *mut ::std::os::raw::c_void;
    pub fn setpgrp() -> pid_t;
    pub fn setregid(arg1: gid_t, arg2: gid_t) -> ::std::os::raw::c_int;
    pub fn setreuid(arg1: uid_t, arg2: uid_t) -> ::std::os::raw::c_int;
    pub fn sync();
    pub fn truncate(arg1: *const ::std::os::raw::c_char, arg2: off_t)
     -> ::std::os::raw::c_int;
    pub fn ualarm(arg1: useconds_t, arg2: useconds_t) -> useconds_t;
    pub fn usleep(arg1: useconds_t) -> ::std::os::raw::c_int;
    pub fn vfork() -> ::std::os::raw::c_int;
    pub fn fsync(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
    pub fn ftruncate(arg1: ::std::os::raw::c_int, arg2: off_t)
     -> ::std::os::raw::c_int;
    pub fn getlogin_r(arg1: *mut ::std::os::raw::c_char, arg2: size_t)
     -> ::std::os::raw::c_int;
    pub fn fchown(arg1: ::std::os::raw::c_int, arg2: uid_t, arg3: gid_t)
     -> ::std::os::raw::c_int;
    pub fn gethostname(arg1: *mut ::std::os::raw::c_char, arg2: size_t)
     -> ::std::os::raw::c_int;
    pub fn readlink(arg1: *const ::std::os::raw::c_char,
                    arg2: *mut ::std::os::raw::c_char, arg3: size_t)
     -> ssize_t;
    pub fn setegid(arg1: gid_t) -> ::std::os::raw::c_int;
    pub fn seteuid(arg1: uid_t) -> ::std::os::raw::c_int;
    pub fn symlink(arg1: *const ::std::os::raw::c_char,
                   arg2: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
    pub fn pselect(arg1: ::std::os::raw::c_int, arg2: *mut fd_set,
                   arg3: *mut fd_set, arg4: *mut fd_set,
                   arg5: *const Struct_timespec, arg6: *const sigset_t)
     -> ::std::os::raw::c_int;
    pub fn select(arg1: ::std::os::raw::c_int, arg2: *mut fd_set,
                  arg3: *mut fd_set, arg4: *mut fd_set,
                  arg5: *mut Struct_timeval) -> ::std::os::raw::c_int;
    pub fn accessx_np(arg1: *const Struct_accessx_descriptor, arg2: size_t,
                      arg3: *mut ::std::os::raw::c_int, arg4: uid_t)
     -> ::std::os::raw::c_int;
    pub fn acct(arg1: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
    pub fn add_profil(arg1: *mut ::std::os::raw::c_char, arg2: size_t,
                      arg3: ::std::os::raw::c_ulong,
                      arg4: ::std::os::raw::c_uint) -> ::std::os::raw::c_int;
    pub fn endusershell();
    pub fn execvP(arg1: *const ::std::os::raw::c_char,
                  arg2: *const ::std::os::raw::c_char,
                  arg3: *const *mut ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
    pub fn fflagstostr(arg1: ::std::os::raw::c_ulong)
     -> *mut ::std::os::raw::c_char;
    pub fn getdomainname(arg1: *mut ::std::os::raw::c_char,
                         arg2: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
    pub fn getgrouplist(arg1: *const ::std::os::raw::c_char,
                        arg2: ::std::os::raw::c_int,
                        arg3: *mut ::std::os::raw::c_int,
                        arg4: *mut ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
    pub fn gethostuuid(arg1: uuid_t, arg2: *const Struct_timespec)
     -> ::std::os::raw::c_int;
    pub fn getmode(arg1: *const ::std::os::raw::c_void, arg2: mode_t)
     -> mode_t;
    pub fn getpeereid(arg1: ::std::os::raw::c_int, arg2: *mut uid_t,
                      arg3: *mut gid_t) -> ::std::os::raw::c_int;
    pub fn getsgroups_np(arg1: *mut ::std::os::raw::c_int, arg2: uuid_t)
     -> ::std::os::raw::c_int;
    pub fn getusershell() -> *mut ::std::os::raw::c_char;
    pub fn getwgroups_np(arg1: *mut ::std::os::raw::c_int, arg2: uuid_t)
     -> ::std::os::raw::c_int;
    pub fn initgroups(arg1: *const ::std::os::raw::c_char,
                      arg2: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
    pub fn iruserok(arg1: ::std::os::raw::c_ulong,
                    arg2: ::std::os::raw::c_int,
                    arg3: *const ::std::os::raw::c_char,
                    arg4: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
    pub fn iruserok_sa(arg1: *const ::std::os::raw::c_void,
                       arg2: ::std::os::raw::c_int,
                       arg3: ::std::os::raw::c_int,
                       arg4: *const ::std::os::raw::c_char,
                       arg5: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
    pub fn issetugid() -> ::std::os::raw::c_int;
    pub fn mkdtemp(arg1: *mut ::std::os::raw::c_char)
     -> *mut ::std::os::raw::c_char;
    pub fn mknod(arg1: *const ::std::os::raw::c_char, arg2: mode_t,
                 arg3: dev_t) -> ::std::os::raw::c_int;
    pub fn mkpath_np(path: *const ::std::os::raw::c_char, omode: mode_t)
     -> ::std::os::raw::c_int;
    pub fn mkstemps(arg1: *mut ::std::os::raw::c_char,
                    arg2: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
    pub fn nfssvc(arg1: ::std::os::raw::c_int,
                  arg2: *mut ::std::os::raw::c_void) -> ::std::os::raw::c_int;
    pub fn profil(arg1: *mut ::std::os::raw::c_char, arg2: size_t,
                  arg3: ::std::os::raw::c_ulong, arg4: ::std::os::raw::c_uint)
     -> ::std::os::raw::c_int;
    pub fn pthread_setugid_np(arg1: uid_t, arg2: gid_t)
     -> ::std::os::raw::c_int;
    pub fn pthread_getugid_np(arg1: *mut uid_t, arg2: *mut gid_t)
     -> ::std::os::raw::c_int;
    pub fn rcmd(arg1: *mut *mut ::std::os::raw::c_char,
                arg2: ::std::os::raw::c_int,
                arg3: *const ::std::os::raw::c_char,
                arg4: *const ::std::os::raw::c_char,
                arg5: *const ::std::os::raw::c_char,
                arg6: *mut ::std::os::raw::c_int) -> ::std::os::raw::c_int;
    pub fn rcmd_af(arg1: *mut *mut ::std::os::raw::c_char,
                   arg2: ::std::os::raw::c_int,
                   arg3: *const ::std::os::raw::c_char,
                   arg4: *const ::std::os::raw::c_char,
                   arg5: *const ::std::os::raw::c_char,
                   arg6: *mut ::std::os::raw::c_int,
                   arg7: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
    pub fn reboot(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
    pub fn revoke(arg1: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
    pub fn rresvport(arg1: *mut ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
    pub fn rresvport_af(arg1: *mut ::std::os::raw::c_int,
                        arg2: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
    pub fn ruserok(arg1: *const ::std::os::raw::c_char,
                   arg2: ::std::os::raw::c_int,
                   arg3: *const ::std::os::raw::c_char,
                   arg4: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
    pub fn setdomainname(arg1: *const ::std::os::raw::c_char,
                         arg2: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
    pub fn setgroups(arg1: ::std::os::raw::c_int, arg2: *const gid_t)
     -> ::std::os::raw::c_int;
    pub fn sethostid(arg1: ::std::os::raw::c_long);
    pub fn sethostname(arg1: *const ::std::os::raw::c_char,
                       arg2: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
    pub fn setlogin(arg1: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
    pub fn setmode(arg1: *const ::std::os::raw::c_char)
     -> *mut ::std::os::raw::c_void;
    pub fn setrgid(arg1: gid_t) -> ::std::os::raw::c_int;
    pub fn setruid(arg1: uid_t) -> ::std::os::raw::c_int;
    pub fn setsgroups_np(arg1: ::std::os::raw::c_int, arg2: uuid_t)
     -> ::std::os::raw::c_int;
    pub fn setusershell();
    pub fn setwgroups_np(arg1: ::std::os::raw::c_int, arg2: uuid_t)
     -> ::std::os::raw::c_int;
    pub fn strtofflags(arg1: *mut *mut ::std::os::raw::c_char,
                       arg2: *mut ::std::os::raw::c_ulong,
                       arg3: *mut ::std::os::raw::c_ulong)
     -> ::std::os::raw::c_int;
    pub fn swapon(arg1: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
    pub fn syscall(arg1: ::std::os::raw::c_int, ...) -> ::std::os::raw::c_int;
    pub fn ttyslot() -> ::std::os::raw::c_int;
    pub fn undelete(arg1: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
    pub fn unwhiteout(arg1: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
    pub fn fgetattrlist(arg1: ::std::os::raw::c_int,
                        arg2: *mut ::std::os::raw::c_void,
                        arg3: *mut ::std::os::raw::c_void, arg4: size_t,
                        arg5: ::std::os::raw::c_uint)
     -> ::std::os::raw::c_int;
    pub fn fsetattrlist(arg1: ::std::os::raw::c_int,
                        arg2: *mut ::std::os::raw::c_void,
                        arg3: *mut ::std::os::raw::c_void, arg4: size_t,
                        arg5: ::std::os::raw::c_uint)
     -> ::std::os::raw::c_int;
    pub fn getattrlist(arg1: *const ::std::os::raw::c_char,
                       arg2: *mut ::std::os::raw::c_void,
                       arg3: *mut ::std::os::raw::c_void, arg4: size_t,
                       arg5: ::std::os::raw::c_uint) -> ::std::os::raw::c_int;
    pub fn setattrlist(arg1: *const ::std::os::raw::c_char,
                       arg2: *mut ::std::os::raw::c_void,
                       arg3: *mut ::std::os::raw::c_void, arg4: size_t,
                       arg5: ::std::os::raw::c_uint) -> ::std::os::raw::c_int;
    pub fn exchangedata(arg1: *const ::std::os::raw::c_char,
                        arg2: *const ::std::os::raw::c_char,
                        arg3: ::std::os::raw::c_uint)
     -> ::std::os::raw::c_int;
    pub fn getdirentriesattr(arg1: ::std::os::raw::c_int,
                             arg2: *mut ::std::os::raw::c_void,
                             arg3: *mut ::std::os::raw::c_void, arg4: size_t,
                             arg5: *mut ::std::os::raw::c_uint,
                             arg6: *mut ::std::os::raw::c_uint,
                             arg7: *mut ::std::os::raw::c_uint,
                             arg8: ::std::os::raw::c_uint)
     -> ::std::os::raw::c_int;
    pub fn searchfs(arg1: *const ::std::os::raw::c_char,
                    arg2: *mut Struct_fssearchblock,
                    arg3: *mut ::std::os::raw::c_ulong,
                    arg4: ::std::os::raw::c_uint,
                    arg5: ::std::os::raw::c_uint,
                    arg6: *mut Struct_searchstate) -> ::std::os::raw::c_int;
    pub fn fsctl(arg1: *const ::std::os::raw::c_char,
                 arg2: ::std::os::raw::c_ulong,
                 arg3: *mut ::std::os::raw::c_void,
                 arg4: ::std::os::raw::c_uint) -> ::std::os::raw::c_int;
    pub fn ffsctl(arg1: ::std::os::raw::c_int, arg2: ::std::os::raw::c_ulong,
                  arg3: *mut ::std::os::raw::c_void,
                  arg4: ::std::os::raw::c_uint) -> ::std::os::raw::c_int;
    pub fn fsync_volume_np(arg1: ::std::os::raw::c_int,
                           arg2: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
    pub fn sync_volume_np(arg1: *const ::std::os::raw::c_char,
                          arg2: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
    pub fn sched_yield() -> ::std::os::raw::c_int;
    pub fn sched_get_priority_min(arg1: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
    pub fn sched_get_priority_max(arg1: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
    pub fn qos_class_self() -> qos_class_t;
    pub fn qos_class_main() -> qos_class_t;
    pub fn pthread_attr_set_qos_class_np(__attr: *mut pthread_attr_t,
                                         __qos_class: qos_class_t,
                                         __relative_priority:
                                             ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
    pub fn pthread_attr_get_qos_class_np(__attr: *mut pthread_attr_t,
                                         __qos_class: *mut qos_class_t,
                                         __relative_priority:
                                             *mut ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
    pub fn pthread_set_qos_class_self_np(__qos_class: qos_class_t,
                                         __relative_priority:
                                             ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
    pub fn pthread_get_qos_class_np(__pthread: pthread_t,
                                    __qos_class: *mut qos_class_t,
                                    __relative_priority:
                                        *mut ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
    pub fn pthread_override_qos_class_start_np(__pthread: pthread_t,
                                               __qos_class: qos_class_t,
                                               __relative_priority:
                                                   ::std::os::raw::c_int)
     -> pthread_override_t;
    pub fn pthread_override_qos_class_end_np(__override: pthread_override_t)
     -> ::std::os::raw::c_int;
    pub fn pthread_atfork(arg1: ::std::option::Option<extern "C" fn()>,
                          arg2: ::std::option::Option<extern "C" fn()>,
                          arg3: ::std::option::Option<extern "C" fn()>)
     -> ::std::os::raw::c_int;
    pub fn pthread_attr_destroy(arg1: *mut pthread_attr_t)
     -> ::std::os::raw::c_int;
    pub fn pthread_attr_getdetachstate(arg1: *const pthread_attr_t,
                                       arg2: *mut ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
    pub fn pthread_attr_getguardsize(arg1: *const pthread_attr_t,
                                     arg2: *mut size_t)
     -> ::std::os::raw::c_int;
    pub fn pthread_attr_getinheritsched(arg1: *const pthread_attr_t,
                                        arg2: *mut ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
    pub fn pthread_attr_getschedparam(arg1: *const pthread_attr_t,
                                      arg2: *mut Struct_sched_param)
     -> ::std::os::raw::c_int;
    pub fn pthread_attr_getschedpolicy(arg1: *const pthread_attr_t,
                                       arg2: *mut ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
    pub fn pthread_attr_getscope(arg1: *const pthread_attr_t,
                                 arg2: *mut ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
    pub fn pthread_attr_getstack(arg1: *const pthread_attr_t,
                                 arg2: *mut *mut ::std::os::raw::c_void,
                                 arg3: *mut size_t) -> ::std::os::raw::c_int;
    pub fn pthread_attr_getstackaddr(arg1: *const pthread_attr_t,
                                     arg2: *mut *mut ::std::os::raw::c_void)
     -> ::std::os::raw::c_int;
    pub fn pthread_attr_getstacksize(arg1: *const pthread_attr_t,
                                     arg2: *mut size_t)
     -> ::std::os::raw::c_int;
    pub fn pthread_attr_init(arg1: *mut pthread_attr_t)
     -> ::std::os::raw::c_int;
    pub fn pthread_attr_setdetachstate(arg1: *mut pthread_attr_t,
                                       arg2: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
    pub fn pthread_attr_setguardsize(arg1: *mut pthread_attr_t, arg2: size_t)
     -> ::std::os::raw::c_int;
    pub fn pthread_attr_setinheritsched(arg1: *mut pthread_attr_t,
                                        arg2: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
    pub fn pthread_attr_setschedparam(arg1: *mut pthread_attr_t,
                                      arg2: *const Struct_sched_param)
     -> ::std::os::raw::c_int;
    pub fn pthread_attr_setschedpolicy(arg1: *mut pthread_attr_t,
                                       arg2: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
    pub fn pthread_attr_setscope(arg1: *mut pthread_attr_t,
                                 arg2: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
    pub fn pthread_attr_setstack(arg1: *mut pthread_attr_t,
                                 arg2: *mut ::std::os::raw::c_void,
                                 arg3: size_t) -> ::std::os::raw::c_int;
    pub fn pthread_attr_setstackaddr(arg1: *mut pthread_attr_t,
                                     arg2: *mut ::std::os::raw::c_void)
     -> ::std::os::raw::c_int;
    pub fn pthread_attr_setstacksize(arg1: *mut pthread_attr_t, arg2: size_t)
     -> ::std::os::raw::c_int;
    pub fn pthread_cancel(arg1: pthread_t) -> ::std::os::raw::c_int;
    pub fn pthread_cond_broadcast(arg1: *mut pthread_cond_t)
     -> ::std::os::raw::c_int;
    pub fn pthread_cond_destroy(arg1: *mut pthread_cond_t)
     -> ::std::os::raw::c_int;
    pub fn pthread_cond_init(arg1: *mut pthread_cond_t,
                             arg2: *const pthread_condattr_t)
     -> ::std::os::raw::c_int;
    pub fn pthread_cond_signal(arg1: *mut pthread_cond_t)
     -> ::std::os::raw::c_int;
    pub fn pthread_cond_timedwait(arg1: *mut pthread_cond_t,
                                  arg2: *mut pthread_mutex_t,
                                  arg3: *const Struct_timespec)
     -> ::std::os::raw::c_int;
    pub fn pthread_cond_wait(arg1: *mut pthread_cond_t,
                             arg2: *mut pthread_mutex_t)
     -> ::std::os::raw::c_int;
    pub fn pthread_condattr_destroy(arg1: *mut pthread_condattr_t)
     -> ::std::os::raw::c_int;
    pub fn pthread_condattr_init(arg1: *mut pthread_condattr_t)
     -> ::std::os::raw::c_int;
    pub fn pthread_condattr_getpshared(arg1: *const pthread_condattr_t,
                                       arg2: *mut ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
    pub fn pthread_condattr_setpshared(arg1: *mut pthread_condattr_t,
                                       arg2: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
    pub fn pthread_create(arg1: *mut pthread_t, arg2: *const pthread_attr_t,
                          arg3:
                              ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                             *mut ::std::os::raw::c_void)
                                                        ->
                                                            *mut ::std::os::raw::c_void>,
                          arg4: *mut ::std::os::raw::c_void)
     -> ::std::os::raw::c_int;
    pub fn pthread_detach(arg1: pthread_t) -> ::std::os::raw::c_int;
    pub fn pthread_equal(arg1: pthread_t, arg2: pthread_t)
     -> ::std::os::raw::c_int;
    pub fn pthread_exit(arg1: *mut ::std::os::raw::c_void);
    pub fn pthread_getconcurrency() -> ::std::os::raw::c_int;
    pub fn pthread_getschedparam(arg1: pthread_t,
                                 arg2: *mut ::std::os::raw::c_int,
                                 arg3: *mut Struct_sched_param)
     -> ::std::os::raw::c_int;
    pub fn pthread_getspecific(arg1: pthread_key_t)
     -> *mut ::std::os::raw::c_void;
    pub fn pthread_join(arg1: pthread_t,
                        arg2: *mut *mut ::std::os::raw::c_void)
     -> ::std::os::raw::c_int;
    pub fn pthread_key_create(arg1: *mut pthread_key_t,
                              arg2:
                                  ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                                 *mut ::std::os::raw::c_void)>)
     -> ::std::os::raw::c_int;
    pub fn pthread_key_delete(arg1: pthread_key_t) -> ::std::os::raw::c_int;
    pub fn pthread_mutex_destroy(arg1: *mut pthread_mutex_t)
     -> ::std::os::raw::c_int;
    pub fn pthread_mutex_getprioceiling(arg1: *const pthread_mutex_t,
                                        arg2: *mut ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
    pub fn pthread_mutex_init(arg1: *mut pthread_mutex_t,
                              arg2: *const pthread_mutexattr_t)
     -> ::std::os::raw::c_int;
    pub fn pthread_mutex_lock(arg1: *mut pthread_mutex_t)
     -> ::std::os::raw::c_int;
    pub fn pthread_mutex_setprioceiling(arg1: *mut pthread_mutex_t,
                                        arg2: ::std::os::raw::c_int,
                                        arg3: *mut ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
    pub fn pthread_mutex_trylock(arg1: *mut pthread_mutex_t)
     -> ::std::os::raw::c_int;
    pub fn pthread_mutex_unlock(arg1: *mut pthread_mutex_t)
     -> ::std::os::raw::c_int;
    pub fn pthread_mutexattr_destroy(arg1: *mut pthread_mutexattr_t)
     -> ::std::os::raw::c_int;
    pub fn pthread_mutexattr_getprioceiling(arg1: *const pthread_mutexattr_t,
                                            arg2: *mut ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
    pub fn pthread_mutexattr_getprotocol(arg1: *const pthread_mutexattr_t,
                                         arg2: *mut ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
    pub fn pthread_mutexattr_getpshared(arg1: *const pthread_mutexattr_t,
                                        arg2: *mut ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
    pub fn pthread_mutexattr_gettype(arg1: *const pthread_mutexattr_t,
                                     arg2: *mut ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
    pub fn pthread_mutexattr_init(arg1: *mut pthread_mutexattr_t)
     -> ::std::os::raw::c_int;
    pub fn pthread_mutexattr_setprioceiling(arg1: *mut pthread_mutexattr_t,
                                            arg2: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
    pub fn pthread_mutexattr_setprotocol(arg1: *mut pthread_mutexattr_t,
                                         arg2: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
    pub fn pthread_mutexattr_setpshared(arg1: *mut pthread_mutexattr_t,
                                        arg2: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
    pub fn pthread_mutexattr_settype(arg1: *mut pthread_mutexattr_t,
                                     arg2: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
    pub fn pthread_once(arg1: *mut pthread_once_t,
                        arg2: ::std::option::Option<extern "C" fn()>)
     -> ::std::os::raw::c_int;
    pub fn pthread_rwlock_destroy(arg1: *mut pthread_rwlock_t)
     -> ::std::os::raw::c_int;
    pub fn pthread_rwlock_init(arg1: *mut pthread_rwlock_t,
                               arg2: *const pthread_rwlockattr_t)
     -> ::std::os::raw::c_int;
    pub fn pthread_rwlock_rdlock(arg1: *mut pthread_rwlock_t)
     -> ::std::os::raw::c_int;
    pub fn pthread_rwlock_tryrdlock(arg1: *mut pthread_rwlock_t)
     -> ::std::os::raw::c_int;
    pub fn pthread_rwlock_trywrlock(arg1: *mut pthread_rwlock_t)
     -> ::std::os::raw::c_int;
    pub fn pthread_rwlock_wrlock(arg1: *mut pthread_rwlock_t)
     -> ::std::os::raw::c_int;
    pub fn pthread_rwlock_unlock(arg1: *mut pthread_rwlock_t)
     -> ::std::os::raw::c_int;
    pub fn pthread_rwlockattr_destroy(arg1: *mut pthread_rwlockattr_t)
     -> ::std::os::raw::c_int;
    pub fn pthread_rwlockattr_getpshared(arg1: *const pthread_rwlockattr_t,
                                         arg2: *mut ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
    pub fn pthread_rwlockattr_init(arg1: *mut pthread_rwlockattr_t)
     -> ::std::os::raw::c_int;
    pub fn pthread_rwlockattr_setpshared(arg1: *mut pthread_rwlockattr_t,
                                         arg2: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
    pub fn pthread_self() -> pthread_t;
    pub fn pthread_setcancelstate(arg1: ::std::os::raw::c_int,
                                  arg2: *mut ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
    pub fn pthread_setcanceltype(arg1: ::std::os::raw::c_int,
                                 arg2: *mut ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
    pub fn pthread_setconcurrency(arg1: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
    pub fn pthread_setschedparam(arg1: pthread_t, arg2: ::std::os::raw::c_int,
                                 arg3: *const Struct_sched_param)
     -> ::std::os::raw::c_int;
    pub fn pthread_setspecific(arg1: pthread_key_t,
                               arg2: *const ::std::os::raw::c_void)
     -> ::std::os::raw::c_int;
    pub fn pthread_testcancel();
    pub fn pthread_is_threaded_np() -> ::std::os::raw::c_int;
    pub fn pthread_threadid_np(arg1: pthread_t, arg2: *mut __uint64_t)
     -> ::std::os::raw::c_int;
    pub fn pthread_getname_np(arg1: pthread_t,
                              arg2: *mut ::std::os::raw::c_char, arg3: size_t)
     -> ::std::os::raw::c_int;
    pub fn pthread_setname_np(arg1: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
    pub fn pthread_main_np() -> ::std::os::raw::c_int;
    pub fn pthread_mach_thread_np(arg1: pthread_t) -> mach_port_t;
    pub fn pthread_get_stacksize_np(arg1: pthread_t) -> size_t;
    pub fn pthread_get_stackaddr_np(arg1: pthread_t)
     -> *mut ::std::os::raw::c_void;
    pub fn pthread_cond_signal_thread_np(arg1: *mut pthread_cond_t,
                                         arg2: pthread_t)
     -> ::std::os::raw::c_int;
    pub fn pthread_cond_timedwait_relative_np(arg1: *mut pthread_cond_t,
                                              arg2: *mut pthread_mutex_t,
                                              arg3: *const Struct_timespec)
     -> ::std::os::raw::c_int;
    pub fn pthread_create_suspended_np(arg1: *mut pthread_t,
                                       arg2: *const pthread_attr_t,
                                       arg3:
                                           ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                                          *mut ::std::os::raw::c_void)
                                                                     ->
                                                                         *mut ::std::os::raw::c_void>,
                                       arg4: *mut ::std::os::raw::c_void)
     -> ::std::os::raw::c_int;
    pub fn pthread_from_mach_thread_np(arg1: mach_port_t) -> pthread_t;
    pub fn pthread_yield_np();
    pub fn closedir(arg1: *mut DIR) -> ::std::os::raw::c_int;
    pub fn opendir(arg1: *const ::std::os::raw::c_char) -> *mut DIR;
    pub fn readdir(arg1: *mut DIR) -> *mut Struct_dirent;
    pub fn readdir_r(arg1: *mut DIR, arg2: *mut Struct_dirent,
                     arg3: *mut *mut Struct_dirent) -> ::std::os::raw::c_int;
    pub fn rewinddir(arg1: *mut DIR);
    pub fn seekdir(arg1: *mut DIR, arg2: ::std::os::raw::c_long);
    pub fn telldir(arg1: *mut DIR) -> ::std::os::raw::c_long;
    pub fn fdopendir(arg1: ::std::os::raw::c_int) -> *mut DIR;
    pub fn alphasort(arg1: *mut *const Struct_dirent,
                     arg2: *mut *const Struct_dirent)
     -> ::std::os::raw::c_int;
    pub fn dirfd(dirp: *mut DIR) -> ::std::os::raw::c_int;
    pub fn scandir(arg1: *const ::std::os::raw::c_char,
                   arg2: *mut *mut *mut Struct_dirent,
                   arg3:
                       ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                      *const Struct_dirent)
                                                 -> ::std::os::raw::c_int>,
                   arg4:
                       ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                      *mut *const Struct_dirent,
                                                                  arg2:
                                                                      *mut *const Struct_dirent)
                                                 -> ::std::os::raw::c_int>)
     -> ::std::os::raw::c_int;
    pub fn scandir_b(arg1: *const ::std::os::raw::c_char,
                     arg2: *mut *mut *mut Struct_dirent,
                     arg3: ::std::os::raw::c_void,
                     arg4: ::std::os::raw::c_void) -> ::std::os::raw::c_int;
    pub fn getdirentries(arg1: ::std::os::raw::c_int,
                         arg2: *mut ::std::os::raw::c_char,
                         arg3: ::std::os::raw::c_int,
                         arg4: *mut ::std::os::raw::c_long)
     -> ::std::os::raw::c_int;
    pub fn __opendir2(arg1: *const ::std::os::raw::c_char,
                      arg2: ::std::os::raw::c_int) -> *mut DIR;
    pub fn getpwuid(arg1: uid_t) -> *mut Struct_passwd;
    pub fn getpwnam(arg1: *const ::std::os::raw::c_char)
     -> *mut Struct_passwd;
    pub fn getpwuid_r(arg1: uid_t, arg2: *mut Struct_passwd,
                      arg3: *mut ::std::os::raw::c_char, arg4: size_t,
                      arg5: *mut *mut Struct_passwd) -> ::std::os::raw::c_int;
    pub fn getpwnam_r(arg1: *const ::std::os::raw::c_char,
                      arg2: *mut Struct_passwd,
                      arg3: *mut ::std::os::raw::c_char, arg4: size_t,
                      arg5: *mut *mut Struct_passwd) -> ::std::os::raw::c_int;
    pub fn getpwent() -> *mut Struct_passwd;
    pub fn setpwent();
    pub fn endpwent();
    pub fn uuid_clear(uu: uuid_t);
    pub fn uuid_compare(uu1: uuid_t, uu2: uuid_t) -> ::std::os::raw::c_int;
    pub fn uuid_copy(dst: uuid_t, src: uuid_t);
    pub fn uuid_generate(out: uuid_t);
    pub fn uuid_generate_random(out: uuid_t);
    pub fn uuid_generate_time(out: uuid_t);
    pub fn uuid_is_null(uu: uuid_t) -> ::std::os::raw::c_int;
    pub fn uuid_parse(_in: uuid_string_t, uu: uuid_t)
     -> ::std::os::raw::c_int;
    pub fn uuid_unparse(uu: uuid_t, out: uuid_string_t);
    pub fn uuid_unparse_lower(uu: uuid_t, out: uuid_string_t);
    pub fn uuid_unparse_upper(uu: uuid_t, out: uuid_string_t);
    pub fn setpassent(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
    pub fn user_from_uid(arg1: uid_t, arg2: ::std::os::raw::c_int)
     -> *mut ::std::os::raw::c_char;
    pub fn getpwuuid(arg1: uuid_t) -> *mut Struct_passwd;
    pub fn getpwuuid_r(arg1: uuid_t, arg2: *mut Struct_passwd,
                       arg3: *mut ::std::os::raw::c_char, arg4: size_t,
                       arg5: *mut *mut Struct_passwd)
     -> ::std::os::raw::c_int;
    pub fn getgrgid(arg1: gid_t) -> *mut Struct_group;
    pub fn getgrnam(arg1: *const ::std::os::raw::c_char) -> *mut Struct_group;
    pub fn getgrgid_r(arg1: gid_t, arg2: *mut Struct_group,
                      arg3: *mut ::std::os::raw::c_char, arg4: size_t,
                      arg5: *mut *mut Struct_group) -> ::std::os::raw::c_int;
    pub fn getgrnam_r(arg1: *const ::std::os::raw::c_char,
                      arg2: *mut Struct_group,
                      arg3: *mut ::std::os::raw::c_char, arg4: size_t,
                      arg5: *mut *mut Struct_group) -> ::std::os::raw::c_int;
    pub fn getgrent() -> *mut Struct_group;
    pub fn setgrent();
    pub fn endgrent();
    pub fn group_from_gid(arg1: gid_t, arg2: ::std::os::raw::c_int)
     -> *mut ::std::os::raw::c_char;
    pub fn getgruuid(arg1: uuid_t) -> *mut Struct_group;
    pub fn getgruuid_r(arg1: uuid_t, arg2: *mut Struct_group,
                       arg3: *mut ::std::os::raw::c_char, arg4: size_t,
                       arg5: *mut *mut Struct_group) -> ::std::os::raw::c_int;
    pub fn setgrfile(arg1: *const ::std::os::raw::c_char);
    pub fn setgroupent(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
    pub fn utime(arg1: *const ::std::os::raw::c_char,
                 arg2: *const Struct_utimbuf) -> ::std::os::raw::c_int;
    pub fn imaxabs(j: intmax_t) -> intmax_t;
    pub fn imaxdiv(__numer: intmax_t, __denom: intmax_t) -> imaxdiv_t;
    pub fn strtoimax(__nptr: *const ::std::os::raw::c_char,
                     __endptr: *mut *mut ::std::os::raw::c_char,
                     __base: ::std::os::raw::c_int) -> intmax_t;
    pub fn strtoumax(__nptr: *const ::std::os::raw::c_char,
                     __endptr: *mut *mut ::std::os::raw::c_char,
                     __base: ::std::os::raw::c_int) -> uintmax_t;
    pub fn wcstoimax(__nptr: *const wchar_t, __endptr: *mut *mut wchar_t,
                     __base: ::std::os::raw::c_int) -> intmax_t;
    pub fn wcstoumax(__nptr: *const wchar_t, __endptr: *mut *mut wchar_t,
                     __base: ::std::os::raw::c_int) -> uintmax_t;
    pub fn closelog();
    pub fn openlog(arg1: *const ::std::os::raw::c_char,
                   arg2: ::std::os::raw::c_int, arg3: ::std::os::raw::c_int);
    pub fn setlogmask(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
    pub fn syslog(arg1: ::std::os::raw::c_int,
                  arg2: *const ::std::os::raw::c_char, ...);
    pub fn vsyslog(arg1: ::std::os::raw::c_int,
                   arg2: *const ::std::os::raw::c_char,
                   arg3: __darwin_va_list);
    pub fn adjtime(arg1: *const Struct_timeval, arg2: *mut Struct_timeval)
     -> ::std::os::raw::c_int;
    pub fn futimes(arg1: ::std::os::raw::c_int, arg2: *const Struct_timeval)
     -> ::std::os::raw::c_int;
    pub fn lutimes(arg1: *const ::std::os::raw::c_char,
                   arg2: *const Struct_timeval) -> ::std::os::raw::c_int;
    pub fn settimeofday(arg1: *const Struct_timeval,
                        arg2: *const Struct_timezone)
     -> ::std::os::raw::c_int;
    pub fn getitimer(arg1: ::std::os::raw::c_int, arg2: *mut Struct_itimerval)
     -> ::std::os::raw::c_int;
    pub fn gettimeofday(arg1: *mut Struct_timeval,
                        arg2: *mut ::std::os::raw::c_void)
     -> ::std::os::raw::c_int;
    pub fn setitimer(arg1: ::std::os::raw::c_int,
                     arg2: *const Struct_itimerval,
                     arg3: *mut Struct_itimerval) -> ::std::os::raw::c_int;
    pub fn utimes(arg1: *const ::std::os::raw::c_char,
                  arg2: *const Struct_timeval) -> ::std::os::raw::c_int;
    pub fn chmod(arg1: *const ::std::os::raw::c_char, arg2: mode_t)
     -> ::std::os::raw::c_int;
    pub fn fchmod(arg1: ::std::os::raw::c_int, arg2: mode_t)
     -> ::std::os::raw::c_int;
    pub fn fstat(arg1: ::std::os::raw::c_int, arg2: *mut Struct_stat)
     -> ::std::os::raw::c_int;
    pub fn lstat(arg1: *const ::std::os::raw::c_char, arg2: *mut Struct_stat)
     -> ::std::os::raw::c_int;
    pub fn mkdir(arg1: *const ::std::os::raw::c_char, arg2: mode_t)
     -> ::std::os::raw::c_int;
    pub fn mkfifo(arg1: *const ::std::os::raw::c_char, arg2: mode_t)
     -> ::std::os::raw::c_int;
    pub fn stat(arg1: *const ::std::os::raw::c_char, arg2: *mut Struct_stat)
     -> ::std::os::raw::c_int;
    pub fn umask(arg1: mode_t) -> mode_t;
    pub fn fchmodat(arg1: ::std::os::raw::c_int,
                    arg2: *const ::std::os::raw::c_char, arg3: mode_t,
                    arg4: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
    pub fn fstatat(arg1: ::std::os::raw::c_int,
                   arg2: *const ::std::os::raw::c_char,
                   arg3: *mut Struct_stat, arg4: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
    pub fn mkdirat(arg1: ::std::os::raw::c_int,
                   arg2: *const ::std::os::raw::c_char, arg3: mode_t)
     -> ::std::os::raw::c_int;
    pub fn chflags(arg1: *const ::std::os::raw::c_char, arg2: __uint32_t)
     -> ::std::os::raw::c_int;
    pub fn chmodx_np(arg1: *const ::std::os::raw::c_char, arg2: filesec_t)
     -> ::std::os::raw::c_int;
    pub fn fchflags(arg1: ::std::os::raw::c_int, arg2: __uint32_t)
     -> ::std::os::raw::c_int;
    pub fn fchmodx_np(arg1: ::std::os::raw::c_int, arg2: filesec_t)
     -> ::std::os::raw::c_int;
    pub fn fstatx_np(arg1: ::std::os::raw::c_int, arg2: *mut Struct_stat,
                     arg3: filesec_t) -> ::std::os::raw::c_int;
    pub fn lchflags(arg1: *const ::std::os::raw::c_char, arg2: __uint32_t)
     -> ::std::os::raw::c_int;
    pub fn lchmod(arg1: *const ::std::os::raw::c_char, arg2: mode_t)
     -> ::std::os::raw::c_int;
    pub fn lstatx_np(arg1: *const ::std::os::raw::c_char,
                     arg2: *mut Struct_stat, arg3: filesec_t)
     -> ::std::os::raw::c_int;
    pub fn mkdirx_np(arg1: *const ::std::os::raw::c_char, arg2: filesec_t)
     -> ::std::os::raw::c_int;
    pub fn mkfifox_np(arg1: *const ::std::os::raw::c_char, arg2: filesec_t)
     -> ::std::os::raw::c_int;
    pub fn statx_np(arg1: *const ::std::os::raw::c_char,
                    arg2: *mut Struct_stat, arg3: filesec_t)
     -> ::std::os::raw::c_int;
    pub fn umaskx_np(arg1: filesec_t) -> ::std::os::raw::c_int;
    pub fn fstatx64_np(arg1: ::std::os::raw::c_int, arg2: *mut Struct_stat64,
                       arg3: filesec_t) -> ::std::os::raw::c_int;
    pub fn lstatx64_np(arg1: *const ::std::os::raw::c_char,
                       arg2: *mut Struct_stat64, arg3: filesec_t)
     -> ::std::os::raw::c_int;
    pub fn statx64_np(arg1: *const ::std::os::raw::c_char,
                      arg2: *mut Struct_stat64, arg3: filesec_t)
     -> ::std::os::raw::c_int;
    pub fn fstat64(arg1: ::std::os::raw::c_int, arg2: *mut Struct_stat64)
     -> ::std::os::raw::c_int;
    pub fn lstat64(arg1: *const ::std::os::raw::c_char,
                   arg2: *mut Struct_stat64) -> ::std::os::raw::c_int;
    pub fn stat64(arg1: *const ::std::os::raw::c_char,
                  arg2: *mut Struct_stat64) -> ::std::os::raw::c_int;
    pub fn ioctl(arg1: ::std::os::raw::c_int,
                 arg2: ::std::os::raw::c_ulong, ...) -> ::std::os::raw::c_int;
    pub fn readv(arg1: ::std::os::raw::c_int, arg2: *const Struct_iovec,
                 arg3: ::std::os::raw::c_int) -> ssize_t;
    pub fn writev(arg1: ::std::os::raw::c_int, arg2: *const Struct_iovec,
                  arg3: ::std::os::raw::c_int) -> ssize_t;
    pub fn getifaddrs(arg1: *mut *mut Struct_ifaddrs)
     -> ::std::os::raw::c_int;
    pub fn freeifaddrs(arg1: *mut Struct_ifaddrs);
    pub fn getifmaddrs(arg1: *mut *mut Struct_ifmaddrs)
     -> ::std::os::raw::c_int;
    pub fn freeifmaddrs(arg1: *mut Struct_ifmaddrs);
    pub fn inet_addr(arg1: *const ::std::os::raw::c_char) -> in_addr_t;
    pub fn inet_ntoa(arg1: Struct_in_addr) -> *mut ::std::os::raw::c_char;
    pub fn inet_ntop(arg1: ::std::os::raw::c_int,
                     arg2: *const ::std::os::raw::c_void,
                     arg3: *mut ::std::os::raw::c_char, arg4: socklen_t)
     -> *const ::std::os::raw::c_char;
    pub fn inet_pton(arg1: ::std::os::raw::c_int,
                     arg2: *const ::std::os::raw::c_char,
                     arg3: *mut ::std::os::raw::c_void)
     -> ::std::os::raw::c_int;
    pub fn ascii2addr(arg1: ::std::os::raw::c_int,
                      arg2: *const ::std::os::raw::c_char,
                      arg3: *mut ::std::os::raw::c_void)
     -> ::std::os::raw::c_int;
    pub fn addr2ascii(arg1: ::std::os::raw::c_int,
                      arg2: *const ::std::os::raw::c_void,
                      arg3: ::std::os::raw::c_int,
                      arg4: *mut ::std::os::raw::c_char)
     -> *mut ::std::os::raw::c_char;
    pub fn inet_aton(arg1: *const ::std::os::raw::c_char,
                     arg2: *mut Struct_in_addr) -> ::std::os::raw::c_int;
    pub fn inet_lnaof(arg1: Struct_in_addr) -> in_addr_t;
    pub fn inet_makeaddr(arg1: in_addr_t, arg2: in_addr_t) -> Struct_in_addr;
    pub fn inet_netof(arg1: Struct_in_addr) -> in_addr_t;
    pub fn inet_network(arg1: *const ::std::os::raw::c_char) -> in_addr_t;
    pub fn inet_net_ntop(arg1: ::std::os::raw::c_int,
                         arg2: *const ::std::os::raw::c_void,
                         arg3: ::std::os::raw::c_int,
                         arg4: *mut ::std::os::raw::c_char,
                         arg5: __darwin_size_t)
     -> *mut ::std::os::raw::c_char;
    pub fn inet_net_pton(arg1: ::std::os::raw::c_int,
                         arg2: *const ::std::os::raw::c_char,
                         arg3: *mut ::std::os::raw::c_void,
                         arg4: __darwin_size_t) -> ::std::os::raw::c_int;
    pub fn inet_neta(arg1: in_addr_t, arg2: *mut ::std::os::raw::c_char,
                     arg3: __darwin_size_t) -> *mut ::std::os::raw::c_char;
    pub fn inet_nsap_addr(arg1: *const ::std::os::raw::c_char,
                          arg2: *mut ::std::os::raw::c_uchar,
                          arg3: ::std::os::raw::c_int)
     -> ::std::os::raw::c_uint;
    pub fn inet_nsap_ntoa(arg1: ::std::os::raw::c_int,
                          arg2: *const ::std::os::raw::c_uchar,
                          arg3: *mut ::std::os::raw::c_char)
     -> *mut ::std::os::raw::c_char;
    pub fn mach_msg_overwrite(msg: *mut mach_msg_header_t,
                              option: mach_msg_option_t,
                              send_size: mach_msg_size_t,
                              rcv_size: mach_msg_size_t,
                              rcv_name: mach_port_name_t,
                              timeout: mach_msg_timeout_t,
                              notify: mach_port_name_t,
                              rcv_msg: *mut mach_msg_header_t,
                              rcv_limit: mach_msg_size_t)
     -> mach_msg_return_t;
    pub fn mach_msg(msg: *mut mach_msg_header_t, option: mach_msg_option_t,
                    send_size: mach_msg_size_t, rcv_size: mach_msg_size_t,
                    rcv_name: mach_port_name_t, timeout: mach_msg_timeout_t,
                    notify: mach_port_name_t) -> mach_msg_return_t;
    pub fn mach_voucher_deallocate(voucher: mach_port_name_t)
     -> kern_return_t;
    pub fn mig_get_reply_port() -> mach_port_t;
    pub fn mig_dealloc_reply_port(reply_port: mach_port_t);
    pub fn mig_put_reply_port(reply_port: mach_port_t);
    pub fn mig_strncpy(dest: *mut ::std::os::raw::c_char,
                       src: *const ::std::os::raw::c_char,
                       len: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
    pub fn mig_allocate(arg1: *mut vm_address_t, arg2: vm_size_t);
    pub fn mig_deallocate(arg1: vm_address_t, arg2: vm_size_t);
    pub fn clock_get_time(clock_serv: clock_serv_t,
                          cur_time: *mut mach_timespec_t) -> kern_return_t;
    pub fn clock_get_attributes(clock_serv: clock_serv_t,
                                flavor: clock_flavor_t,
                                clock_attr: clock_attr_t,
                                clock_attrCnt: *mut mach_msg_type_number_t)
     -> kern_return_t;
    pub fn clock_alarm(clock_serv: clock_serv_t, alarm_type: alarm_type_t,
                       alarm_time: mach_timespec_t, alarm_port: clock_reply_t)
     -> kern_return_t;
    pub fn clock_set_time(clock_ctrl: clock_ctrl_t, new_time: mach_timespec_t)
     -> kern_return_t;
    pub fn clock_set_attributes(clock_ctrl: clock_ctrl_t,
                                flavor: clock_flavor_t,
                                clock_attr: clock_attr_t,
                                clock_attrCnt: mach_msg_type_number_t)
     -> kern_return_t;
    pub fn host_get_boot_info(host_priv: host_priv_t,
                              boot_info: kernel_boot_info_t) -> kern_return_t;
    pub fn host_reboot(host_priv: host_priv_t, options: ::std::os::raw::c_int)
     -> kern_return_t;
    pub fn host_priv_statistics(host_priv: host_priv_t, flavor: host_flavor_t,
                                host_info_out: host_info_t,
                                host_info_outCnt: *mut mach_msg_type_number_t)
     -> kern_return_t;
    pub fn host_default_memory_manager(host_priv: host_priv_t,
                                       default_manager:
                                           *mut memory_object_default_t,
                                       cluster_size:
                                           memory_object_cluster_size_t)
     -> kern_return_t;
    pub fn vm_wire(host_priv: host_priv_t, task: vm_map_t,
                   address: vm_address_t, size: vm_size_t,
                   desired_access: vm_prot_t) -> kern_return_t;
    pub fn thread_wire(host_priv: host_priv_t, thread: thread_act_t,
                       wired: boolean_t) -> kern_return_t;
    pub fn vm_allocate_cpm(host_priv: host_priv_t, task: vm_map_t,
                           address: *mut vm_address_t, size: vm_size_t,
                           flags: ::std::os::raw::c_int) -> kern_return_t;
    pub fn host_processors(host_priv: host_priv_t,
                           out_processor_list: *mut processor_array_t,
                           out_processor_listCnt: *mut mach_msg_type_number_t)
     -> kern_return_t;
    pub fn host_get_clock_control(host_priv: host_priv_t,
                                  clock_id: clock_id_t,
                                  clock_ctrl: *mut clock_ctrl_t)
     -> kern_return_t;
    pub fn kmod_create(host_priv: host_priv_t, info: vm_address_t,
                       module: *mut kmod_t) -> kern_return_t;
    pub fn kmod_destroy(host_priv: host_priv_t, module: kmod_t)
     -> kern_return_t;
    pub fn kmod_control(host_priv: host_priv_t, module: kmod_t,
                        flavor: kmod_control_flavor_t, data: *mut kmod_args_t,
                        dataCnt: *mut mach_msg_type_number_t)
     -> kern_return_t;
    pub fn host_get_special_port(host_priv: host_priv_t,
                                 node: ::std::os::raw::c_int,
                                 which: ::std::os::raw::c_int,
                                 port: *mut mach_port_t) -> kern_return_t;
    pub fn host_set_special_port(host_priv: host_priv_t,
                                 which: ::std::os::raw::c_int,
                                 port: mach_port_t) -> kern_return_t;
    pub fn host_set_exception_ports(host_priv: host_priv_t,
                                    exception_mask: exception_mask_t,
                                    new_port: mach_port_t,
                                    behavior: exception_behavior_t,
                                    new_flavor: thread_state_flavor_t)
     -> kern_return_t;
    pub fn host_get_exception_ports(host_priv: host_priv_t,
                                    exception_mask: exception_mask_t,
                                    masks: exception_mask_array_t,
                                    masksCnt: *mut mach_msg_type_number_t,
                                    old_handlers: exception_handler_array_t,
                                    old_behaviors: exception_behavior_array_t,
                                    old_flavors: exception_flavor_array_t)
     -> kern_return_t;
    pub fn host_swap_exception_ports(host_priv: host_priv_t,
                                     exception_mask: exception_mask_t,
                                     new_port: mach_port_t,
                                     behavior: exception_behavior_t,
                                     new_flavor: thread_state_flavor_t,
                                     masks: exception_mask_array_t,
                                     masksCnt: *mut mach_msg_type_number_t,
                                     old_handlerss: exception_handler_array_t,
                                     old_behaviors:
                                         exception_behavior_array_t,
                                     old_flavors: exception_flavor_array_t)
     -> kern_return_t;
    pub fn mach_vm_wire(host_priv: host_priv_t, task: vm_map_t,
                        address: mach_vm_address_t, size: mach_vm_size_t,
                        desired_access: vm_prot_t) -> kern_return_t;
    pub fn host_processor_sets(host_priv: host_priv_t,
                               processor_sets:
                                   *mut processor_set_name_array_t,
                               processor_setsCnt: *mut mach_msg_type_number_t)
     -> kern_return_t;
    pub fn host_processor_set_priv(host_priv: host_priv_t,
                                   set_name: processor_set_name_t,
                                   set: *mut processor_set_t)
     -> kern_return_t;
    pub fn set_dp_control_port(host: host_priv_t, control_port: mach_port_t)
     -> kern_return_t;
    pub fn get_dp_control_port(host: host_priv_t,
                               contorl_port: *mut mach_port_t)
     -> kern_return_t;
    pub fn host_set_UNDServer(host: host_priv_t, server: UNDServerRef)
     -> kern_return_t;
    pub fn host_get_UNDServer(host: host_priv_t, server: *mut UNDServerRef)
     -> kern_return_t;
    pub fn kext_request(host_priv: host_priv_t, user_log_flags: uint32_t,
                        request_data: vm_offset_t,
                        request_dataCnt: mach_msg_type_number_t,
                        response_data: *mut vm_offset_t,
                        response_dataCnt: *mut mach_msg_type_number_t,
                        log_data: *mut vm_offset_t,
                        log_dataCnt: *mut mach_msg_type_number_t,
                        op_result: *mut kern_return_t) -> kern_return_t;
    pub fn host_security_create_task_token(host_security: host_security_t,
                                           parent_task: task_t,
                                           sec_token: security_token_t,
                                           audit_token: audit_token_t,
                                           host: host_t,
                                           ledgers: ledger_array_t,
                                           ledgersCnt: mach_msg_type_number_t,
                                           inherit_memory: boolean_t,
                                           child_task: *mut task_t)
     -> kern_return_t;
    pub fn host_security_set_task_token(host_security: host_security_t,
                                        target_task: task_t,
                                        sec_token: security_token_t,
                                        audit_token: audit_token_t,
                                        host: host_t) -> kern_return_t;
    pub fn lock_acquire(lock_set: lock_set_t, lock_id: ::std::os::raw::c_int)
     -> kern_return_t;
    pub fn lock_release(lock_set: lock_set_t, lock_id: ::std::os::raw::c_int)
     -> kern_return_t;
    pub fn lock_try(lock_set: lock_set_t, lock_id: ::std::os::raw::c_int)
     -> kern_return_t;
    pub fn lock_make_stable(lock_set: lock_set_t,
                            lock_id: ::std::os::raw::c_int) -> kern_return_t;
    pub fn lock_handoff(lock_set: lock_set_t, lock_id: ::std::os::raw::c_int)
     -> kern_return_t;
    pub fn lock_handoff_accept(lock_set: lock_set_t,
                               lock_id: ::std::os::raw::c_int)
     -> kern_return_t;
    pub fn processor_start(processor: processor_t) -> kern_return_t;
    pub fn processor_exit(processor: processor_t) -> kern_return_t;
    pub fn processor_info(processor: processor_t, flavor: processor_flavor_t,
                          host: *mut host_t,
                          processor_info_out: processor_info_t,
                          processor_info_outCnt: *mut mach_msg_type_number_t)
     -> kern_return_t;
    pub fn processor_control(processor: processor_t,
                             processor_cmd: processor_info_t,
                             processor_cmdCnt: mach_msg_type_number_t)
     -> kern_return_t;
    pub fn processor_assign(processor: processor_t, new_set: processor_set_t,
                            wait: boolean_t) -> kern_return_t;
    pub fn processor_get_assignment(processor: processor_t,
                                    assigned_set: *mut processor_set_name_t)
     -> kern_return_t;
    pub fn processor_set_statistics(pset: processor_set_name_t,
                                    flavor: processor_set_flavor_t,
                                    info_out: processor_set_info_t,
                                    info_outCnt: *mut mach_msg_type_number_t)
     -> kern_return_t;
    pub fn processor_set_destroy(set: processor_set_t) -> kern_return_t;
    pub fn processor_set_max_priority(processor_set: processor_set_t,
                                      max_priority: ::std::os::raw::c_int,
                                      change_threads: boolean_t)
     -> kern_return_t;
    pub fn processor_set_policy_enable(processor_set: processor_set_t,
                                       policy: ::std::os::raw::c_int)
     -> kern_return_t;
    pub fn processor_set_policy_disable(processor_set: processor_set_t,
                                        policy: ::std::os::raw::c_int,
                                        change_threads: boolean_t)
     -> kern_return_t;
    pub fn processor_set_tasks(processor_set: processor_set_t,
                               task_list: *mut task_array_t,
                               task_listCnt: *mut mach_msg_type_number_t)
     -> kern_return_t;
    pub fn processor_set_threads(processor_set: processor_set_t,
                                 thread_list: *mut thread_act_array_t,
                                 thread_listCnt: *mut mach_msg_type_number_t)
     -> kern_return_t;
    pub fn processor_set_policy_control(pset: processor_set_t,
                                        flavor: processor_set_flavor_t,
                                        policy_info: processor_set_info_t,
                                        policy_infoCnt:
                                            mach_msg_type_number_t,
                                        change: boolean_t) -> kern_return_t;
    pub fn processor_set_stack_usage(pset: processor_set_t,
                                     ltotal: *mut ::std::os::raw::c_uint,
                                     space: *mut vm_size_t,
                                     resident: *mut vm_size_t,
                                     maxusage: *mut vm_size_t,
                                     maxstack: *mut vm_offset_t)
     -> kern_return_t;
    pub fn processor_set_info(set_name: processor_set_name_t,
                              flavor: ::std::os::raw::c_int,
                              host: *mut host_t,
                              info_out: processor_set_info_t,
                              info_outCnt: *mut mach_msg_type_number_t)
     -> kern_return_t;
    pub fn semaphore_signal(semaphore: semaphore_t) -> kern_return_t;
    pub fn semaphore_signal_all(semaphore: semaphore_t) -> kern_return_t;
    pub fn semaphore_wait(semaphore: semaphore_t) -> kern_return_t;
    pub fn semaphore_timedwait(semaphore: semaphore_t,
                               wait_time: mach_timespec_t) -> kern_return_t;
    pub fn semaphore_timedwait_signal(wait_semaphore: semaphore_t,
                                      signal_semaphore: semaphore_t,
                                      wait_time: mach_timespec_t)
     -> kern_return_t;
    pub fn semaphore_wait_signal(wait_semaphore: semaphore_t,
                                 signal_semaphore: semaphore_t)
     -> kern_return_t;
    pub fn semaphore_signal_thread(semaphore: semaphore_t, thread: thread_t)
     -> kern_return_t;
    pub fn task_create(target_task: task_t, ledgers: ledger_array_t,
                       ledgersCnt: mach_msg_type_number_t,
                       inherit_memory: boolean_t, child_task: *mut task_t)
     -> kern_return_t;
    pub fn task_terminate(target_task: task_t) -> kern_return_t;
    pub fn task_threads(target_task: task_t,
                        act_list: *mut thread_act_array_t,
                        act_listCnt: *mut mach_msg_type_number_t)
     -> kern_return_t;
    pub fn mach_ports_register(target_task: task_t,
                               init_port_set: mach_port_array_t,
                               init_port_setCnt: mach_msg_type_number_t)
     -> kern_return_t;
    pub fn mach_ports_lookup(target_task: task_t,
                             init_port_set: *mut mach_port_array_t,
                             init_port_setCnt: *mut mach_msg_type_number_t)
     -> kern_return_t;
    pub fn task_info(target_task: task_name_t, flavor: task_flavor_t,
                     task_info_out: task_info_t,
                     task_info_outCnt: *mut mach_msg_type_number_t)
     -> kern_return_t;
    pub fn task_set_info(target_task: task_t, flavor: task_flavor_t,
                         task_info_in: task_info_t,
                         task_info_inCnt: mach_msg_type_number_t)
     -> kern_return_t;
    pub fn task_suspend(target_task: task_t) -> kern_return_t;
    pub fn task_resume(target_task: task_t) -> kern_return_t;
    pub fn task_get_special_port(task: task_t,
                                 which_port: ::std::os::raw::c_int,
                                 special_port: *mut mach_port_t)
     -> kern_return_t;
    pub fn task_set_special_port(task: task_t,
                                 which_port: ::std::os::raw::c_int,
                                 special_port: mach_port_t) -> kern_return_t;
    pub fn thread_create(parent_task: task_t, child_act: *mut thread_act_t)
     -> kern_return_t;
    pub fn thread_create_running(parent_task: task_t,
                                 flavor: thread_state_flavor_t,
                                 new_state: thread_state_t,
                                 new_stateCnt: mach_msg_type_number_t,
                                 child_act: *mut thread_act_t)
     -> kern_return_t;
    pub fn task_set_exception_ports(task: task_t,
                                    exception_mask: exception_mask_t,
                                    new_port: mach_port_t,
                                    behavior: exception_behavior_t,
                                    new_flavor: thread_state_flavor_t)
     -> kern_return_t;
    pub fn task_get_exception_ports(task: task_t,
                                    exception_mask: exception_mask_t,
                                    masks: exception_mask_array_t,
                                    masksCnt: *mut mach_msg_type_number_t,
                                    old_handlers: exception_handler_array_t,
                                    old_behaviors: exception_behavior_array_t,
                                    old_flavors: exception_flavor_array_t)
     -> kern_return_t;
    pub fn task_swap_exception_ports(task: task_t,
                                     exception_mask: exception_mask_t,
                                     new_port: mach_port_t,
                                     behavior: exception_behavior_t,
                                     new_flavor: thread_state_flavor_t,
                                     masks: exception_mask_array_t,
                                     masksCnt: *mut mach_msg_type_number_t,
                                     old_handlerss: exception_handler_array_t,
                                     old_behaviors:
                                         exception_behavior_array_t,
                                     old_flavors: exception_flavor_array_t)
     -> kern_return_t;
    pub fn lock_set_create(task: task_t, new_lock_set: *mut lock_set_t,
                           n_ulocks: ::std::os::raw::c_int,
                           policy: ::std::os::raw::c_int) -> kern_return_t;
    pub fn lock_set_destroy(task: task_t, lock_set: lock_set_t)
     -> kern_return_t;
    pub fn semaphore_create(task: task_t, semaphore: *mut semaphore_t,
                            policy: ::std::os::raw::c_int,
                            value: ::std::os::raw::c_int) -> kern_return_t;
    pub fn semaphore_destroy(task: task_t, semaphore: semaphore_t)
     -> kern_return_t;
    pub fn task_policy_set(task: task_t, flavor: task_policy_flavor_t,
                           policy_info: task_policy_t,
                           policy_infoCnt: mach_msg_type_number_t)
     -> kern_return_t;
    pub fn task_policy_get(task: task_t, flavor: task_policy_flavor_t,
                           policy_info: task_policy_t,
                           policy_infoCnt: *mut mach_msg_type_number_t,
                           get_default: *mut boolean_t) -> kern_return_t;
    pub fn task_sample(task: task_t, reply: mach_port_t) -> kern_return_t;
    pub fn task_policy(task: task_t, policy: policy_t, base: policy_base_t,
                       baseCnt: mach_msg_type_number_t, set_limit: boolean_t,
                       change: boolean_t) -> kern_return_t;
    pub fn task_set_emulation(target_port: task_t,
                              routine_entry_pt: vm_address_t,
                              routine_number: ::std::os::raw::c_int)
     -> kern_return_t;
    pub fn task_get_emulation_vector(task: task_t,
                                     vector_start: *mut ::std::os::raw::c_int,
                                     emulation_vector:
                                         *mut emulation_vector_t,
                                     emulation_vectorCnt:
                                         *mut mach_msg_type_number_t)
     -> kern_return_t;
    pub fn task_set_emulation_vector(task: task_t,
                                     vector_start: ::std::os::raw::c_int,
                                     emulation_vector: emulation_vector_t,
                                     emulation_vectorCnt:
                                         mach_msg_type_number_t)
     -> kern_return_t;
    pub fn task_set_ras_pc(target_task: task_t, basepc: vm_address_t,
                           boundspc: vm_address_t) -> kern_return_t;
    pub fn task_zone_info(target_task: task_t,
                          names: *mut mach_zone_name_array_t,
                          namesCnt: *mut mach_msg_type_number_t,
                          info: *mut task_zone_info_array_t,
                          infoCnt: *mut mach_msg_type_number_t)
     -> kern_return_t;
    pub fn task_assign(task: task_t, new_set: processor_set_t,
                       assign_threads: boolean_t) -> kern_return_t;
    pub fn task_assign_default(task: task_t, assign_threads: boolean_t)
     -> kern_return_t;
    pub fn task_get_assignment(task: task_t,
                               assigned_set: *mut processor_set_name_t)
     -> kern_return_t;
    pub fn task_set_policy(task: task_t, pset: processor_set_t,
                           policy: policy_t, base: policy_base_t,
                           baseCnt: mach_msg_type_number_t,
                           limit: policy_limit_t,
                           limitCnt: mach_msg_type_number_t,
                           change: boolean_t) -> kern_return_t;
    pub fn task_get_state(task: task_t, flavor: thread_state_flavor_t,
                          old_state: thread_state_t,
                          old_stateCnt: *mut mach_msg_type_number_t)
     -> kern_return_t;
    pub fn task_set_state(task: task_t, flavor: thread_state_flavor_t,
                          new_state: thread_state_t,
                          new_stateCnt: mach_msg_type_number_t)
     -> kern_return_t;
    pub fn task_set_phys_footprint_limit(task: task_t,
                                         new_limit: ::std::os::raw::c_int,
                                         old_limit:
                                             *mut ::std::os::raw::c_int)
     -> kern_return_t;
    pub fn task_suspend2(target_task: task_t,
                         suspend_token: *mut task_suspension_token_t)
     -> kern_return_t;
    pub fn task_resume2(suspend_token: task_suspension_token_t)
     -> kern_return_t;
    pub fn task_purgable_info(task: task_t, stats: *mut task_purgable_info_t)
     -> kern_return_t;
    pub fn task_get_mach_voucher(task: task_t, which: mach_voucher_selector_t,
                                 voucher: *mut ipc_voucher_t)
     -> kern_return_t;
    pub fn task_set_mach_voucher(task: task_t, voucher: ipc_voucher_t)
     -> kern_return_t;
    pub fn task_swap_mach_voucher(task: task_t, new_voucher: ipc_voucher_t,
                                  old_voucher: *mut ipc_voucher_t)
     -> kern_return_t;
    pub fn thread_terminate(target_act: thread_act_t) -> kern_return_t;
    pub fn act_get_state(target_act: thread_act_t,
                         flavor: ::std::os::raw::c_int,
                         old_state: thread_state_t,
                         old_stateCnt: *mut mach_msg_type_number_t)
     -> kern_return_t;
    pub fn act_set_state(target_act: thread_act_t,
                         flavor: ::std::os::raw::c_int,
                         new_state: thread_state_t,
                         new_stateCnt: mach_msg_type_number_t)
     -> kern_return_t;
    pub fn thread_get_state(target_act: thread_act_t,
                            flavor: thread_state_flavor_t,
                            old_state: thread_state_t,
                            old_stateCnt: *mut mach_msg_type_number_t)
     -> kern_return_t;
    pub fn thread_set_state(target_act: thread_act_t,
                            flavor: thread_state_flavor_t,
                            new_state: thread_state_t,
                            new_stateCnt: mach_msg_type_number_t)
     -> kern_return_t;
    pub fn thread_suspend(target_act: thread_act_t) -> kern_return_t;
    pub fn thread_resume(target_act: thread_act_t) -> kern_return_t;
    pub fn thread_abort(target_act: thread_act_t) -> kern_return_t;
    pub fn thread_abort_safely(target_act: thread_act_t) -> kern_return_t;
    pub fn thread_depress_abort(thread: thread_act_t) -> kern_return_t;
    pub fn thread_get_special_port(thr_act: thread_act_t,
                                   which_port: ::std::os::raw::c_int,
                                   special_port: *mut mach_port_t)
     -> kern_return_t;
    pub fn thread_set_special_port(thr_act: thread_act_t,
                                   which_port: ::std::os::raw::c_int,
                                   special_port: mach_port_t)
     -> kern_return_t;
    pub fn thread_info(target_act: thread_act_t, flavor: thread_flavor_t,
                       thread_info_out: thread_info_t,
                       thread_info_outCnt: *mut mach_msg_type_number_t)
     -> kern_return_t;
    pub fn thread_set_exception_ports(thread: thread_act_t,
                                      exception_mask: exception_mask_t,
                                      new_port: mach_port_t,
                                      behavior: exception_behavior_t,
                                      new_flavor: thread_state_flavor_t)
     -> kern_return_t;
    pub fn thread_get_exception_ports(thread: thread_act_t,
                                      exception_mask: exception_mask_t,
                                      masks: exception_mask_array_t,
                                      masksCnt: *mut mach_msg_type_number_t,
                                      old_handlers: exception_handler_array_t,
                                      old_behaviors:
                                          exception_behavior_array_t,
                                      old_flavors: exception_flavor_array_t)
     -> kern_return_t;
    pub fn thread_swap_exception_ports(thread: thread_act_t,
                                       exception_mask: exception_mask_t,
                                       new_port: mach_port_t,
                                       behavior: exception_behavior_t,
                                       new_flavor: thread_state_flavor_t,
                                       masks: exception_mask_array_t,
                                       masksCnt: *mut mach_msg_type_number_t,
                                       old_handlers:
                                           exception_handler_array_t,
                                       old_behaviors:
                                           exception_behavior_array_t,
                                       old_flavors: exception_flavor_array_t)
     -> kern_return_t;
    pub fn thread_policy(thr_act: thread_act_t, policy: policy_t,
                         base: policy_base_t, baseCnt: mach_msg_type_number_t,
                         set_limit: boolean_t) -> kern_return_t;
    pub fn thread_policy_set(thread: thread_act_t,
                             flavor: thread_policy_flavor_t,
                             policy_info: thread_policy_t,
                             policy_infoCnt: mach_msg_type_number_t)
     -> kern_return_t;
    pub fn thread_policy_get(thread: thread_act_t,
                             flavor: thread_policy_flavor_t,
                             policy_info: thread_policy_t,
                             policy_infoCnt: *mut mach_msg_type_number_t,
                             get_default: *mut boolean_t) -> kern_return_t;
    pub fn thread_sample(thread: thread_act_t, reply: mach_port_t)
     -> kern_return_t;
    pub fn etap_trace_thread(target_act: thread_act_t,
                             trace_status: boolean_t) -> kern_return_t;
    pub fn thread_assign(thread: thread_act_t, new_set: processor_set_t)
     -> kern_return_t;
    pub fn thread_assign_default(thread: thread_act_t) -> kern_return_t;
    pub fn thread_get_assignment(thread: thread_act_t,
                                 assigned_set: *mut processor_set_name_t)
     -> kern_return_t;
    pub fn thread_set_policy(thr_act: thread_act_t, pset: processor_set_t,
                             policy: policy_t, base: policy_base_t,
                             baseCnt: mach_msg_type_number_t,
                             limit: policy_limit_t,
                             limitCnt: mach_msg_type_number_t)
     -> kern_return_t;
    pub fn thread_get_mach_voucher(thr_act: thread_act_t,
                                   which: mach_voucher_selector_t,
                                   voucher: *mut ipc_voucher_t)
     -> kern_return_t;
    pub fn thread_set_mach_voucher(thr_act: thread_act_t,
                                   voucher: ipc_voucher_t) -> kern_return_t;
    pub fn thread_swap_mach_voucher(thr_act: thread_act_t,
                                    new_voucher: ipc_voucher_t,
                                    old_voucher: *mut ipc_voucher_t)
     -> kern_return_t;
    pub fn vm_region(target_task: vm_map_t, address: *mut vm_address_t,
                     size: *mut vm_size_t, flavor: vm_region_flavor_t,
                     info: vm_region_info_t,
                     infoCnt: *mut mach_msg_type_number_t,
                     object_name: *mut mach_port_t) -> kern_return_t;
    pub fn vm_allocate(target_task: vm_map_t, address: *mut vm_address_t,
                       size: vm_size_t, flags: ::std::os::raw::c_int)
     -> kern_return_t;
    pub fn vm_deallocate(target_task: vm_map_t, address: vm_address_t,
                         size: vm_size_t) -> kern_return_t;
    pub fn vm_protect(target_task: vm_map_t, address: vm_address_t,
                      size: vm_size_t, set_maximum: boolean_t,
                      new_protection: vm_prot_t) -> kern_return_t;
    pub fn vm_inherit(target_task: vm_map_t, address: vm_address_t,
                      size: vm_size_t, new_inheritance: vm_inherit_t)
     -> kern_return_t;
    pub fn vm_read(target_task: vm_map_t, address: vm_address_t,
                   size: vm_size_t, data: *mut vm_offset_t,
                   dataCnt: *mut mach_msg_type_number_t) -> kern_return_t;
    pub fn vm_read_list(target_task: vm_map_t, data_list: vm_read_entry_t,
                        count: natural_t) -> kern_return_t;
    pub fn vm_write(target_task: vm_map_t, address: vm_address_t,
                    data: vm_offset_t, dataCnt: mach_msg_type_number_t)
     -> kern_return_t;
    pub fn vm_copy(target_task: vm_map_t, source_address: vm_address_t,
                   size: vm_size_t, dest_address: vm_address_t)
     -> kern_return_t;
    pub fn vm_read_overwrite(target_task: vm_map_t, address: vm_address_t,
                             size: vm_size_t, data: vm_address_t,
                             outsize: *mut vm_size_t) -> kern_return_t;
    pub fn vm_msync(target_task: vm_map_t, address: vm_address_t,
                    size: vm_size_t, sync_flags: vm_sync_t) -> kern_return_t;
    pub fn vm_behavior_set(target_task: vm_map_t, address: vm_address_t,
                           size: vm_size_t, new_behavior: vm_behavior_t)
     -> kern_return_t;
    pub fn vm_map(target_task: vm_map_t, address: *mut vm_address_t,
                  size: vm_size_t, mask: vm_address_t,
                  flags: ::std::os::raw::c_int, object: mem_entry_name_port_t,
                  offset: vm_offset_t, copy: boolean_t,
                  cur_protection: vm_prot_t, max_protection: vm_prot_t,
                  inheritance: vm_inherit_t) -> kern_return_t;
    pub fn vm_machine_attribute(target_task: vm_map_t, address: vm_address_t,
                                size: vm_size_t,
                                attribute: vm_machine_attribute_t,
                                value: *mut vm_machine_attribute_val_t)
     -> kern_return_t;
    pub fn vm_remap(target_task: vm_map_t, target_address: *mut vm_address_t,
                    size: vm_size_t, mask: vm_address_t,
                    flags: ::std::os::raw::c_int, src_task: vm_map_t,
                    src_address: vm_address_t, copy: boolean_t,
                    cur_protection: *mut vm_prot_t,
                    max_protection: *mut vm_prot_t, inheritance: vm_inherit_t)
     -> kern_return_t;
    pub fn task_wire(target_task: vm_map_t, must_wire: boolean_t)
     -> kern_return_t;
    pub fn mach_make_memory_entry(target_task: vm_map_t, size: *mut vm_size_t,
                                  offset: vm_offset_t, permission: vm_prot_t,
                                  object_handle: *mut mem_entry_name_port_t,
                                  parent_entry: mem_entry_name_port_t)
     -> kern_return_t;
    pub fn vm_map_page_query(target_map: vm_map_t, offset: vm_offset_t,
                             disposition: *mut integer_t,
                             ref_count: *mut integer_t) -> kern_return_t;
    pub fn mach_vm_region_info(task: vm_map_t, address: vm_address_t,
                               region: *mut vm_info_region_t,
                               objects: *mut vm_info_object_array_t,
                               objectsCnt: *mut mach_msg_type_number_t)
     -> kern_return_t;
    pub fn vm_mapped_pages_info(task: vm_map_t,
                                pages: *mut page_address_array_t,
                                pagesCnt: *mut mach_msg_type_number_t)
     -> kern_return_t;
    pub fn vm_region_recurse(target_task: vm_map_t,
                             address: *mut vm_address_t, size: *mut vm_size_t,
                             nesting_depth: *mut natural_t,
                             info: vm_region_recurse_info_t,
                             infoCnt: *mut mach_msg_type_number_t)
     -> kern_return_t;
    pub fn vm_region_recurse_64(target_task: vm_map_t,
                                address: *mut vm_address_t,
                                size: *mut vm_size_t,
                                nesting_depth: *mut natural_t,
                                info: vm_region_recurse_info_t,
                                infoCnt: *mut mach_msg_type_number_t)
     -> kern_return_t;
    pub fn mach_vm_region_info_64(task: vm_map_t, address: vm_address_t,
                                  region: *mut vm_info_region_64_t,
                                  objects: *mut vm_info_object_array_t,
                                  objectsCnt: *mut mach_msg_type_number_t)
     -> kern_return_t;
    pub fn vm_region_64(target_task: vm_map_t, address: *mut vm_address_t,
                        size: *mut vm_size_t, flavor: vm_region_flavor_t,
                        info: vm_region_info_t,
                        infoCnt: *mut mach_msg_type_number_t,
                        object_name: *mut mach_port_t) -> kern_return_t;
    pub fn mach_make_memory_entry_64(target_task: vm_map_t,
                                     size: *mut memory_object_size_t,
                                     offset: memory_object_offset_t,
                                     permission: vm_prot_t,
                                     object_handle: *mut mach_port_t,
                                     parent_entry: mem_entry_name_port_t)
     -> kern_return_t;
    pub fn vm_map_64(target_task: vm_map_t, address: *mut vm_address_t,
                     size: vm_size_t, mask: vm_address_t,
                     flags: ::std::os::raw::c_int,
                     object: mem_entry_name_port_t,
                     offset: memory_object_offset_t, copy: boolean_t,
                     cur_protection: vm_prot_t, max_protection: vm_prot_t,
                     inheritance: vm_inherit_t) -> kern_return_t;
    pub fn vm_purgable_control(target_task: vm_map_t, address: vm_address_t,
                               control: vm_purgable_t,
                               state: *mut ::std::os::raw::c_int)
     -> kern_return_t;
    pub fn mach_port_names(task: ipc_space_t,
                           names: *mut mach_port_name_array_t,
                           namesCnt: *mut mach_msg_type_number_t,
                           types: *mut mach_port_type_array_t,
                           typesCnt: *mut mach_msg_type_number_t)
     -> kern_return_t;
    pub fn mach_port_type(task: ipc_space_t, name: mach_port_name_t,
                          ptype: *mut mach_port_type_t) -> kern_return_t;
    pub fn mach_port_rename(task: ipc_space_t, old_name: mach_port_name_t,
                            new_name: mach_port_name_t) -> kern_return_t;
    pub fn mach_port_allocate_name(task: ipc_space_t,
                                   right: mach_port_right_t,
                                   name: mach_port_name_t) -> kern_return_t;
    pub fn mach_port_allocate(task: ipc_space_t, right: mach_port_right_t,
                              name: *mut mach_port_name_t) -> kern_return_t;
    pub fn mach_port_destroy(task: ipc_space_t, name: mach_port_name_t)
     -> kern_return_t;
    pub fn mach_port_deallocate(task: ipc_space_t, name: mach_port_name_t)
     -> kern_return_t;
    pub fn mach_port_get_refs(task: ipc_space_t, name: mach_port_name_t,
                              right: mach_port_right_t,
                              refs: *mut mach_port_urefs_t) -> kern_return_t;
    pub fn mach_port_mod_refs(task: ipc_space_t, name: mach_port_name_t,
                              right: mach_port_right_t,
                              delta: mach_port_delta_t) -> kern_return_t;
    pub fn mach_port_peek(task: ipc_space_t, name: mach_port_name_t,
                          trailer_type: mach_msg_trailer_type_t,
                          request_seqnop: *mut mach_port_seqno_t,
                          msg_sizep: *mut mach_msg_size_t,
                          msg_idp: *mut mach_msg_id_t,
                          trailer_infop: mach_msg_trailer_info_t,
                          trailer_infopCnt: *mut mach_msg_type_number_t)
     -> kern_return_t;
    pub fn mach_port_set_mscount(task: ipc_space_t, name: mach_port_name_t,
                                 mscount: mach_port_mscount_t)
     -> kern_return_t;
    pub fn mach_port_get_set_status(task: ipc_space_t, name: mach_port_name_t,
                                    members: *mut mach_port_name_array_t,
                                    membersCnt: *mut mach_msg_type_number_t)
     -> kern_return_t;
    pub fn mach_port_move_member(task: ipc_space_t, member: mach_port_name_t,
                                 after: mach_port_name_t) -> kern_return_t;
    pub fn mach_port_request_notification(task: ipc_space_t,
                                          name: mach_port_name_t,
                                          msgid: mach_msg_id_t,
                                          sync: mach_port_mscount_t,
                                          notify: mach_port_t,
                                          notifyPoly: mach_msg_type_name_t,
                                          previous: *mut mach_port_t)
     -> kern_return_t;
    pub fn mach_port_insert_right(task: ipc_space_t, name: mach_port_name_t,
                                  poly: mach_port_t,
                                  polyPoly: mach_msg_type_name_t)
     -> kern_return_t;
    pub fn mach_port_extract_right(task: ipc_space_t, name: mach_port_name_t,
                                   msgt_name: mach_msg_type_name_t,
                                   poly: *mut mach_port_t,
                                   polyPoly: *mut mach_msg_type_name_t)
     -> kern_return_t;
    pub fn mach_port_set_seqno(task: ipc_space_t, name: mach_port_name_t,
                               seqno: mach_port_seqno_t) -> kern_return_t;
    pub fn mach_port_get_attributes(task: ipc_space_t, name: mach_port_name_t,
                                    flavor: mach_port_flavor_t,
                                    port_info_out: mach_port_info_t,
                                    port_info_outCnt:
                                        *mut mach_msg_type_number_t)
     -> kern_return_t;
    pub fn mach_port_set_attributes(task: ipc_space_t, name: mach_port_name_t,
                                    flavor: mach_port_flavor_t,
                                    port_info: mach_port_info_t,
                                    port_infoCnt: mach_msg_type_number_t)
     -> kern_return_t;
    pub fn mach_port_allocate_qos(task: ipc_space_t, right: mach_port_right_t,
                                  qos: *mut mach_port_qos_t,
                                  name: *mut mach_port_name_t)
     -> kern_return_t;
    pub fn mach_port_allocate_full(task: ipc_space_t,
                                   right: mach_port_right_t,
                                   proto: mach_port_t,
                                   qos: *mut mach_port_qos_t,
                                   name: *mut mach_port_name_t)
     -> kern_return_t;
    pub fn task_set_port_space(task: ipc_space_t,
                               table_entries: ::std::os::raw::c_int)
     -> kern_return_t;
    pub fn mach_port_get_srights(task: ipc_space_t, name: mach_port_name_t,
                                 srights: *mut mach_port_rights_t)
     -> kern_return_t;
    pub fn mach_port_space_info(task: ipc_space_t,
                                space_info: *mut ipc_info_space_t,
                                table_info: *mut ipc_info_name_array_t,
                                table_infoCnt: *mut mach_msg_type_number_t,
                                tree_info: *mut ipc_info_tree_name_array_t,
                                tree_infoCnt: *mut mach_msg_type_number_t)
     -> kern_return_t;
    pub fn mach_port_dnrequest_info(task: ipc_space_t, name: mach_port_name_t,
                                    dnr_total: *mut ::std::os::raw::c_uint,
                                    dnr_used: *mut ::std::os::raw::c_uint)
     -> kern_return_t;
    pub fn mach_port_kernel_object(task: ipc_space_t, name: mach_port_name_t,
                                   object_type: *mut ::std::os::raw::c_uint,
                                   object_addr: *mut ::std::os::raw::c_uint)
     -> kern_return_t;
    pub fn mach_port_insert_member(task: ipc_space_t, name: mach_port_name_t,
                                   pset: mach_port_name_t) -> kern_return_t;
    pub fn mach_port_extract_member(task: ipc_space_t, name: mach_port_name_t,
                                    pset: mach_port_name_t) -> kern_return_t;
    pub fn mach_port_get_context(task: ipc_space_t, name: mach_port_name_t,
                                 context: *mut mach_port_context_t)
     -> kern_return_t;
    pub fn mach_port_set_context(task: ipc_space_t, name: mach_port_name_t,
                                 context: mach_port_context_t)
     -> kern_return_t;
    pub fn mach_port_kobject(task: ipc_space_t, name: mach_port_name_t,
                             object_type: *mut natural_t,
                             object_addr: *mut mach_vm_address_t)
     -> kern_return_t;
    pub fn mach_port_construct(task: ipc_space_t,
                               options: mach_port_options_ptr_t,
                               context: mach_port_context_t,
                               name: *mut mach_port_name_t) -> kern_return_t;
    pub fn mach_port_destruct(task: ipc_space_t, name: mach_port_name_t,
                              srdelta: mach_port_delta_t,
                              guard: mach_port_context_t) -> kern_return_t;
    pub fn mach_port_guard(task: ipc_space_t, name: mach_port_name_t,
                           guard: mach_port_context_t, strict: boolean_t)
     -> kern_return_t;
    pub fn mach_port_unguard(task: ipc_space_t, name: mach_port_name_t,
                             guard: mach_port_context_t) -> kern_return_t;
    pub fn mach_port_space_basic_info(task: ipc_space_t,
                                      basic_info: *mut ipc_info_space_basic_t)
     -> kern_return_t;
    pub fn mach_host_self() -> mach_port_t;
    pub fn mach_thread_self() -> mach_port_t;
    pub fn host_page_size(arg1: host_t, arg2: *mut vm_size_t)
     -> kern_return_t;
    pub fn clock_sleep_trap(clock_name: mach_port_name_t,
                            sleep_type: sleep_type_t,
                            sleep_sec: ::std::os::raw::c_int,
                            sleep_nsec: ::std::os::raw::c_int,
                            wakeup_time: *mut mach_timespec_t)
     -> kern_return_t;
    pub fn _kernelrpc_mach_vm_allocate_trap(target: mach_port_name_t,
                                            addr: *mut mach_vm_offset_t,
                                            size: mach_vm_size_t,
                                            flags: ::std::os::raw::c_int)
     -> kern_return_t;
    pub fn _kernelrpc_mach_vm_deallocate_trap(target: mach_port_name_t,
                                              address: mach_vm_address_t,
                                              size: mach_vm_size_t)
     -> kern_return_t;
    pub fn _kernelrpc_mach_vm_protect_trap(target: mach_port_name_t,
                                           address: mach_vm_address_t,
                                           size: mach_vm_size_t,
                                           set_maximum: boolean_t,
                                           new_protection: vm_prot_t)
     -> kern_return_t;
    pub fn _kernelrpc_mach_vm_map_trap(target: mach_port_name_t,
                                       address: *mut mach_vm_offset_t,
                                       size: mach_vm_size_t,
                                       mask: mach_vm_offset_t,
                                       flags: ::std::os::raw::c_int,
                                       cur_protection: vm_prot_t)
     -> kern_return_t;
    pub fn _kernelrpc_mach_port_allocate_trap(target: mach_port_name_t,
                                              right: mach_port_right_t,
                                              name: *mut mach_port_name_t)
     -> kern_return_t;
    pub fn _kernelrpc_mach_port_destroy_trap(target: mach_port_name_t,
                                             name: mach_port_name_t)
     -> kern_return_t;
    pub fn _kernelrpc_mach_port_deallocate_trap(target: mach_port_name_t,
                                                name: mach_port_name_t)
     -> kern_return_t;
    pub fn _kernelrpc_mach_port_mod_refs_trap(target: mach_port_name_t,
                                              name: mach_port_name_t,
                                              right: mach_port_right_t,
                                              delta: mach_port_delta_t)
     -> kern_return_t;
    pub fn _kernelrpc_mach_port_move_member_trap(target: mach_port_name_t,
                                                 member: mach_port_name_t,
                                                 after: mach_port_name_t)
     -> kern_return_t;
    pub fn _kernelrpc_mach_port_insert_right_trap(target: mach_port_name_t,
                                                  name: mach_port_name_t,
                                                  poly: mach_port_name_t,
                                                  polyPoly:
                                                      mach_msg_type_name_t)
     -> kern_return_t;
    pub fn _kernelrpc_mach_port_insert_member_trap(target: mach_port_name_t,
                                                   name: mach_port_name_t,
                                                   pset: mach_port_name_t)
     -> kern_return_t;
    pub fn _kernelrpc_mach_port_extract_member_trap(target: mach_port_name_t,
                                                    name: mach_port_name_t,
                                                    pset: mach_port_name_t)
     -> kern_return_t;
    pub fn _kernelrpc_mach_port_construct_trap(target: mach_port_name_t,
                                               options:
                                                   *mut mach_port_options_t,
                                               context: uint64_t,
                                               name: *mut mach_port_name_t)
     -> kern_return_t;
    pub fn _kernelrpc_mach_port_destruct_trap(target: mach_port_name_t,
                                              name: mach_port_name_t,
                                              srdelta: mach_port_delta_t,
                                              guard: uint64_t)
     -> kern_return_t;
    pub fn _kernelrpc_mach_port_guard_trap(target: mach_port_name_t,
                                           name: mach_port_name_t,
                                           guard: uint64_t, strict: boolean_t)
     -> kern_return_t;
    pub fn _kernelrpc_mach_port_unguard_trap(target: mach_port_name_t,
                                             name: mach_port_name_t,
                                             guard: uint64_t)
     -> kern_return_t;
    pub fn macx_swapon(filename: uint64_t, flags: ::std::os::raw::c_int,
                       size: ::std::os::raw::c_int,
                       priority: ::std::os::raw::c_int) -> kern_return_t;
    pub fn macx_swapoff(filename: uint64_t, flags: ::std::os::raw::c_int)
     -> kern_return_t;
    pub fn macx_triggers(hi_water: ::std::os::raw::c_int,
                         low_water: ::std::os::raw::c_int,
                         flags: ::std::os::raw::c_int,
                         alert_port: mach_port_t) -> kern_return_t;
    pub fn macx_backing_store_suspend(suspend: boolean_t) -> kern_return_t;
    pub fn macx_backing_store_recovery(pid: ::std::os::raw::c_int)
     -> kern_return_t;
    pub fn swtch_pri(pri: ::std::os::raw::c_int) -> boolean_t;
    pub fn swtch() -> boolean_t;
    pub fn thread_switch(thread_name: mach_port_name_t,
                         option: ::std::os::raw::c_int,
                         option_time: mach_msg_timeout_t) -> kern_return_t;
    pub fn task_self_trap() -> mach_port_name_t;
    pub fn task_for_pid(target_tport: mach_port_name_t,
                        pid: ::std::os::raw::c_int, t: *mut mach_port_name_t)
     -> kern_return_t;
    pub fn task_name_for_pid(target_tport: mach_port_name_t,
                             pid: ::std::os::raw::c_int,
                             tn: *mut mach_port_name_t) -> kern_return_t;
    pub fn pid_for_task(t: mach_port_name_t, x: *mut ::std::os::raw::c_int)
     -> kern_return_t;
    pub fn host_info(host: host_t, flavor: host_flavor_t,
                     host_info_out: host_info_t,
                     host_info_outCnt: *mut mach_msg_type_number_t)
     -> kern_return_t;
    pub fn host_kernel_version(host: host_t, kernel_version: kernel_version_t)
     -> kern_return_t;
    pub fn _host_page_size(host: host_t, out_page_size: *mut vm_size_t)
     -> kern_return_t;
    pub fn mach_memory_object_memory_entry(host: host_t, internal: boolean_t,
                                           size: vm_size_t,
                                           permission: vm_prot_t,
                                           pager: memory_object_t,
                                           entry_handle: *mut mach_port_t)
     -> kern_return_t;
    pub fn host_processor_info(host: host_t, flavor: processor_flavor_t,
                               out_processor_count: *mut natural_t,
                               out_processor_info:
                                   *mut processor_info_array_t,
                               out_processor_infoCnt:
                                   *mut mach_msg_type_number_t)
     -> kern_return_t;
    pub fn host_get_io_master(host: host_t, io_master: *mut io_master_t)
     -> kern_return_t;
    pub fn host_get_clock_service(host: host_t, clock_id: clock_id_t,
                                  clock_serv: *mut clock_serv_t)
     -> kern_return_t;
    pub fn kmod_get_info(host: host_t, modules: *mut kmod_args_t,
                         modulesCnt: *mut mach_msg_type_number_t)
     -> kern_return_t;
    pub fn host_zone_info(host: host_priv_t, names: *mut zone_name_array_t,
                          namesCnt: *mut mach_msg_type_number_t,
                          info: *mut zone_info_array_t,
                          infoCnt: *mut mach_msg_type_number_t)
     -> kern_return_t;
    pub fn host_virtual_physical_table_info(host: host_t,
                                            info:
                                                *mut hash_info_bucket_array_t,
                                            infoCnt:
                                                *mut mach_msg_type_number_t)
     -> kern_return_t;
    pub fn processor_set_default(host: host_t,
                                 default_set: *mut processor_set_name_t)
     -> kern_return_t;
    pub fn processor_set_create(host: host_t, new_set: *mut processor_set_t,
                                new_name: *mut processor_set_name_t)
     -> kern_return_t;
    pub fn mach_memory_object_memory_entry_64(host: host_t,
                                              internal: boolean_t,
                                              size: memory_object_size_t,
                                              permission: vm_prot_t,
                                              pager: memory_object_t,
                                              entry_handle: *mut mach_port_t)
     -> kern_return_t;
    pub fn host_statistics(host_priv: host_t, flavor: host_flavor_t,
                           host_info_out: host_info_t,
                           host_info_outCnt: *mut mach_msg_type_number_t)
     -> kern_return_t;
    pub fn host_request_notification(host: host_t, notify_type: host_flavor_t,
                                     notify_port: mach_port_t)
     -> kern_return_t;
    pub fn host_lockgroup_info(host: host_t,
                               lockgroup_info: *mut lockgroup_info_array_t,
                               lockgroup_infoCnt: *mut mach_msg_type_number_t)
     -> kern_return_t;
    pub fn host_statistics64(host_priv: host_t, flavor: host_flavor_t,
                             host_info64_out: host_info64_t,
                             host_info64_outCnt: *mut mach_msg_type_number_t)
     -> kern_return_t;
    pub fn mach_zone_info(host: host_priv_t,
                          names: *mut mach_zone_name_array_t,
                          namesCnt: *mut mach_msg_type_number_t,
                          info: *mut mach_zone_info_array_t,
                          infoCnt: *mut mach_msg_type_number_t)
     -> kern_return_t;
    pub fn host_create_mach_voucher(host: host_t,
                                    recipes:
                                        mach_voucher_attr_raw_recipe_array_t,
                                    recipesCnt: mach_msg_type_number_t,
                                    voucher: *mut ipc_voucher_t)
     -> kern_return_t;
    pub fn host_register_mach_voucher_attr_manager(host: host_t,
                                                   attr_manager:
                                                       mach_voucher_attr_manager_t,
                                                   default_value:
                                                       mach_voucher_attr_value_handle_t,
                                                   new_key:
                                                       *mut mach_voucher_attr_key_t,
                                                   new_attr_control:
                                                       *mut ipc_voucher_attr_control_t)
     -> kern_return_t;
    pub fn host_register_well_known_mach_voucher_attr_manager(host: host_t,
                                                              attr_manager:
                                                                  mach_voucher_attr_manager_t,
                                                              default_value:
                                                                  mach_voucher_attr_value_handle_t,
                                                              key:
                                                                  mach_voucher_attr_key_t,
                                                              new_attr_control:
                                                                  *mut ipc_voucher_attr_control_t)
     -> kern_return_t;
    pub fn host_set_atm_diagnostic_flag(host_priv: host_priv_t,
                                        diagnostic_flag: uint32_t)
     -> kern_return_t;
    pub fn host_get_atm_diagnostic_flag(host: host_t,
                                        diagnostic_flag: *mut uint32_t)
     -> kern_return_t;
    pub fn mach_memory_info(host: host_priv_t,
                            names: *mut mach_zone_name_array_t,
                            namesCnt: *mut mach_msg_type_number_t,
                            info: *mut mach_zone_info_array_t,
                            infoCnt: *mut mach_msg_type_number_t,
                            memory_info: *mut mach_memory_info_array_t,
                            memory_infoCnt: *mut mach_msg_type_number_t)
     -> kern_return_t;
    pub fn host_set_multiuser_config_flags(host_priv: host_priv_t,
                                           multiuser_flags: uint32_t)
     -> kern_return_t;
    pub fn host_get_multiuser_config_flags(host: host_t,
                                           multiuser_flags: *mut uint32_t)
     -> kern_return_t;
    pub fn host_check_multiuser_mode(host: host_t,
                                     multiuser_mode: *mut uint32_t)
     -> kern_return_t;
    pub fn mach_error_string(error_value: mach_error_t)
     -> *mut ::std::os::raw::c_char;
    pub fn mach_error(str: *const ::std::os::raw::c_char,
                      error_value: mach_error_t);
    pub fn mach_error_type(error_value: mach_error_t)
     -> *mut ::std::os::raw::c_char;
    pub fn panic_init(arg1: mach_port_t);
    pub fn panic(arg1: *const ::std::os::raw::c_char, ...);
    pub fn safe_gets(arg1: *mut ::std::os::raw::c_char,
                     arg2: *mut ::std::os::raw::c_char,
                     arg3: ::std::os::raw::c_int);
    pub fn slot_name(arg1: cpu_type_t, arg2: cpu_subtype_t,
                     arg3: *mut *mut ::std::os::raw::c_char,
                     arg4: *mut *mut ::std::os::raw::c_char);
    pub fn mig_reply_setup(arg1: *mut mach_msg_header_t,
                           arg2: *mut mach_msg_header_t);
    pub fn mach_msg_destroy(arg1: *mut mach_msg_header_t);
    pub fn mach_msg_receive(arg1: *mut mach_msg_header_t)
     -> mach_msg_return_t;
    pub fn mach_msg_send(arg1: *mut mach_msg_header_t) -> mach_msg_return_t;
    pub fn mach_msg_server_once(arg1:
                                    ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                                   *mut mach_msg_header_t,
                                                                               arg2:
                                                                                   *mut mach_msg_header_t)
                                                              -> boolean_t>,
                                arg2: mach_msg_size_t, arg3: mach_port_t,
                                arg4: mach_msg_options_t)
     -> mach_msg_return_t;
    pub fn mach_msg_server(arg1:
                               ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                              *mut mach_msg_header_t,
                                                                          arg2:
                                                                              *mut mach_msg_header_t)
                                                         -> boolean_t>,
                           arg2: mach_msg_size_t, arg3: mach_port_t,
                           arg4: mach_msg_options_t) -> mach_msg_return_t;
    pub fn mach_msg_server_importance(arg1:
                                          ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                                         *mut mach_msg_header_t,
                                                                                     arg2:
                                                                                         *mut mach_msg_header_t)
                                                                    ->
                                                                        boolean_t>,
                                      arg2: mach_msg_size_t,
                                      arg3: mach_port_t,
                                      arg4: mach_msg_options_t)
     -> mach_msg_return_t;
    pub fn clock_get_res(arg1: mach_port_t, arg2: *mut clock_res_t)
     -> kern_return_t;
    pub fn clock_set_res(arg1: mach_port_t, arg2: clock_res_t)
     -> kern_return_t;
    pub fn clock_sleep(arg1: mach_port_t, arg2: ::std::os::raw::c_int,
                       arg3: mach_timespec_t, arg4: *mut mach_timespec_t)
     -> kern_return_t;
    pub fn voucher_mach_msg_set(msg: *mut mach_msg_header_t) -> boolean_t;
    pub fn voucher_mach_msg_clear(msg: *mut mach_msg_header_t);
    pub fn voucher_mach_msg_adopt(msg: *mut mach_msg_header_t)
     -> voucher_mach_msg_state_t;
    pub fn voucher_mach_msg_revert(state: voucher_mach_msg_state_t);
    pub fn _NSGetArgv() -> *mut *mut *mut ::std::os::raw::c_char;
    pub fn _NSGetArgc() -> *mut ::std::os::raw::c_int;
    pub fn _NSGetEnviron() -> *mut *mut *mut ::std::os::raw::c_char;
    pub fn _NSGetProgname() -> *mut *mut ::std::os::raw::c_char;
    pub fn _NSGetMachExecuteHeader() -> *mut Struct_mach_header_64;
    pub fn zactor_new(task: zactor_fn, args: *mut ::std::os::raw::c_void)
     -> *mut zactor_t;
    pub fn zactor_destroy(self_p: *mut *mut zactor_t);
    pub fn zactor_send(_self: *mut zactor_t, msg_p: *mut *mut zmsg_t)
     -> ::std::os::raw::c_int;
    pub fn zactor_recv(_self: *mut zactor_t) -> *mut zmsg_t;
    pub fn zactor_is(_self: *mut ::std::os::raw::c_void) -> u8;
    pub fn zactor_resolve(_self: *mut ::std::os::raw::c_void)
     -> *mut ::std::os::raw::c_void;
    pub fn zactor_sock(_self: *mut zactor_t) -> *mut zsock_t;
    pub fn zactor_test(verbose: u8);
    pub fn zarmour_new() -> *mut zarmour_t;
    pub fn zarmour_destroy(self_p: *mut *mut zarmour_t);
    pub fn zarmour_encode(_self: *mut zarmour_t, data: *const byte,
                          size: size_t) -> *mut ::std::os::raw::c_char;
    pub fn zarmour_decode(_self: *mut zarmour_t,
                          data: *const ::std::os::raw::c_char)
     -> *mut zchunk_t;
    pub fn zarmour_mode(_self: *mut zarmour_t) -> ::std::os::raw::c_int;
    pub fn zarmour_mode_str(_self: *mut zarmour_t)
     -> *const ::std::os::raw::c_char;
    pub fn zarmour_set_mode(_self: *mut zarmour_t,
                            mode: ::std::os::raw::c_int);
    pub fn zarmour_pad(_self: *mut zarmour_t) -> u8;
    pub fn zarmour_set_pad(_self: *mut zarmour_t, pad: u8);
    pub fn zarmour_pad_char(_self: *mut zarmour_t) -> ::std::os::raw::c_char;
    pub fn zarmour_set_pad_char(_self: *mut zarmour_t,
                                pad_char: ::std::os::raw::c_char);
    pub fn zarmour_line_breaks(_self: *mut zarmour_t) -> u8;
    pub fn zarmour_set_line_breaks(_self: *mut zarmour_t, line_breaks: u8);
    pub fn zarmour_line_length(_self: *mut zarmour_t) -> size_t;
    pub fn zarmour_set_line_length(_self: *mut zarmour_t,
                                   line_length: size_t);
    pub fn zarmour_print(_self: *mut zarmour_t);
    pub fn zarmour_test(verbose: u8);
    pub fn zcert_new() -> *mut zcert_t;
    pub fn zcert_new_from(public_key: *const byte, secret_key: *const byte)
     -> *mut zcert_t;
    pub fn zcert_load(filename: *const ::std::os::raw::c_char)
     -> *mut zcert_t;
    pub fn zcert_destroy(self_p: *mut *mut zcert_t);
    pub fn zcert_public_key(_self: *mut zcert_t) -> *const byte;
    pub fn zcert_secret_key(_self: *mut zcert_t) -> *const byte;
    pub fn zcert_public_txt(_self: *mut zcert_t)
     -> *const ::std::os::raw::c_char;
    pub fn zcert_secret_txt(_self: *mut zcert_t)
     -> *const ::std::os::raw::c_char;
    pub fn zcert_set_meta(_self: *mut zcert_t,
                          name: *const ::std::os::raw::c_char,
                          format: *const ::std::os::raw::c_char, ...);
    pub fn zcert_meta(_self: *mut zcert_t,
                      name: *const ::std::os::raw::c_char)
     -> *const ::std::os::raw::c_char;
    pub fn zcert_meta_keys(_self: *mut zcert_t) -> *mut zlist_t;
    pub fn zcert_save(_self: *mut zcert_t,
                      filename: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
    pub fn zcert_save_public(_self: *mut zcert_t,
                             filename: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
    pub fn zcert_save_secret(_self: *mut zcert_t,
                             filename: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
    pub fn zcert_apply(_self: *mut zcert_t,
                       socket: *mut ::std::os::raw::c_void);
    pub fn zcert_dup(_self: *mut zcert_t) -> *mut zcert_t;
    pub fn zcert_eq(_self: *mut zcert_t, compare: *mut zcert_t) -> u8;
    pub fn zcert_print(_self: *mut zcert_t);
    pub fn zcert_fprint(_self: *mut zcert_t, file: *mut FILE);
    pub fn zcert_test(verbose: u8);
    pub fn zcertstore_new(location: *const ::std::os::raw::c_char)
     -> *mut zcertstore_t;
    pub fn zcertstore_destroy(self_p: *mut *mut zcertstore_t);
    pub fn zcertstore_set_loader(_self: *mut zcertstore_t,
                                 loader: zcertstore_loader);
    pub fn zcertstore_lookup(_self: *mut zcertstore_t,
                             public_key: *const ::std::os::raw::c_char)
     -> *mut zcert_t;
    pub fn zcertstore_insert(_self: *mut zcertstore_t,
                             cert_p: *mut *mut zcert_t);
    pub fn zcertstore_empty(_self: *mut zcertstore_t);
    pub fn zcertstore_print(_self: *mut zcertstore_t);
    pub fn zcertstore_fprint(_self: *mut zcertstore_t, file: *mut FILE);
    pub fn zcertstore_test(verbose: u8);
    pub fn zchunk_new(data: *const ::std::os::raw::c_void, size: size_t)
     -> *mut zchunk_t;
    pub fn zchunk_destroy(self_p: *mut *mut zchunk_t);
    pub fn zchunk_resize(_self: *mut zchunk_t, size: size_t);
    pub fn zchunk_size(_self: *mut zchunk_t) -> size_t;
    pub fn zchunk_max_size(_self: *mut zchunk_t) -> size_t;
    pub fn zchunk_data(_self: *mut zchunk_t) -> *mut byte;
    pub fn zchunk_set(_self: *mut zchunk_t,
                      data: *const ::std::os::raw::c_void, size: size_t)
     -> size_t;
    pub fn zchunk_fill(_self: *mut zchunk_t, filler: byte, size: size_t)
     -> size_t;
    pub fn zchunk_append(_self: *mut zchunk_t,
                         data: *const ::std::os::raw::c_void, size: size_t)
     -> size_t;
    pub fn zchunk_extend(_self: *mut zchunk_t,
                         data: *const ::std::os::raw::c_void, size: size_t)
     -> size_t;
    pub fn zchunk_consume(_self: *mut zchunk_t, source: *mut zchunk_t)
     -> size_t;
    pub fn zchunk_exhausted(_self: *mut zchunk_t) -> u8;
    pub fn zchunk_read(handle: *mut FILE, bytes: size_t) -> *mut zchunk_t;
    pub fn zchunk_write(_self: *mut zchunk_t, handle: *mut FILE)
     -> ::std::os::raw::c_int;
    pub fn zchunk_slurp(filename: *const ::std::os::raw::c_char,
                        maxsize: size_t) -> *mut zchunk_t;
    pub fn zchunk_dup(_self: *mut zchunk_t) -> *mut zchunk_t;
    pub fn zchunk_strhex(_self: *mut zchunk_t) -> *mut ::std::os::raw::c_char;
    pub fn zchunk_strdup(_self: *mut zchunk_t) -> *mut ::std::os::raw::c_char;
    pub fn zchunk_streq(_self: *mut zchunk_t,
                        string: *const ::std::os::raw::c_char) -> u8;
    pub fn zchunk_pack(_self: *mut zchunk_t) -> *mut zframe_t;
    pub fn zchunk_unpack(frame: *mut zframe_t) -> *mut zchunk_t;
    pub fn zchunk_digest(_self: *mut zchunk_t)
     -> *const ::std::os::raw::c_char;
    pub fn zchunk_fprint(_self: *mut zchunk_t, file: *mut FILE);
    pub fn zchunk_print(_self: *mut zchunk_t);
    pub fn zchunk_is(_self: *mut ::std::os::raw::c_void) -> u8;
    pub fn zchunk_test(verbose: u8);
    pub fn zclock_sleep(msecs: ::std::os::raw::c_int);
    pub fn zclock_time() -> int64_t;
    pub fn zclock_mono() -> int64_t;
    pub fn zclock_usecs() -> int64_t;
    pub fn zclock_timestr() -> *mut ::std::os::raw::c_char;
    pub fn zclock_test(verbose: u8);
    pub fn zclock_log(format: *const ::std::os::raw::c_char, ...);
    pub fn zconfig_new(name: *const ::std::os::raw::c_char,
                       parent: *mut zconfig_t) -> *mut zconfig_t;
    pub fn zconfig_load(filename: *const ::std::os::raw::c_char)
     -> *mut zconfig_t;
    pub fn zconfig_loadf(format: *const ::std::os::raw::c_char, ...)
     -> *mut zconfig_t;
    pub fn zconfig_destroy(self_p: *mut *mut zconfig_t);
    pub fn zconfig_name(_self: *mut zconfig_t) -> *mut ::std::os::raw::c_char;
    pub fn zconfig_value(_self: *mut zconfig_t)
     -> *mut ::std::os::raw::c_char;
    pub fn zconfig_put(_self: *mut zconfig_t,
                       path: *const ::std::os::raw::c_char,
                       value: *const ::std::os::raw::c_char);
    pub fn zconfig_putf(_self: *mut zconfig_t,
                        path: *const ::std::os::raw::c_char,
                        format: *const ::std::os::raw::c_char, ...);
    pub fn zconfig_get(_self: *mut zconfig_t,
                       path: *const ::std::os::raw::c_char,
                       default_value: *const ::std::os::raw::c_char)
     -> *mut ::std::os::raw::c_char;
    pub fn zconfig_set_name(_self: *mut zconfig_t,
                            name: *const ::std::os::raw::c_char);
    pub fn zconfig_set_value(_self: *mut zconfig_t,
                             format: *const ::std::os::raw::c_char, ...);
    pub fn zconfig_child(_self: *mut zconfig_t) -> *mut zconfig_t;
    pub fn zconfig_next(_self: *mut zconfig_t) -> *mut zconfig_t;
    pub fn zconfig_locate(_self: *mut zconfig_t,
                          path: *const ::std::os::raw::c_char)
     -> *mut zconfig_t;
    pub fn zconfig_at_depth(_self: *mut zconfig_t,
                            level: ::std::os::raw::c_int) -> *mut zconfig_t;
    pub fn zconfig_execute(_self: *mut zconfig_t, handler: zconfig_fct,
                           arg: *mut ::std::os::raw::c_void)
     -> ::std::os::raw::c_int;
    pub fn zconfig_set_comment(_self: *mut zconfig_t,
                               format: *const ::std::os::raw::c_char, ...);
    pub fn zconfig_comments(_self: *mut zconfig_t) -> *mut zlist_t;
    pub fn zconfig_save(_self: *mut zconfig_t,
                        filename: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
    pub fn zconfig_savef(_self: *mut zconfig_t,
                         format: *const ::std::os::raw::c_char, ...)
     -> ::std::os::raw::c_int;
    pub fn zconfig_filename(_self: *mut zconfig_t)
     -> *const ::std::os::raw::c_char;
    pub fn zconfig_reload(self_p: *mut *mut zconfig_t)
     -> ::std::os::raw::c_int;
    pub fn zconfig_chunk_load(chunk: *mut zchunk_t) -> *mut zconfig_t;
    pub fn zconfig_chunk_save(_self: *mut zconfig_t) -> *mut zchunk_t;
    pub fn zconfig_str_load(string: *const ::std::os::raw::c_char)
     -> *mut zconfig_t;
    pub fn zconfig_str_save(_self: *mut zconfig_t)
     -> *mut ::std::os::raw::c_char;
    pub fn zconfig_has_changed(_self: *mut zconfig_t) -> u8;
    pub fn zconfig_fprint(_self: *mut zconfig_t, file: *mut FILE);
    pub fn zconfig_print(_self: *mut zconfig_t);
    pub fn zconfig_test(verbose: u8);
    pub fn zdigest_new() -> *mut zdigest_t;
    pub fn zdigest_destroy(self_p: *mut *mut zdigest_t);
    pub fn zdigest_update(_self: *mut zdigest_t, buffer: *const byte,
                          length: size_t);
    pub fn zdigest_data(_self: *mut zdigest_t) -> *const byte;
    pub fn zdigest_size(_self: *mut zdigest_t) -> size_t;
    pub fn zdigest_string(_self: *mut zdigest_t)
     -> *mut ::std::os::raw::c_char;
    pub fn zdigest_test(verbose: u8);
    pub fn zdir_new(path: *const ::std::os::raw::c_char,
                    parent: *const ::std::os::raw::c_char) -> *mut zdir_t;
    pub fn zdir_destroy(self_p: *mut *mut zdir_t);
    pub fn zdir_path(_self: *mut zdir_t) -> *const ::std::os::raw::c_char;
    pub fn zdir_modified(_self: *mut zdir_t) -> time_t;
    pub fn zdir_cursize(_self: *mut zdir_t) -> off_t;
    pub fn zdir_count(_self: *mut zdir_t) -> size_t;
    pub fn zdir_list(_self: *mut zdir_t) -> *mut zlist_t;
    pub fn zdir_remove(_self: *mut zdir_t, force: u8);
    pub fn zdir_diff(older: *mut zdir_t, newer: *mut zdir_t,
                     alias: *const ::std::os::raw::c_char) -> *mut zlist_t;
    pub fn zdir_resync(_self: *mut zdir_t,
                       alias: *const ::std::os::raw::c_char) -> *mut zlist_t;
    pub fn zdir_cache(_self: *mut zdir_t) -> *mut zhash_t;
    pub fn zdir_fprint(_self: *mut zdir_t, file: *mut FILE,
                       indent: ::std::os::raw::c_int);
    pub fn zdir_print(_self: *mut zdir_t, indent: ::std::os::raw::c_int);
    pub fn zdir_watch(pipe: *mut zsock_t,
                      unused: *mut ::std::os::raw::c_void);
    pub fn zdir_test(verbose: u8);
    pub fn zdir_flatten(_self: *mut zdir_t) -> *mut *mut zfile_t;
    pub fn zdir_flatten_free(files_p: *mut *mut *mut zfile_t);
    pub fn zdir_patch_new(path: *const ::std::os::raw::c_char,
                          file: *mut zfile_t, op: ::std::os::raw::c_int,
                          alias: *const ::std::os::raw::c_char)
     -> *mut zdir_patch_t;
    pub fn zdir_patch_destroy(self_p: *mut *mut zdir_patch_t);
    pub fn zdir_patch_dup(_self: *mut zdir_patch_t) -> *mut zdir_patch_t;
    pub fn zdir_patch_path(_self: *mut zdir_patch_t)
     -> *const ::std::os::raw::c_char;
    pub fn zdir_patch_file(_self: *mut zdir_patch_t) -> *mut zfile_t;
    pub fn zdir_patch_op(_self: *mut zdir_patch_t) -> ::std::os::raw::c_int;
    pub fn zdir_patch_vpath(_self: *mut zdir_patch_t)
     -> *const ::std::os::raw::c_char;
    pub fn zdir_patch_digest_set(_self: *mut zdir_patch_t);
    pub fn zdir_patch_digest(_self: *mut zdir_patch_t)
     -> *const ::std::os::raw::c_char;
    pub fn zdir_patch_test(verbose: u8);
    pub fn zfile_new(path: *const ::std::os::raw::c_char,
                     name: *const ::std::os::raw::c_char) -> *mut zfile_t;
    pub fn zfile_destroy(self_p: *mut *mut zfile_t);
    pub fn zfile_dup(_self: *mut zfile_t) -> *mut zfile_t;
    pub fn zfile_filename(_self: *mut zfile_t,
                          path: *const ::std::os::raw::c_char)
     -> *const ::std::os::raw::c_char;
    pub fn zfile_restat(_self: *mut zfile_t);
    pub fn zfile_modified(_self: *mut zfile_t) -> time_t;
    pub fn zfile_cursize(_self: *mut zfile_t) -> off_t;
    pub fn zfile_is_directory(_self: *mut zfile_t) -> u8;
    pub fn zfile_is_regular(_self: *mut zfile_t) -> u8;
    pub fn zfile_is_readable(_self: *mut zfile_t) -> u8;
    pub fn zfile_is_writeable(_self: *mut zfile_t) -> u8;
    pub fn zfile_is_stable(_self: *mut zfile_t) -> u8;
    pub fn zfile_has_changed(_self: *mut zfile_t) -> u8;
    pub fn zfile_remove(_self: *mut zfile_t);
    pub fn zfile_input(_self: *mut zfile_t) -> ::std::os::raw::c_int;
    pub fn zfile_output(_self: *mut zfile_t) -> ::std::os::raw::c_int;
    pub fn zfile_read(_self: *mut zfile_t, bytes: size_t, offset: off_t)
     -> *mut zchunk_t;
    pub fn zfile_eof(_self: *mut zfile_t) -> u8;
    pub fn zfile_write(_self: *mut zfile_t, chunk: *mut zchunk_t,
                       offset: off_t) -> ::std::os::raw::c_int;
    pub fn zfile_readln(_self: *mut zfile_t) -> *const ::std::os::raw::c_char;
    pub fn zfile_close(_self: *mut zfile_t);
    pub fn zfile_handle(_self: *mut zfile_t) -> *mut FILE;
    pub fn zfile_digest(_self: *mut zfile_t) -> *const ::std::os::raw::c_char;
    pub fn zfile_test(verbose: u8);
    pub fn zfile_exists(filename: *const ::std::os::raw::c_char) -> u8;
    pub fn zfile_size(filename: *const ::std::os::raw::c_char) -> ssize_t;
    pub fn zfile_mode(filename: *const ::std::os::raw::c_char) -> mode_t;
    pub fn zfile_delete(filename: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
    pub fn zfile_stable(filename: *const ::std::os::raw::c_char) -> u8;
    pub fn zfile_mkdir(pathname: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
    pub fn zfile_rmdir(pathname: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
    pub fn zfile_mode_private();
    pub fn zfile_mode_default();
    pub fn zframe_new(data: *const ::std::os::raw::c_void, size: size_t)
     -> *mut zframe_t;
    pub fn zframe_new_empty() -> *mut zframe_t;
    pub fn zframe_from(string: *const ::std::os::raw::c_char)
     -> *mut zframe_t;
    pub fn zframe_recv(source: *mut ::std::os::raw::c_void) -> *mut zframe_t;
    pub fn zframe_destroy(self_p: *mut *mut zframe_t);
    pub fn zframe_send(self_p: *mut *mut zframe_t,
                       dest: *mut ::std::os::raw::c_void,
                       flags: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
    pub fn zframe_size(_self: *mut zframe_t) -> size_t;
    pub fn zframe_data(_self: *mut zframe_t) -> *mut byte;
    pub fn zframe_meta(_self: *mut zframe_t,
                       property: *const ::std::os::raw::c_char)
     -> *const ::std::os::raw::c_char;
    pub fn zframe_dup(_self: *mut zframe_t) -> *mut zframe_t;
    pub fn zframe_strhex(_self: *mut zframe_t) -> *mut ::std::os::raw::c_char;
    pub fn zframe_strdup(_self: *mut zframe_t) -> *mut ::std::os::raw::c_char;
    pub fn zframe_streq(_self: *mut zframe_t,
                        string: *const ::std::os::raw::c_char) -> u8;
    pub fn zframe_more(_self: *mut zframe_t) -> ::std::os::raw::c_int;
    pub fn zframe_set_more(_self: *mut zframe_t, more: ::std::os::raw::c_int);
    pub fn zframe_eq(_self: *mut zframe_t, other: *mut zframe_t) -> u8;
    pub fn zframe_reset(_self: *mut zframe_t,
                        data: *const ::std::os::raw::c_void, size: size_t);
    pub fn zframe_print(_self: *mut zframe_t,
                        prefix: *const ::std::os::raw::c_char);
    pub fn zframe_is(_self: *mut ::std::os::raw::c_void) -> u8;
    pub fn zframe_test(verbose: u8);
    pub fn zframe_recv_nowait(source: *mut ::std::os::raw::c_void)
     -> *mut zframe_t;
    pub fn zframe_fprint(_self: *mut zframe_t,
                         prefix: *const ::std::os::raw::c_char,
                         file: *mut FILE);
    pub fn zhash_new() -> *mut zhash_t;
    pub fn zhash_unpack(frame: *mut zframe_t) -> *mut zhash_t;
    pub fn zhash_destroy(self_p: *mut *mut zhash_t);
    pub fn zhash_insert(_self: *mut zhash_t,
                        key: *const ::std::os::raw::c_char,
                        item: *mut ::std::os::raw::c_void)
     -> ::std::os::raw::c_int;
    pub fn zhash_update(_self: *mut zhash_t,
                        key: *const ::std::os::raw::c_char,
                        item: *mut ::std::os::raw::c_void);
    pub fn zhash_delete(_self: *mut zhash_t,
                        key: *const ::std::os::raw::c_char);
    pub fn zhash_lookup(_self: *mut zhash_t,
                        key: *const ::std::os::raw::c_char)
     -> *mut ::std::os::raw::c_void;
    pub fn zhash_rename(_self: *mut zhash_t,
                        old_key: *const ::std::os::raw::c_char,
                        new_key: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
    pub fn zhash_freefn(_self: *mut zhash_t,
                        key: *const ::std::os::raw::c_char,
                        free_fn: zhash_free_fn)
     -> *mut ::std::os::raw::c_void;
    pub fn zhash_size(_self: *mut zhash_t) -> size_t;
    pub fn zhash_dup(_self: *mut zhash_t) -> *mut zhash_t;
    pub fn zhash_keys(_self: *mut zhash_t) -> *mut zlist_t;
    pub fn zhash_first(_self: *mut zhash_t) -> *mut ::std::os::raw::c_void;
    pub fn zhash_next(_self: *mut zhash_t) -> *mut ::std::os::raw::c_void;
    pub fn zhash_cursor(_self: *mut zhash_t) -> *const ::std::os::raw::c_char;
    pub fn zhash_comment(_self: *mut zhash_t,
                         format: *const ::std::os::raw::c_char, ...);
    pub fn zhash_pack(_self: *mut zhash_t) -> *mut zframe_t;
    pub fn zhash_save(_self: *mut zhash_t,
                      filename: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
    pub fn zhash_load(_self: *mut zhash_t,
                      filename: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
    pub fn zhash_refresh(_self: *mut zhash_t) -> ::std::os::raw::c_int;
    pub fn zhash_autofree(_self: *mut zhash_t);
    pub fn zhash_foreach(_self: *mut zhash_t, callback: zhash_foreach_fn,
                         argument: *mut ::std::os::raw::c_void)
     -> ::std::os::raw::c_int;
    pub fn zhash_test(verbose: u8);
    pub fn zhashx_new() -> *mut zhashx_t;
    pub fn zhashx_unpack(frame: *mut zframe_t) -> *mut zhashx_t;
    pub fn zhashx_destroy(self_p: *mut *mut zhashx_t);
    pub fn zhashx_insert(_self: *mut zhashx_t,
                         key: *const ::std::os::raw::c_void,
                         item: *mut ::std::os::raw::c_void)
     -> ::std::os::raw::c_int;
    pub fn zhashx_update(_self: *mut zhashx_t,
                         key: *const ::std::os::raw::c_void,
                         item: *mut ::std::os::raw::c_void);
    pub fn zhashx_delete(_self: *mut zhashx_t,
                         key: *const ::std::os::raw::c_void);
    pub fn zhashx_purge(_self: *mut zhashx_t);
    pub fn zhashx_lookup(_self: *mut zhashx_t,
                         key: *const ::std::os::raw::c_void)
     -> *mut ::std::os::raw::c_void;
    pub fn zhashx_rename(_self: *mut zhashx_t,
                         old_key: *const ::std::os::raw::c_void,
                         new_key: *const ::std::os::raw::c_void)
     -> ::std::os::raw::c_int;
    pub fn zhashx_freefn(_self: *mut zhashx_t,
                         key: *const ::std::os::raw::c_void,
                         free_fn: zhashx_free_fn)
     -> *mut ::std::os::raw::c_void;
    pub fn zhashx_size(_self: *mut zhashx_t) -> size_t;
    pub fn zhashx_keys(_self: *mut zhashx_t) -> *mut zlistx_t;
    pub fn zhashx_values(_self: *mut zhashx_t) -> *mut zlistx_t;
    pub fn zhashx_first(_self: *mut zhashx_t) -> *mut ::std::os::raw::c_void;
    pub fn zhashx_next(_self: *mut zhashx_t) -> *mut ::std::os::raw::c_void;
    pub fn zhashx_cursor(_self: *mut zhashx_t)
     -> *const ::std::os::raw::c_void;
    pub fn zhashx_comment(_self: *mut zhashx_t,
                          format: *const ::std::os::raw::c_char, ...);
    pub fn zhashx_save(_self: *mut zhashx_t,
                       filename: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
    pub fn zhashx_load(_self: *mut zhashx_t,
                       filename: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
    pub fn zhashx_refresh(_self: *mut zhashx_t) -> ::std::os::raw::c_int;
    pub fn zhashx_pack(_self: *mut zhashx_t) -> *mut zframe_t;
    pub fn zhashx_dup(_self: *mut zhashx_t) -> *mut zhashx_t;
    pub fn zhashx_set_destructor(_self: *mut zhashx_t,
                                 destructor: zhashx_destructor_fn);
    pub fn zhashx_set_duplicator(_self: *mut zhashx_t,
                                 duplicator: zhashx_duplicator_fn);
    pub fn zhashx_set_key_destructor(_self: *mut zhashx_t,
                                     destructor: zhashx_destructor_fn);
    pub fn zhashx_set_key_duplicator(_self: *mut zhashx_t,
                                     duplicator: zhashx_duplicator_fn);
    pub fn zhashx_set_key_comparator(_self: *mut zhashx_t,
                                     comparator: zhashx_comparator_fn);
    pub fn zhashx_set_key_hasher(_self: *mut zhashx_t,
                                 hasher: zhashx_hash_fn);
    pub fn zhashx_dup_v2(_self: *mut zhashx_t) -> *mut zhashx_t;
    pub fn zhashx_autofree(_self: *mut zhashx_t);
    pub fn zhashx_foreach(_self: *mut zhashx_t, callback: zhashx_foreach_fn,
                          argument: *mut ::std::os::raw::c_void)
     -> ::std::os::raw::c_int;
    pub fn zhashx_test(verbose: u8);
    pub fn ziflist_new() -> *mut ziflist_t;
    pub fn ziflist_destroy(self_p: *mut *mut ziflist_t);
    pub fn ziflist_reload(_self: *mut ziflist_t);
    pub fn ziflist_size(_self: *mut ziflist_t) -> size_t;
    pub fn ziflist_first(_self: *mut ziflist_t)
     -> *const ::std::os::raw::c_char;
    pub fn ziflist_next(_self: *mut ziflist_t)
     -> *const ::std::os::raw::c_char;
    pub fn ziflist_address(_self: *mut ziflist_t)
     -> *const ::std::os::raw::c_char;
    pub fn ziflist_broadcast(_self: *mut ziflist_t)
     -> *const ::std::os::raw::c_char;
    pub fn ziflist_netmask(_self: *mut ziflist_t)
     -> *const ::std::os::raw::c_char;
    pub fn ziflist_print(_self: *mut ziflist_t);
    pub fn ziflist_test(verbose: u8);
    pub fn zlist_new() -> *mut zlist_t;
    pub fn zlist_destroy(self_p: *mut *mut zlist_t);
    pub fn zlist_first(_self: *mut zlist_t) -> *mut ::std::os::raw::c_void;
    pub fn zlist_next(_self: *mut zlist_t) -> *mut ::std::os::raw::c_void;
    pub fn zlist_last(_self: *mut zlist_t) -> *mut ::std::os::raw::c_void;
    pub fn zlist_head(_self: *mut zlist_t) -> *mut ::std::os::raw::c_void;
    pub fn zlist_tail(_self: *mut zlist_t) -> *mut ::std::os::raw::c_void;
    pub fn zlist_item(_self: *mut zlist_t) -> *mut ::std::os::raw::c_void;
    pub fn zlist_append(_self: *mut zlist_t,
                        item: *mut ::std::os::raw::c_void)
     -> ::std::os::raw::c_int;
    pub fn zlist_push(_self: *mut zlist_t, item: *mut ::std::os::raw::c_void)
     -> ::std::os::raw::c_int;
    pub fn zlist_pop(_self: *mut zlist_t) -> *mut ::std::os::raw::c_void;
    pub fn zlist_exists(_self: *mut zlist_t,
                        item: *mut ::std::os::raw::c_void) -> u8;
    pub fn zlist_remove(_self: *mut zlist_t,
                        item: *mut ::std::os::raw::c_void);
    pub fn zlist_dup(_self: *mut zlist_t) -> *mut zlist_t;
    pub fn zlist_purge(_self: *mut zlist_t);
    pub fn zlist_size(_self: *mut zlist_t) -> size_t;
    pub fn zlist_sort(_self: *mut zlist_t, compare: zlist_compare_fn);
    pub fn zlist_autofree(_self: *mut zlist_t);
    pub fn zlist_comparefn(_self: *mut zlist_t, _fn: zlist_compare_fn);
    pub fn zlist_freefn(_self: *mut zlist_t,
                        item: *mut ::std::os::raw::c_void, _fn: zlist_free_fn,
                        at_tail: u8) -> *mut ::std::os::raw::c_void;
    pub fn zlist_test(verbose: u8);
    pub fn zlistx_new() -> *mut zlistx_t;
    pub fn zlistx_destroy(self_p: *mut *mut zlistx_t);
    pub fn zlistx_add_start(_self: *mut zlistx_t,
                            item: *mut ::std::os::raw::c_void)
     -> *mut ::std::os::raw::c_void;
    pub fn zlistx_add_end(_self: *mut zlistx_t,
                          item: *mut ::std::os::raw::c_void)
     -> *mut ::std::os::raw::c_void;
    pub fn zlistx_size(_self: *mut zlistx_t) -> size_t;
    pub fn zlistx_head(_self: *mut zlistx_t) -> *mut ::std::os::raw::c_void;
    pub fn zlistx_tail(_self: *mut zlistx_t) -> *mut ::std::os::raw::c_void;
    pub fn zlistx_first(_self: *mut zlistx_t) -> *mut ::std::os::raw::c_void;
    pub fn zlistx_next(_self: *mut zlistx_t) -> *mut ::std::os::raw::c_void;
    pub fn zlistx_prev(_self: *mut zlistx_t) -> *mut ::std::os::raw::c_void;
    pub fn zlistx_last(_self: *mut zlistx_t) -> *mut ::std::os::raw::c_void;
    pub fn zlistx_item(_self: *mut zlistx_t) -> *mut ::std::os::raw::c_void;
    pub fn zlistx_cursor(_self: *mut zlistx_t) -> *mut ::std::os::raw::c_void;
    pub fn zlistx_handle_item(handle: *mut ::std::os::raw::c_void)
     -> *mut ::std::os::raw::c_void;
    pub fn zlistx_find(_self: *mut zlistx_t,
                       item: *mut ::std::os::raw::c_void)
     -> *mut ::std::os::raw::c_void;
    pub fn zlistx_detach(_self: *mut zlistx_t,
                         handle: *mut ::std::os::raw::c_void)
     -> *mut ::std::os::raw::c_void;
    pub fn zlistx_detach_cur(_self: *mut zlistx_t)
     -> *mut ::std::os::raw::c_void;
    pub fn zlistx_delete(_self: *mut zlistx_t,
                         handle: *mut ::std::os::raw::c_void)
     -> ::std::os::raw::c_int;
    pub fn zlistx_move_start(_self: *mut zlistx_t,
                             handle: *mut ::std::os::raw::c_void);
    pub fn zlistx_move_end(_self: *mut zlistx_t,
                           handle: *mut ::std::os::raw::c_void);
    pub fn zlistx_purge(_self: *mut zlistx_t);
    pub fn zlistx_sort(_self: *mut zlistx_t);
    pub fn zlistx_insert(_self: *mut zlistx_t,
                         item: *mut ::std::os::raw::c_void, low_value: u8)
     -> *mut ::std::os::raw::c_void;
    pub fn zlistx_reorder(_self: *mut zlistx_t,
                          handle: *mut ::std::os::raw::c_void, low_value: u8);
    pub fn zlistx_dup(_self: *mut zlistx_t) -> *mut zlistx_t;
    pub fn zlistx_set_destructor(_self: *mut zlistx_t,
                                 destructor: zlistx_destructor_fn);
    pub fn zlistx_set_duplicator(_self: *mut zlistx_t,
                                 duplicator: zlistx_duplicator_fn);
    pub fn zlistx_set_comparator(_self: *mut zlistx_t,
                                 comparator: zlistx_comparator_fn);
    pub fn zlistx_test(verbose: u8);
    pub fn zloop_new() -> *mut zloop_t;
    pub fn zloop_destroy(self_p: *mut *mut zloop_t);
    pub fn zloop_reader(_self: *mut zloop_t, sock: *mut zsock_t,
                        handler: zloop_reader_fn,
                        arg: *mut ::std::os::raw::c_void)
     -> ::std::os::raw::c_int;
    pub fn zloop_reader_end(_self: *mut zloop_t, sock: *mut zsock_t);
    pub fn zloop_reader_set_tolerant(_self: *mut zloop_t, sock: *mut zsock_t);
    pub fn zloop_poller(_self: *mut zloop_t, item: *mut zmq_pollitem_t,
                        handler: zloop_fn, arg: *mut ::std::os::raw::c_void)
     -> ::std::os::raw::c_int;
    pub fn zloop_poller_end(_self: *mut zloop_t, item: *mut zmq_pollitem_t);
    pub fn zloop_poller_set_tolerant(_self: *mut zloop_t,
                                     item: *mut zmq_pollitem_t);
    pub fn zloop_timer(_self: *mut zloop_t, delay: size_t, times: size_t,
                       handler: zloop_timer_fn,
                       arg: *mut ::std::os::raw::c_void)
     -> ::std::os::raw::c_int;
    pub fn zloop_timer_end(_self: *mut zloop_t,
                           timer_id: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
    pub fn zloop_ticket(_self: *mut zloop_t, handler: zloop_timer_fn,
                        arg: *mut ::std::os::raw::c_void)
     -> *mut ::std::os::raw::c_void;
    pub fn zloop_ticket_reset(_self: *mut zloop_t,
                              handle: *mut ::std::os::raw::c_void);
    pub fn zloop_ticket_delete(_self: *mut zloop_t,
                               handle: *mut ::std::os::raw::c_void);
    pub fn zloop_set_ticket_delay(_self: *mut zloop_t, ticket_delay: size_t);
    pub fn zloop_set_max_timers(_self: *mut zloop_t, max_timers: size_t);
    pub fn zloop_set_verbose(_self: *mut zloop_t, verbose: u8);
    pub fn zloop_start(_self: *mut zloop_t) -> ::std::os::raw::c_int;
    pub fn zloop_test(verbose: u8);
    pub fn zmsg_new() -> *mut zmsg_t;
    pub fn zmsg_recv(source: *mut ::std::os::raw::c_void) -> *mut zmsg_t;
    pub fn zmsg_load(file: *mut FILE) -> *mut zmsg_t;
    pub fn zmsg_decode(frame: *mut zframe_t) -> *mut zmsg_t;
    pub fn zmsg_new_signal(status: byte) -> *mut zmsg_t;
    pub fn zmsg_destroy(self_p: *mut *mut zmsg_t);
    pub fn zmsg_send(self_p: *mut *mut zmsg_t,
                     dest: *mut ::std::os::raw::c_void)
     -> ::std::os::raw::c_int;
    pub fn zmsg_sendm(self_p: *mut *mut zmsg_t,
                      dest: *mut ::std::os::raw::c_void)
     -> ::std::os::raw::c_int;
    pub fn zmsg_size(_self: *mut zmsg_t) -> size_t;
    pub fn zmsg_content_size(_self: *mut zmsg_t) -> size_t;
    pub fn zmsg_prepend(_self: *mut zmsg_t, frame_p: *mut *mut zframe_t)
     -> ::std::os::raw::c_int;
    pub fn zmsg_append(_self: *mut zmsg_t, frame_p: *mut *mut zframe_t)
     -> ::std::os::raw::c_int;
    pub fn zmsg_pop(_self: *mut zmsg_t) -> *mut zframe_t;
    pub fn zmsg_pushmem(_self: *mut zmsg_t,
                        data: *const ::std::os::raw::c_void, size: size_t)
     -> ::std::os::raw::c_int;
    pub fn zmsg_addmem(_self: *mut zmsg_t,
                       data: *const ::std::os::raw::c_void, size: size_t)
     -> ::std::os::raw::c_int;
    pub fn zmsg_pushstr(_self: *mut zmsg_t,
                        string: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
    pub fn zmsg_addstr(_self: *mut zmsg_t,
                       string: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
    pub fn zmsg_pushstrf(_self: *mut zmsg_t,
                         format: *const ::std::os::raw::c_char, ...)
     -> ::std::os::raw::c_int;
    pub fn zmsg_addstrf(_self: *mut zmsg_t,
                        format: *const ::std::os::raw::c_char, ...)
     -> ::std::os::raw::c_int;
    pub fn zmsg_popstr(_self: *mut zmsg_t) -> *mut ::std::os::raw::c_char;
    pub fn zmsg_addmsg(_self: *mut zmsg_t, msg_p: *mut *mut zmsg_t)
     -> ::std::os::raw::c_int;
    pub fn zmsg_popmsg(_self: *mut zmsg_t) -> *mut zmsg_t;
    pub fn zmsg_remove(_self: *mut zmsg_t, frame: *mut zframe_t);
    pub fn zmsg_first(_self: *mut zmsg_t) -> *mut zframe_t;
    pub fn zmsg_next(_self: *mut zmsg_t) -> *mut zframe_t;
    pub fn zmsg_last(_self: *mut zmsg_t) -> *mut zframe_t;
    pub fn zmsg_save(_self: *mut zmsg_t, file: *mut FILE)
     -> ::std::os::raw::c_int;
    pub fn zmsg_encode(_self: *mut zmsg_t) -> *mut zframe_t;
    pub fn zmsg_dup(_self: *mut zmsg_t) -> *mut zmsg_t;
    pub fn zmsg_print(_self: *mut zmsg_t);
    pub fn zmsg_eq(_self: *mut zmsg_t, other: *mut zmsg_t) -> u8;
    pub fn zmsg_signal(_self: *mut zmsg_t) -> ::std::os::raw::c_int;
    pub fn zmsg_is(_self: *mut ::std::os::raw::c_void) -> u8;
    pub fn zmsg_test(verbose: u8);
    pub fn zmsg_unwrap(_self: *mut zmsg_t) -> *mut zframe_t;
    pub fn zmsg_recv_nowait(source: *mut ::std::os::raw::c_void)
     -> *mut zmsg_t;
    pub fn zmsg_wrap(_self: *mut zmsg_t, frame: *mut zframe_t);
    pub fn zmsg_push(_self: *mut zmsg_t, frame: *mut zframe_t)
     -> ::std::os::raw::c_int;
    pub fn zmsg_add(_self: *mut zmsg_t, frame: *mut zframe_t)
     -> ::std::os::raw::c_int;
    pub fn zmsg_fprint(_self: *mut zmsg_t, file: *mut FILE);
    pub fn zpoller_new(reader: *mut ::std::os::raw::c_void, ...)
     -> *mut zpoller_t;
    pub fn zpoller_destroy(self_p: *mut *mut zpoller_t);
    pub fn zpoller_add(_self: *mut zpoller_t,
                       reader: *mut ::std::os::raw::c_void)
     -> ::std::os::raw::c_int;
    pub fn zpoller_remove(_self: *mut zpoller_t,
                          reader: *mut ::std::os::raw::c_void)
     -> ::std::os::raw::c_int;
    pub fn zpoller_wait(_self: *mut zpoller_t, timeout: ::std::os::raw::c_int)
     -> *mut ::std::os::raw::c_void;
    pub fn zpoller_expired(_self: *mut zpoller_t) -> u8;
    pub fn zpoller_terminated(_self: *mut zpoller_t) -> u8;
    pub fn zpoller_test(verbose: u8);
    pub fn zsock_new(_type: ::std::os::raw::c_int) -> *mut zsock_t;
    pub fn zsock_new_pub(endpoint: *const ::std::os::raw::c_char)
     -> *mut zsock_t;
    pub fn zsock_new_sub(endpoint: *const ::std::os::raw::c_char,
                         subscribe: *const ::std::os::raw::c_char)
     -> *mut zsock_t;
    pub fn zsock_new_req(endpoint: *const ::std::os::raw::c_char)
     -> *mut zsock_t;
    pub fn zsock_new_rep(endpoint: *const ::std::os::raw::c_char)
     -> *mut zsock_t;
    pub fn zsock_new_dealer(endpoint: *const ::std::os::raw::c_char)
     -> *mut zsock_t;
    pub fn zsock_new_router(endpoint: *const ::std::os::raw::c_char)
     -> *mut zsock_t;
    pub fn zsock_new_push(endpoint: *const ::std::os::raw::c_char)
     -> *mut zsock_t;
    pub fn zsock_new_pull(endpoint: *const ::std::os::raw::c_char)
     -> *mut zsock_t;
    pub fn zsock_new_xpub(endpoint: *const ::std::os::raw::c_char)
     -> *mut zsock_t;
    pub fn zsock_new_xsub(endpoint: *const ::std::os::raw::c_char)
     -> *mut zsock_t;
    pub fn zsock_new_pair(endpoint: *const ::std::os::raw::c_char)
     -> *mut zsock_t;
    pub fn zsock_new_stream(endpoint: *const ::std::os::raw::c_char)
     -> *mut zsock_t;
    pub fn zsock_destroy(self_p: *mut *mut zsock_t);
    pub fn zsock_bind(_self: *mut zsock_t,
                      format: *const ::std::os::raw::c_char, ...)
     -> ::std::os::raw::c_int;
    pub fn zsock_endpoint(_self: *mut zsock_t)
     -> *const ::std::os::raw::c_char;
    pub fn zsock_unbind(_self: *mut zsock_t,
                        format: *const ::std::os::raw::c_char, ...)
     -> ::std::os::raw::c_int;
    pub fn zsock_connect(_self: *mut zsock_t,
                         format: *const ::std::os::raw::c_char, ...)
     -> ::std::os::raw::c_int;
    pub fn zsock_disconnect(_self: *mut zsock_t,
                            format: *const ::std::os::raw::c_char, ...)
     -> ::std::os::raw::c_int;
    pub fn zsock_attach(_self: *mut zsock_t,
                        endpoints: *const ::std::os::raw::c_char,
                        serverish: u8) -> ::std::os::raw::c_int;
    pub fn zsock_type_str(_self: *mut zsock_t)
     -> *const ::std::os::raw::c_char;
    pub fn zsock_send(_self: *mut ::std::os::raw::c_void,
                      picture: *const ::std::os::raw::c_char, ...)
     -> ::std::os::raw::c_int;
    pub fn zsock_vsend(_self: *mut ::std::os::raw::c_void,
                       picture: *const ::std::os::raw::c_char,
                       argptr: va_list) -> ::std::os::raw::c_int;
    pub fn zsock_recv(_self: *mut ::std::os::raw::c_void,
                      picture: *const ::std::os::raw::c_char, ...)
     -> ::std::os::raw::c_int;
    pub fn zsock_vrecv(_self: *mut ::std::os::raw::c_void,
                       picture: *const ::std::os::raw::c_char,
                       argptr: va_list) -> ::std::os::raw::c_int;
    pub fn zsock_bsend(_self: *mut ::std::os::raw::c_void,
                       picture: *const ::std::os::raw::c_char, ...)
     -> ::std::os::raw::c_int;
    pub fn zsock_brecv(_self: *mut ::std::os::raw::c_void,
                       picture: *const ::std::os::raw::c_char, ...)
     -> ::std::os::raw::c_int;
    pub fn zsock_set_unbounded(_self: *mut ::std::os::raw::c_void);
    pub fn zsock_signal(_self: *mut ::std::os::raw::c_void, status: byte)
     -> ::std::os::raw::c_int;
    pub fn zsock_wait(_self: *mut ::std::os::raw::c_void)
     -> ::std::os::raw::c_int;
    pub fn zsock_flush(_self: *mut ::std::os::raw::c_void);
    pub fn zsock_is(_self: *mut ::std::os::raw::c_void) -> u8;
    pub fn zsock_resolve(_self: *mut ::std::os::raw::c_void)
     -> *mut ::std::os::raw::c_void;
    pub fn zsock_tos(_self: *mut ::std::os::raw::c_void)
     -> ::std::os::raw::c_int;
    pub fn zsock_set_tos(_self: *mut ::std::os::raw::c_void,
                         tos: ::std::os::raw::c_int);
    pub fn zsock_set_router_handover(_self: *mut ::std::os::raw::c_void,
                                     router_handover: ::std::os::raw::c_int);
    pub fn zsock_set_router_mandatory(_self: *mut ::std::os::raw::c_void,
                                      router_mandatory:
                                          ::std::os::raw::c_int);
    pub fn zsock_set_probe_router(_self: *mut ::std::os::raw::c_void,
                                  probe_router: ::std::os::raw::c_int);
    pub fn zsock_set_req_relaxed(_self: *mut ::std::os::raw::c_void,
                                 req_relaxed: ::std::os::raw::c_int);
    pub fn zsock_set_req_correlate(_self: *mut ::std::os::raw::c_void,
                                   req_correlate: ::std::os::raw::c_int);
    pub fn zsock_set_conflate(_self: *mut ::std::os::raw::c_void,
                              conflate: ::std::os::raw::c_int);
    pub fn zsock_zap_domain(_self: *mut ::std::os::raw::c_void)
     -> *mut ::std::os::raw::c_char;
    pub fn zsock_set_zap_domain(_self: *mut ::std::os::raw::c_void,
                                zap_domain: *const ::std::os::raw::c_char);
    pub fn zsock_mechanism(_self: *mut ::std::os::raw::c_void)
     -> ::std::os::raw::c_int;
    pub fn zsock_plain_server(_self: *mut ::std::os::raw::c_void)
     -> ::std::os::raw::c_int;
    pub fn zsock_set_plain_server(_self: *mut ::std::os::raw::c_void,
                                  plain_server: ::std::os::raw::c_int);
    pub fn zsock_plain_username(_self: *mut ::std::os::raw::c_void)
     -> *mut ::std::os::raw::c_char;
    pub fn zsock_set_plain_username(_self: *mut ::std::os::raw::c_void,
                                    plain_username:
                                        *const ::std::os::raw::c_char);
    pub fn zsock_plain_password(_self: *mut ::std::os::raw::c_void)
     -> *mut ::std::os::raw::c_char;
    pub fn zsock_set_plain_password(_self: *mut ::std::os::raw::c_void,
                                    plain_password:
                                        *const ::std::os::raw::c_char);
    pub fn zsock_curve_server(_self: *mut ::std::os::raw::c_void)
     -> ::std::os::raw::c_int;
    pub fn zsock_set_curve_server(_self: *mut ::std::os::raw::c_void,
                                  curve_server: ::std::os::raw::c_int);
    pub fn zsock_curve_publickey(_self: *mut ::std::os::raw::c_void)
     -> *mut ::std::os::raw::c_char;
    pub fn zsock_set_curve_publickey(_self: *mut ::std::os::raw::c_void,
                                     curve_publickey:
                                         *const ::std::os::raw::c_char);
    pub fn zsock_set_curve_publickey_bin(_self: *mut ::std::os::raw::c_void,
                                         curve_publickey: *const byte);
    pub fn zsock_curve_secretkey(_self: *mut ::std::os::raw::c_void)
     -> *mut ::std::os::raw::c_char;
    pub fn zsock_set_curve_secretkey(_self: *mut ::std::os::raw::c_void,
                                     curve_secretkey:
                                         *const ::std::os::raw::c_char);
    pub fn zsock_set_curve_secretkey_bin(_self: *mut ::std::os::raw::c_void,
                                         curve_secretkey: *const byte);
    pub fn zsock_curve_serverkey(_self: *mut ::std::os::raw::c_void)
     -> *mut ::std::os::raw::c_char;
    pub fn zsock_set_curve_serverkey(_self: *mut ::std::os::raw::c_void,
                                     curve_serverkey:
                                         *const ::std::os::raw::c_char);
    pub fn zsock_set_curve_serverkey_bin(_self: *mut ::std::os::raw::c_void,
                                         curve_serverkey: *const byte);
    pub fn zsock_gssapi_server(_self: *mut ::std::os::raw::c_void)
     -> ::std::os::raw::c_int;
    pub fn zsock_set_gssapi_server(_self: *mut ::std::os::raw::c_void,
                                   gssapi_server: ::std::os::raw::c_int);
    pub fn zsock_gssapi_plaintext(_self: *mut ::std::os::raw::c_void)
     -> ::std::os::raw::c_int;
    pub fn zsock_set_gssapi_plaintext(_self: *mut ::std::os::raw::c_void,
                                      gssapi_plaintext:
                                          ::std::os::raw::c_int);
    pub fn zsock_gssapi_principal(_self: *mut ::std::os::raw::c_void)
     -> *mut ::std::os::raw::c_char;
    pub fn zsock_set_gssapi_principal(_self: *mut ::std::os::raw::c_void,
                                      gssapi_principal:
                                          *const ::std::os::raw::c_char);
    pub fn zsock_gssapi_service_principal(_self: *mut ::std::os::raw::c_void)
     -> *mut ::std::os::raw::c_char;
    pub fn zsock_set_gssapi_service_principal(_self:
                                                  *mut ::std::os::raw::c_void,
                                              gssapi_service_principal:
                                                  *const ::std::os::raw::c_char);
    pub fn zsock_ipv6(_self: *mut ::std::os::raw::c_void)
     -> ::std::os::raw::c_int;
    pub fn zsock_set_ipv6(_self: *mut ::std::os::raw::c_void,
                          ipv6: ::std::os::raw::c_int);
    pub fn zsock_immediate(_self: *mut ::std::os::raw::c_void)
     -> ::std::os::raw::c_int;
    pub fn zsock_set_immediate(_self: *mut ::std::os::raw::c_void,
                               immediate: ::std::os::raw::c_int);
    pub fn zsock_set_router_raw(_self: *mut ::std::os::raw::c_void,
                                router_raw: ::std::os::raw::c_int);
    pub fn zsock_ipv4only(_self: *mut ::std::os::raw::c_void)
     -> ::std::os::raw::c_int;
    pub fn zsock_set_ipv4only(_self: *mut ::std::os::raw::c_void,
                              ipv4only: ::std::os::raw::c_int);
    pub fn zsock_set_delay_attach_on_connect(_self:
                                                 *mut ::std::os::raw::c_void,
                                             delay_attach_on_connect:
                                                 ::std::os::raw::c_int);
    pub fn zsock_type(_self: *mut ::std::os::raw::c_void)
     -> ::std::os::raw::c_int;
    pub fn zsock_sndhwm(_self: *mut ::std::os::raw::c_void)
     -> ::std::os::raw::c_int;
    pub fn zsock_set_sndhwm(_self: *mut ::std::os::raw::c_void,
                            sndhwm: ::std::os::raw::c_int);
    pub fn zsock_rcvhwm(_self: *mut ::std::os::raw::c_void)
     -> ::std::os::raw::c_int;
    pub fn zsock_set_rcvhwm(_self: *mut ::std::os::raw::c_void,
                            rcvhwm: ::std::os::raw::c_int);
    pub fn zsock_affinity(_self: *mut ::std::os::raw::c_void)
     -> ::std::os::raw::c_int;
    pub fn zsock_set_affinity(_self: *mut ::std::os::raw::c_void,
                              affinity: ::std::os::raw::c_int);
    pub fn zsock_set_subscribe(_self: *mut ::std::os::raw::c_void,
                               subscribe: *const ::std::os::raw::c_char);
    pub fn zsock_set_unsubscribe(_self: *mut ::std::os::raw::c_void,
                                 unsubscribe: *const ::std::os::raw::c_char);
    pub fn zsock_identity(_self: *mut ::std::os::raw::c_void)
     -> *mut ::std::os::raw::c_char;
    pub fn zsock_set_identity(_self: *mut ::std::os::raw::c_void,
                              identity: *const ::std::os::raw::c_char);
    pub fn zsock_rate(_self: *mut ::std::os::raw::c_void)
     -> ::std::os::raw::c_int;
    pub fn zsock_set_rate(_self: *mut ::std::os::raw::c_void,
                          rate: ::std::os::raw::c_int);
    pub fn zsock_recovery_ivl(_self: *mut ::std::os::raw::c_void)
     -> ::std::os::raw::c_int;
    pub fn zsock_set_recovery_ivl(_self: *mut ::std::os::raw::c_void,
                                  recovery_ivl: ::std::os::raw::c_int);
    pub fn zsock_sndbuf(_self: *mut ::std::os::raw::c_void)
     -> ::std::os::raw::c_int;
    pub fn zsock_set_sndbuf(_self: *mut ::std::os::raw::c_void,
                            sndbuf: ::std::os::raw::c_int);
    pub fn zsock_rcvbuf(_self: *mut ::std::os::raw::c_void)
     -> ::std::os::raw::c_int;
    pub fn zsock_set_rcvbuf(_self: *mut ::std::os::raw::c_void,
                            rcvbuf: ::std::os::raw::c_int);
    pub fn zsock_linger(_self: *mut ::std::os::raw::c_void)
     -> ::std::os::raw::c_int;
    pub fn zsock_set_linger(_self: *mut ::std::os::raw::c_void,
                            linger: ::std::os::raw::c_int);
    pub fn zsock_reconnect_ivl(_self: *mut ::std::os::raw::c_void)
     -> ::std::os::raw::c_int;
    pub fn zsock_set_reconnect_ivl(_self: *mut ::std::os::raw::c_void,
                                   reconnect_ivl: ::std::os::raw::c_int);
    pub fn zsock_reconnect_ivl_max(_self: *mut ::std::os::raw::c_void)
     -> ::std::os::raw::c_int;
    pub fn zsock_set_reconnect_ivl_max(_self: *mut ::std::os::raw::c_void,
                                       reconnect_ivl_max:
                                           ::std::os::raw::c_int);
    pub fn zsock_backlog(_self: *mut ::std::os::raw::c_void)
     -> ::std::os::raw::c_int;
    pub fn zsock_set_backlog(_self: *mut ::std::os::raw::c_void,
                             backlog: ::std::os::raw::c_int);
    pub fn zsock_maxmsgsize(_self: *mut ::std::os::raw::c_void)
     -> ::std::os::raw::c_int;
    pub fn zsock_set_maxmsgsize(_self: *mut ::std::os::raw::c_void,
                                maxmsgsize: ::std::os::raw::c_int);
    pub fn zsock_multicast_hops(_self: *mut ::std::os::raw::c_void)
     -> ::std::os::raw::c_int;
    pub fn zsock_set_multicast_hops(_self: *mut ::std::os::raw::c_void,
                                    multicast_hops: ::std::os::raw::c_int);
    pub fn zsock_rcvtimeo(_self: *mut ::std::os::raw::c_void)
     -> ::std::os::raw::c_int;
    pub fn zsock_set_rcvtimeo(_self: *mut ::std::os::raw::c_void,
                              rcvtimeo: ::std::os::raw::c_int);
    pub fn zsock_sndtimeo(_self: *mut ::std::os::raw::c_void)
     -> ::std::os::raw::c_int;
    pub fn zsock_set_sndtimeo(_self: *mut ::std::os::raw::c_void,
                              sndtimeo: ::std::os::raw::c_int);
    pub fn zsock_set_xpub_verbose(_self: *mut ::std::os::raw::c_void,
                                  xpub_verbose: ::std::os::raw::c_int);
    pub fn zsock_tcp_keepalive(_self: *mut ::std::os::raw::c_void)
     -> ::std::os::raw::c_int;
    pub fn zsock_set_tcp_keepalive(_self: *mut ::std::os::raw::c_void,
                                   tcp_keepalive: ::std::os::raw::c_int);
    pub fn zsock_tcp_keepalive_idle(_self: *mut ::std::os::raw::c_void)
     -> ::std::os::raw::c_int;
    pub fn zsock_set_tcp_keepalive_idle(_self: *mut ::std::os::raw::c_void,
                                        tcp_keepalive_idle:
                                            ::std::os::raw::c_int);
    pub fn zsock_tcp_keepalive_cnt(_self: *mut ::std::os::raw::c_void)
     -> ::std::os::raw::c_int;
    pub fn zsock_set_tcp_keepalive_cnt(_self: *mut ::std::os::raw::c_void,
                                       tcp_keepalive_cnt:
                                           ::std::os::raw::c_int);
    pub fn zsock_tcp_keepalive_intvl(_self: *mut ::std::os::raw::c_void)
     -> ::std::os::raw::c_int;
    pub fn zsock_set_tcp_keepalive_intvl(_self: *mut ::std::os::raw::c_void,
                                         tcp_keepalive_intvl:
                                             ::std::os::raw::c_int);
    pub fn zsock_tcp_accept_filter(_self: *mut ::std::os::raw::c_void)
     -> *mut ::std::os::raw::c_char;
    pub fn zsock_set_tcp_accept_filter(_self: *mut ::std::os::raw::c_void,
                                       tcp_accept_filter:
                                           *const ::std::os::raw::c_char);
    pub fn zsock_rcvmore(_self: *mut ::std::os::raw::c_void)
     -> ::std::os::raw::c_int;
    pub fn zsock_fd(_self: *mut ::std::os::raw::c_void) -> SOCKET;
    pub fn zsock_events(_self: *mut ::std::os::raw::c_void)
     -> ::std::os::raw::c_int;
    pub fn zsock_last_endpoint(_self: *mut ::std::os::raw::c_void)
     -> *mut ::std::os::raw::c_char;
    pub fn zsock_test(verbose: u8);
    pub fn zsock_new_checked(_type: ::std::os::raw::c_int,
                             filename: *const ::std::os::raw::c_char,
                             line_nbr: size_t) -> *mut zsock_t;
    pub fn zsock_destroy_checked(self_p: *mut *mut zsock_t,
                                 filename: *const ::std::os::raw::c_char,
                                 line_nbr: size_t);
    pub fn zsock_new_pub_checked(endpoint: *const ::std::os::raw::c_char,
                                 filename: *const ::std::os::raw::c_char,
                                 line_nbr: size_t) -> *mut zsock_t;
    pub fn zsock_new_sub_checked(endpoint: *const ::std::os::raw::c_char,
                                 subscribe: *const ::std::os::raw::c_char,
                                 filename: *const ::std::os::raw::c_char,
                                 line_nbr: size_t) -> *mut zsock_t;
    pub fn zsock_new_req_checked(endpoint: *const ::std::os::raw::c_char,
                                 filename: *const ::std::os::raw::c_char,
                                 line_nbr: size_t) -> *mut zsock_t;
    pub fn zsock_new_rep_checked(endpoint: *const ::std::os::raw::c_char,
                                 filename: *const ::std::os::raw::c_char,
                                 line_nbr: size_t) -> *mut zsock_t;
    pub fn zsock_new_dealer_checked(endpoint: *const ::std::os::raw::c_char,
                                    filename: *const ::std::os::raw::c_char,
                                    line_nbr: size_t) -> *mut zsock_t;
    pub fn zsock_new_router_checked(endpoint: *const ::std::os::raw::c_char,
                                    filename: *const ::std::os::raw::c_char,
                                    line_nbr: size_t) -> *mut zsock_t;
    pub fn zsock_new_push_checked(endpoint: *const ::std::os::raw::c_char,
                                  filename: *const ::std::os::raw::c_char,
                                  line_nbr: size_t) -> *mut zsock_t;
    pub fn zsock_new_pull_checked(endpoint: *const ::std::os::raw::c_char,
                                  filename: *const ::std::os::raw::c_char,
                                  line_nbr: size_t) -> *mut zsock_t;
    pub fn zsock_new_xpub_checked(endpoint: *const ::std::os::raw::c_char,
                                  filename: *const ::std::os::raw::c_char,
                                  line_nbr: size_t) -> *mut zsock_t;
    pub fn zsock_new_xsub_checked(endpoint: *const ::std::os::raw::c_char,
                                  filename: *const ::std::os::raw::c_char,
                                  line_nbr: size_t) -> *mut zsock_t;
    pub fn zsock_new_pair_checked(endpoint: *const ::std::os::raw::c_char,
                                  filename: *const ::std::os::raw::c_char,
                                  line_nbr: size_t) -> *mut zsock_t;
    pub fn zsock_new_stream_checked(endpoint: *const ::std::os::raw::c_char,
                                    filename: *const ::std::os::raw::c_char,
                                    line_nbr: size_t) -> *mut zsock_t;
    pub fn zsock_new_server_checked(endpoint: *const ::std::os::raw::c_char,
                                    filename: *const ::std::os::raw::c_char,
                                    line_nbr: size_t) -> *mut zsock_t;
    pub fn zsock_new_client_checked(endpoint: *const ::std::os::raw::c_char,
                                    filename: *const ::std::os::raw::c_char,
                                    line_nbr: size_t) -> *mut zsock_t;
    pub fn zsock_new_radio_checked(endpoint: *const ::std::os::raw::c_char,
                                   filename: *const ::std::os::raw::c_char,
                                   line_nbr: size_t) -> *mut zsock_t;
    pub fn zsock_new_dish_checked(endpoint: *const ::std::os::raw::c_char,
                                  filename: *const ::std::os::raw::c_char,
                                  line_nbr: size_t) -> *mut zsock_t;
    pub fn zstr_recv(source: *mut ::std::os::raw::c_void)
     -> *mut ::std::os::raw::c_char;
    pub fn zstr_recvx(source: *mut ::std::os::raw::c_void,
                      string_p: *mut *mut ::std::os::raw::c_char, ...)
     -> ::std::os::raw::c_int;
    pub fn zstr_send(dest: *mut ::std::os::raw::c_void,
                     string: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
    pub fn zstr_sendm(dest: *mut ::std::os::raw::c_void,
                      string: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
    pub fn zstr_sendf(dest: *mut ::std::os::raw::c_void,
                      format: *const ::std::os::raw::c_char, ...)
     -> ::std::os::raw::c_int;
    pub fn zstr_sendfm(dest: *mut ::std::os::raw::c_void,
                       format: *const ::std::os::raw::c_char, ...)
     -> ::std::os::raw::c_int;
    pub fn zstr_sendx(dest: *mut ::std::os::raw::c_void,
                      string: *const ::std::os::raw::c_char, ...)
     -> ::std::os::raw::c_int;
    pub fn zstr_free(string_p: *mut *mut ::std::os::raw::c_char);
    pub fn zstr_test(verbose: u8);
    pub fn zstr_recv_nowait(source: *mut ::std::os::raw::c_void)
     -> *mut ::std::os::raw::c_char;
    pub fn zuuid_new() -> *mut zuuid_t;
    pub fn zuuid_new_from(source: *const byte) -> *mut zuuid_t;
    pub fn zuuid_destroy(self_p: *mut *mut zuuid_t);
    pub fn zuuid_set(_self: *mut zuuid_t, source: *const byte);
    pub fn zuuid_set_str(_self: *mut zuuid_t,
                         source: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
    pub fn zuuid_data(_self: *mut zuuid_t) -> *const byte;
    pub fn zuuid_size(_self: *mut zuuid_t) -> size_t;
    pub fn zuuid_str(_self: *mut zuuid_t) -> *const ::std::os::raw::c_char;
    pub fn zuuid_str_canonical(_self: *mut zuuid_t)
     -> *const ::std::os::raw::c_char;
    pub fn zuuid_export(_self: *mut zuuid_t, target: *mut byte);
    pub fn zuuid_eq(_self: *mut zuuid_t, compare: *const byte) -> u8;
    pub fn zuuid_neq(_self: *mut zuuid_t, compare: *const byte) -> u8;
    pub fn zuuid_dup(_self: *mut zuuid_t) -> *mut zuuid_t;
    pub fn zuuid_test(verbose: u8);
    pub fn zauth(pipe: *mut zsock_t, certstore: *mut ::std::os::raw::c_void);
    pub fn zauth_test(verbose: u8);
    pub fn zbeacon(pipe: *mut zsock_t, unused: *mut ::std::os::raw::c_void);
    pub fn zbeacon_test(verbose: u8);
    pub fn zgossip(pipe: *mut zsock_t, args: *mut ::std::os::raw::c_void);
    pub fn zgossip_test(verbose: u8);
    pub fn zmonitor(pipe: *mut zsock_t, sock: *mut ::std::os::raw::c_void);
    pub fn zmonitor_test(verbose: u8);
    pub fn zproxy(pipe: *mut zsock_t, unused: *mut ::std::os::raw::c_void);
    pub fn zproxy_test(verbose: u8);
    pub fn zrex_new(expression: *const ::std::os::raw::c_char) -> *mut zrex_t;
    pub fn zrex_destroy(self_p: *mut *mut zrex_t);
    pub fn zrex_valid(_self: *mut zrex_t) -> u8;
    pub fn zrex_strerror(_self: *mut zrex_t) -> *const ::std::os::raw::c_char;
    pub fn zrex_matches(_self: *mut zrex_t,
                        text: *const ::std::os::raw::c_char) -> u8;
    pub fn zrex_eq(_self: *mut zrex_t, text: *const ::std::os::raw::c_char,
                   expression: *const ::std::os::raw::c_char) -> u8;
    pub fn zrex_hits(_self: *mut zrex_t) -> ::std::os::raw::c_int;
    pub fn zrex_hit(_self: *mut zrex_t, index: _uint)
     -> *const ::std::os::raw::c_char;
    pub fn zrex_fetch(_self: *mut zrex_t,
                      string_p: *mut *const ::std::os::raw::c_char, ...)
     -> ::std::os::raw::c_int;
    pub fn zrex_test(verbose: u8);
    pub fn zsys_init() -> *mut ::std::os::raw::c_void;
    pub fn zsys_shutdown();
    pub fn zsys_socket(_type: ::std::os::raw::c_int,
                       filename: *const ::std::os::raw::c_char,
                       line_nbr: size_t) -> *mut ::std::os::raw::c_void;
    pub fn zsys_close(handle: *mut ::std::os::raw::c_void,
                      filename: *const ::std::os::raw::c_char,
                      line_nbr: size_t) -> ::std::os::raw::c_int;
    pub fn zsys_sockname(socktype: ::std::os::raw::c_int)
     -> *mut ::std::os::raw::c_char;
    pub fn zsys_create_pipe(backend_p: *mut *mut zsock_t) -> *mut zsock_t;
    pub fn zsys_handler_set(handler_fn: *mut zsys_handler_fn);
    pub fn zsys_handler_reset();
    pub fn zsys_catch_interrupts();
    pub fn zsys_file_exists(filename: *const ::std::os::raw::c_char) -> u8;
    pub fn zsys_file_size(filename: *const ::std::os::raw::c_char) -> ssize_t;
    pub fn zsys_file_modified(filename: *const ::std::os::raw::c_char)
     -> time_t;
    pub fn zsys_file_mode(filename: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
    pub fn zsys_file_delete(filename: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
    pub fn zsys_file_stable(filename: *const ::std::os::raw::c_char) -> u8;
    pub fn zsys_dir_create(pathname: *const ::std::os::raw::c_char, ...)
     -> ::std::os::raw::c_int;
    pub fn zsys_dir_delete(pathname: *const ::std::os::raw::c_char, ...)
     -> ::std::os::raw::c_int;
    pub fn zsys_dir_change(pathname: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
    pub fn zsys_file_mode_private();
    pub fn zsys_file_mode_default();
    pub fn zsys_version(major: *mut ::std::os::raw::c_int,
                        minor: *mut ::std::os::raw::c_int,
                        patch: *mut ::std::os::raw::c_int);
    pub fn zsys_sprintf(format: *const ::std::os::raw::c_char, ...)
     -> *mut ::std::os::raw::c_char;
    pub fn zsys_vprintf(format: *const ::std::os::raw::c_char,
                        argptr: va_list) -> *mut ::std::os::raw::c_char;
    pub fn zsys_udp_new(routable: u8) -> SOCKET;
    pub fn zsys_udp_close(handle: SOCKET) -> ::std::os::raw::c_int;
    pub fn zsys_udp_send(udpsock: SOCKET, frame: *mut zframe_t,
                         address: *mut inaddr_t,
                         addrlen: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
    pub fn zsys_udp_recv(udpsock: SOCKET,
                         peername: *mut ::std::os::raw::c_char,
                         peerlen: ::std::os::raw::c_int) -> *mut zframe_t;
    pub fn zsys_socket_error(reason: *const ::std::os::raw::c_char);
    pub fn zsys_hostname() -> *mut ::std::os::raw::c_char;
    pub fn zsys_daemonize(workdir: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
    pub fn zsys_run_as(lockfile: *const ::std::os::raw::c_char,
                       group: *const ::std::os::raw::c_char,
                       user: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
    pub fn zsys_has_curve() -> u8;
    pub fn zsys_set_io_threads(io_threads: size_t);
    pub fn zsys_set_max_sockets(max_sockets: size_t);
    pub fn zsys_socket_limit() -> size_t;
    pub fn zsys_set_linger(linger: size_t);
    pub fn zsys_set_sndhwm(sndhwm: size_t);
    pub fn zsys_set_rcvhwm(rcvhwm: size_t);
    pub fn zsys_set_pipehwm(pipehwm: size_t);
    pub fn zsys_pipehwm() -> size_t;
    pub fn zsys_set_ipv6(ipv6: ::std::os::raw::c_int);
    pub fn zsys_ipv6() -> ::std::os::raw::c_int;
    pub fn zsys_set_interface(value: *const ::std::os::raw::c_char);
    pub fn zsys_interface() -> *const ::std::os::raw::c_char;
    pub fn zsys_set_ipv6_address(value: *const ::std::os::raw::c_char);
    pub fn zsys_ipv6_address() -> *const ::std::os::raw::c_char;
    pub fn zsys_set_ipv6_mcast_address(value: *const ::std::os::raw::c_char);
    pub fn zsys_ipv6_mcast_address() -> *const ::std::os::raw::c_char;
    pub fn zsys_set_auto_use_fd(auto_use_fd: ::std::os::raw::c_int);
    pub fn zsys_auto_use_fd() -> ::std::os::raw::c_int;
    pub fn zsys_set_logident(value: *const ::std::os::raw::c_char);
    pub fn zsys_set_logstream(stream: *mut FILE);
    pub fn zsys_set_logsender(endpoint: *const ::std::os::raw::c_char);
    pub fn zsys_set_logsystem(logsystem: u8);
    pub fn zsys_error(format: *const ::std::os::raw::c_char, ...);
    pub fn zsys_warning(format: *const ::std::os::raw::c_char, ...);
    pub fn zsys_notice(format: *const ::std::os::raw::c_char, ...);
    pub fn zsys_info(format: *const ::std::os::raw::c_char, ...);
    pub fn zsys_debug(format: *const ::std::os::raw::c_char, ...);
    pub fn zsys_test(verbose: u8);
    pub fn zauth_new(ctx: *mut zctx_t) -> *mut zauth_t;
    pub fn zauth_destroy(self_p: *mut *mut zauth_t);
    pub fn zauth_allow(_self: *mut zauth_t,
                       address: *const ::std::os::raw::c_char);
    pub fn zauth_deny(_self: *mut zauth_t,
                      address: *const ::std::os::raw::c_char);
    pub fn zauth_configure_plain(_self: *mut zauth_t,
                                 domain: *const ::std::os::raw::c_char,
                                 filename: *const ::std::os::raw::c_char);
    pub fn zauth_configure_curve(_self: *mut zauth_t,
                                 domain: *const ::std::os::raw::c_char,
                                 location: *const ::std::os::raw::c_char);
    pub fn zauth_configure_gssapi(_self: *mut zauth_t,
                                  domain: *mut ::std::os::raw::c_char);
    pub fn zauth_set_verbose(_self: *mut zauth_t, verbose: u8);
    pub fn zauth_v2_test(verbose: u8);
    pub fn zbeacon_new(ctx: *mut zctx_t, port_nbr: ::std::os::raw::c_int)
     -> *mut zbeacon_t;
    pub fn zbeacon_destroy(self_p: *mut *mut zbeacon_t);
    pub fn zbeacon_hostname(_self: *mut zbeacon_t)
     -> *mut ::std::os::raw::c_char;
    pub fn zbeacon_set_interval(_self: *mut zbeacon_t,
                                interval: ::std::os::raw::c_int);
    pub fn zbeacon_noecho(_self: *mut zbeacon_t);
    pub fn zbeacon_publish(_self: *mut zbeacon_t, transmit: *mut byte,
                           size: size_t);
    pub fn zbeacon_silence(_self: *mut zbeacon_t);
    pub fn zbeacon_subscribe(_self: *mut zbeacon_t, filter: *mut byte,
                             size: size_t);
    pub fn zbeacon_unsubscribe(_self: *mut zbeacon_t);
    pub fn zbeacon_socket(_self: *mut zbeacon_t)
     -> *mut ::std::os::raw::c_void;
    pub fn zbeacon_v2_test(verbose: u8);
    pub fn zctx_new() -> *mut zctx_t;
    pub fn zctx_destroy(self_p: *mut *mut zctx_t);
    pub fn zctx_shadow(_self: *mut zctx_t) -> *mut zctx_t;
    pub fn zctx_shadow_zmq_ctx(zmqctx: *mut ::std::os::raw::c_void)
     -> *mut zctx_t;
    pub fn zctx_set_iothreads(_self: *mut zctx_t,
                              iothreads: ::std::os::raw::c_int);
    pub fn zctx_set_linger(_self: *mut zctx_t, linger: ::std::os::raw::c_int);
    pub fn zctx_set_pipehwm(_self: *mut zctx_t,
                            pipehwm: ::std::os::raw::c_int);
    pub fn zctx_set_sndhwm(_self: *mut zctx_t, sndhwm: ::std::os::raw::c_int);
    pub fn zctx_set_rcvhwm(_self: *mut zctx_t, rcvhwm: ::std::os::raw::c_int);
    pub fn zctx_underlying(_self: *mut zctx_t) -> *mut ::std::os::raw::c_void;
    pub fn zctx_test(verbose: u8);
    pub fn zctx__socket_new(_self: *mut zctx_t, _type: ::std::os::raw::c_int)
     -> *mut ::std::os::raw::c_void;
    pub fn zctx__socket_pipe(_self: *mut zctx_t)
     -> *mut ::std::os::raw::c_void;
    pub fn zctx__socket_destroy(_self: *mut zctx_t,
                                socket: *mut ::std::os::raw::c_void);
    pub fn zctx__initialize_underlying(_self: *mut zctx_t);
    pub fn zmonitor_new(ctx: *mut zctx_t, socket: *mut ::std::os::raw::c_void,
                        events: ::std::os::raw::c_int) -> *mut zmonitor_t;
    pub fn zmonitor_destroy(self_p: *mut *mut zmonitor_t);
    pub fn zmonitor_recv(_self: *mut zmonitor_t) -> *mut zmsg_t;
    pub fn zmonitor_socket(_self: *mut zmonitor_t)
     -> *mut ::std::os::raw::c_void;
    pub fn zmonitor_set_verbose(_self: *mut zmonitor_t, verbose: u8);
    pub fn zmonitor_v2_test(verbose: u8);
    pub fn zmutex_new() -> *mut zmutex_t;
    pub fn zmutex_destroy(self_p: *mut *mut zmutex_t);
    pub fn zmutex_lock(_self: *mut zmutex_t);
    pub fn zmutex_unlock(_self: *mut zmutex_t);
    pub fn zmutex_try_lock(_self: *mut zmutex_t) -> ::std::os::raw::c_int;
    pub fn zmutex_test(verbose: u8);
    pub fn zproxy_new(ctx: *mut zctx_t, frontend: *mut ::std::os::raw::c_void,
                      backend: *mut ::std::os::raw::c_void) -> *mut zproxy_t;
    pub fn zproxy_destroy(self_p: *mut *mut zproxy_t);
    pub fn zproxy_capture(_self: *mut zproxy_t,
                          endpoint: *const ::std::os::raw::c_char);
    pub fn zproxy_pause(_self: *mut zproxy_t);
    pub fn zproxy_resume(_self: *mut zproxy_t);
    pub fn zproxy_v2_test(verbose: u8);
    pub fn zsocket_new(_self: *mut zctx_t, _type: ::std::os::raw::c_int)
     -> *mut ::std::os::raw::c_void;
    pub fn zsocket_destroy(ctx: *mut zctx_t,
                           _self: *mut ::std::os::raw::c_void);
    pub fn zsocket_bind(_self: *mut ::std::os::raw::c_void,
                        format: *const ::std::os::raw::c_char, ...)
     -> ::std::os::raw::c_int;
    pub fn zsocket_unbind(_self: *mut ::std::os::raw::c_void,
                          format: *const ::std::os::raw::c_char, ...)
     -> ::std::os::raw::c_int;
    pub fn zsocket_connect(_self: *mut ::std::os::raw::c_void,
                           format: *const ::std::os::raw::c_char, ...)
     -> ::std::os::raw::c_int;
    pub fn zsocket_disconnect(_self: *mut ::std::os::raw::c_void,
                              format: *const ::std::os::raw::c_char, ...)
     -> ::std::os::raw::c_int;
    pub fn zsocket_poll(_self: *mut ::std::os::raw::c_void,
                        msecs: ::std::os::raw::c_int) -> u8;
    pub fn zsocket_type_str(_self: *mut ::std::os::raw::c_void)
     -> *const ::std::os::raw::c_char;
    pub fn zsocket_sendmem(_self: *mut ::std::os::raw::c_void,
                           data: *const ::std::os::raw::c_void, size: size_t,
                           flags: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
    pub fn zsocket_signal(_self: *mut ::std::os::raw::c_void)
     -> ::std::os::raw::c_int;
    pub fn zsocket_wait(_self: *mut ::std::os::raw::c_void)
     -> ::std::os::raw::c_int;
    pub fn zsocket_test(verbose: u8);
    pub fn zsocket_set_hwm(_self: *mut ::std::os::raw::c_void,
                           hwm: ::std::os::raw::c_int);
    pub fn zsocket_heartbeat_ivl(zocket: *mut ::std::os::raw::c_void)
     -> ::std::os::raw::c_int;
    pub fn zsocket_heartbeat_ttl(zocket: *mut ::std::os::raw::c_void)
     -> ::std::os::raw::c_int;
    pub fn zsocket_heartbeat_timeout(zocket: *mut ::std::os::raw::c_void)
     -> ::std::os::raw::c_int;
    pub fn zsocket_use_fd(zocket: *mut ::std::os::raw::c_void)
     -> ::std::os::raw::c_int;
    pub fn zsocket_tos(zocket: *mut ::std::os::raw::c_void)
     -> ::std::os::raw::c_int;
    pub fn zsocket_zap_domain(zocket: *mut ::std::os::raw::c_void)
     -> *mut ::std::os::raw::c_char;
    pub fn zsocket_mechanism(zocket: *mut ::std::os::raw::c_void)
     -> ::std::os::raw::c_int;
    pub fn zsocket_plain_server(zocket: *mut ::std::os::raw::c_void)
     -> ::std::os::raw::c_int;
    pub fn zsocket_plain_username(zocket: *mut ::std::os::raw::c_void)
     -> *mut ::std::os::raw::c_char;
    pub fn zsocket_plain_password(zocket: *mut ::std::os::raw::c_void)
     -> *mut ::std::os::raw::c_char;
    pub fn zsocket_curve_server(zocket: *mut ::std::os::raw::c_void)
     -> ::std::os::raw::c_int;
    pub fn zsocket_curve_publickey(zocket: *mut ::std::os::raw::c_void)
     -> *mut ::std::os::raw::c_char;
    pub fn zsocket_curve_secretkey(zocket: *mut ::std::os::raw::c_void)
     -> *mut ::std::os::raw::c_char;
    pub fn zsocket_curve_serverkey(zocket: *mut ::std::os::raw::c_void)
     -> *mut ::std::os::raw::c_char;
    pub fn zsocket_gssapi_server(zocket: *mut ::std::os::raw::c_void)
     -> ::std::os::raw::c_int;
    pub fn zsocket_gssapi_plaintext(zocket: *mut ::std::os::raw::c_void)
     -> ::std::os::raw::c_int;
    pub fn zsocket_gssapi_principal(zocket: *mut ::std::os::raw::c_void)
     -> *mut ::std::os::raw::c_char;
    pub fn zsocket_gssapi_service_principal(zocket:
                                                *mut ::std::os::raw::c_void)
     -> *mut ::std::os::raw::c_char;
    pub fn zsocket_ipv6(zocket: *mut ::std::os::raw::c_void)
     -> ::std::os::raw::c_int;
    pub fn zsocket_immediate(zocket: *mut ::std::os::raw::c_void)
     -> ::std::os::raw::c_int;
    pub fn zsocket_ipv4only(zocket: *mut ::std::os::raw::c_void)
     -> ::std::os::raw::c_int;
    pub fn zsocket_type(zocket: *mut ::std::os::raw::c_void)
     -> ::std::os::raw::c_int;
    pub fn zsocket_sndhwm(zocket: *mut ::std::os::raw::c_void)
     -> ::std::os::raw::c_int;
    pub fn zsocket_rcvhwm(zocket: *mut ::std::os::raw::c_void)
     -> ::std::os::raw::c_int;
    pub fn zsocket_affinity(zocket: *mut ::std::os::raw::c_void)
     -> ::std::os::raw::c_int;
    pub fn zsocket_identity(zocket: *mut ::std::os::raw::c_void)
     -> *mut ::std::os::raw::c_char;
    pub fn zsocket_rate(zocket: *mut ::std::os::raw::c_void)
     -> ::std::os::raw::c_int;
    pub fn zsocket_recovery_ivl(zocket: *mut ::std::os::raw::c_void)
     -> ::std::os::raw::c_int;
    pub fn zsocket_sndbuf(zocket: *mut ::std::os::raw::c_void)
     -> ::std::os::raw::c_int;
    pub fn zsocket_rcvbuf(zocket: *mut ::std::os::raw::c_void)
     -> ::std::os::raw::c_int;
    pub fn zsocket_linger(zocket: *mut ::std::os::raw::c_void)
     -> ::std::os::raw::c_int;
    pub fn zsocket_reconnect_ivl(zocket: *mut ::std::os::raw::c_void)
     -> ::std::os::raw::c_int;
    pub fn zsocket_reconnect_ivl_max(zocket: *mut ::std::os::raw::c_void)
     -> ::std::os::raw::c_int;
    pub fn zsocket_backlog(zocket: *mut ::std::os::raw::c_void)
     -> ::std::os::raw::c_int;
    pub fn zsocket_maxmsgsize(zocket: *mut ::std::os::raw::c_void)
     -> ::std::os::raw::c_int;
    pub fn zsocket_multicast_hops(zocket: *mut ::std::os::raw::c_void)
     -> ::std::os::raw::c_int;
    pub fn zsocket_rcvtimeo(zocket: *mut ::std::os::raw::c_void)
     -> ::std::os::raw::c_int;
    pub fn zsocket_sndtimeo(zocket: *mut ::std::os::raw::c_void)
     -> ::std::os::raw::c_int;
    pub fn zsocket_tcp_keepalive(zocket: *mut ::std::os::raw::c_void)
     -> ::std::os::raw::c_int;
    pub fn zsocket_tcp_keepalive_idle(zocket: *mut ::std::os::raw::c_void)
     -> ::std::os::raw::c_int;
    pub fn zsocket_tcp_keepalive_cnt(zocket: *mut ::std::os::raw::c_void)
     -> ::std::os::raw::c_int;
    pub fn zsocket_tcp_keepalive_intvl(zocket: *mut ::std::os::raw::c_void)
     -> ::std::os::raw::c_int;
    pub fn zsocket_tcp_accept_filter(zocket: *mut ::std::os::raw::c_void)
     -> *mut ::std::os::raw::c_char;
    pub fn zsocket_rcvmore(zocket: *mut ::std::os::raw::c_void)
     -> ::std::os::raw::c_int;
    pub fn zsocket_fd(zocket: *mut ::std::os::raw::c_void) -> SOCKET;
    pub fn zsocket_events(zocket: *mut ::std::os::raw::c_void)
     -> ::std::os::raw::c_int;
    pub fn zsocket_last_endpoint(zocket: *mut ::std::os::raw::c_void)
     -> *mut ::std::os::raw::c_char;
    pub fn zsocket_set_heartbeat_ivl(zocket: *mut ::std::os::raw::c_void,
                                     heartbeat_ivl: ::std::os::raw::c_int);
    pub fn zsocket_set_heartbeat_ttl(zocket: *mut ::std::os::raw::c_void,
                                     heartbeat_ttl: ::std::os::raw::c_int);
    pub fn zsocket_set_heartbeat_timeout(zocket: *mut ::std::os::raw::c_void,
                                         heartbeat_timeout:
                                             ::std::os::raw::c_int);
    pub fn zsocket_set_use_fd(zocket: *mut ::std::os::raw::c_void,
                              use_fd: ::std::os::raw::c_int);
    pub fn zsocket_set_tos(zocket: *mut ::std::os::raw::c_void,
                           tos: ::std::os::raw::c_int);
    pub fn zsocket_set_router_handover(zocket: *mut ::std::os::raw::c_void,
                                       router_handover:
                                           ::std::os::raw::c_int);
    pub fn zsocket_set_router_mandatory(zocket: *mut ::std::os::raw::c_void,
                                        router_mandatory:
                                            ::std::os::raw::c_int);
    pub fn zsocket_set_probe_router(zocket: *mut ::std::os::raw::c_void,
                                    probe_router: ::std::os::raw::c_int);
    pub fn zsocket_set_req_relaxed(zocket: *mut ::std::os::raw::c_void,
                                   req_relaxed: ::std::os::raw::c_int);
    pub fn zsocket_set_req_correlate(zocket: *mut ::std::os::raw::c_void,
                                     req_correlate: ::std::os::raw::c_int);
    pub fn zsocket_set_conflate(zocket: *mut ::std::os::raw::c_void,
                                conflate: ::std::os::raw::c_int);
    pub fn zsocket_set_zap_domain(zocket: *mut ::std::os::raw::c_void,
                                  zap_domain: *const ::std::os::raw::c_char);
    pub fn zsocket_set_plain_server(zocket: *mut ::std::os::raw::c_void,
                                    plain_server: ::std::os::raw::c_int);
    pub fn zsocket_set_plain_username(zocket: *mut ::std::os::raw::c_void,
                                      plain_username:
                                          *const ::std::os::raw::c_char);
    pub fn zsocket_set_plain_password(zocket: *mut ::std::os::raw::c_void,
                                      plain_password:
                                          *const ::std::os::raw::c_char);
    pub fn zsocket_set_curve_server(zocket: *mut ::std::os::raw::c_void,
                                    curve_server: ::std::os::raw::c_int);
    pub fn zsocket_set_curve_publickey(zocket: *mut ::std::os::raw::c_void,
                                       curve_publickey:
                                           *const ::std::os::raw::c_char);
    pub fn zsocket_set_curve_publickey_bin(zocket:
                                               *mut ::std::os::raw::c_void,
                                           curve_publickey: *const byte);
    pub fn zsocket_set_curve_secretkey(zocket: *mut ::std::os::raw::c_void,
                                       curve_secretkey:
                                           *const ::std::os::raw::c_char);
    pub fn zsocket_set_curve_secretkey_bin(zocket:
                                               *mut ::std::os::raw::c_void,
                                           curve_secretkey: *const byte);
    pub fn zsocket_set_curve_serverkey(zocket: *mut ::std::os::raw::c_void,
                                       curve_serverkey:
                                           *const ::std::os::raw::c_char);
    pub fn zsocket_set_curve_serverkey_bin(zocket:
                                               *mut ::std::os::raw::c_void,
                                           curve_serverkey: *const byte);
    pub fn zsocket_set_gssapi_server(zocket: *mut ::std::os::raw::c_void,
                                     gssapi_server: ::std::os::raw::c_int);
    pub fn zsocket_set_gssapi_plaintext(zocket: *mut ::std::os::raw::c_void,
                                        gssapi_plaintext:
                                            ::std::os::raw::c_int);
    pub fn zsocket_set_gssapi_principal(zocket: *mut ::std::os::raw::c_void,
                                        gssapi_principal:
                                            *const ::std::os::raw::c_char);
    pub fn zsocket_set_gssapi_service_principal(zocket:
                                                    *mut ::std::os::raw::c_void,
                                                gssapi_service_principal:
                                                    *const ::std::os::raw::c_char);
    pub fn zsocket_set_ipv6(zocket: *mut ::std::os::raw::c_void,
                            ipv6: ::std::os::raw::c_int);
    pub fn zsocket_set_immediate(zocket: *mut ::std::os::raw::c_void,
                                 immediate: ::std::os::raw::c_int);
    pub fn zsocket_set_router_raw(zocket: *mut ::std::os::raw::c_void,
                                  router_raw: ::std::os::raw::c_int);
    pub fn zsocket_set_ipv4only(zocket: *mut ::std::os::raw::c_void,
                                ipv4only: ::std::os::raw::c_int);
    pub fn zsocket_set_delay_attach_on_connect(zocket:
                                                   *mut ::std::os::raw::c_void,
                                               delay_attach_on_connect:
                                                   ::std::os::raw::c_int);
    pub fn zsocket_set_sndhwm(zocket: *mut ::std::os::raw::c_void,
                              sndhwm: ::std::os::raw::c_int);
    pub fn zsocket_set_rcvhwm(zocket: *mut ::std::os::raw::c_void,
                              rcvhwm: ::std::os::raw::c_int);
    pub fn zsocket_set_affinity(zocket: *mut ::std::os::raw::c_void,
                                affinity: ::std::os::raw::c_int);
    pub fn zsocket_set_subscribe(zocket: *mut ::std::os::raw::c_void,
                                 subscribe: *const ::std::os::raw::c_char);
    pub fn zsocket_set_unsubscribe(zocket: *mut ::std::os::raw::c_void,
                                   unsubscribe:
                                       *const ::std::os::raw::c_char);
    pub fn zsocket_set_identity(zocket: *mut ::std::os::raw::c_void,
                                identity: *const ::std::os::raw::c_char);
    pub fn zsocket_set_rate(zocket: *mut ::std::os::raw::c_void,
                            rate: ::std::os::raw::c_int);
    pub fn zsocket_set_recovery_ivl(zocket: *mut ::std::os::raw::c_void,
                                    recovery_ivl: ::std::os::raw::c_int);
    pub fn zsocket_set_sndbuf(zocket: *mut ::std::os::raw::c_void,
                              sndbuf: ::std::os::raw::c_int);
    pub fn zsocket_set_rcvbuf(zocket: *mut ::std::os::raw::c_void,
                              rcvbuf: ::std::os::raw::c_int);
    pub fn zsocket_set_linger(zocket: *mut ::std::os::raw::c_void,
                              linger: ::std::os::raw::c_int);
    pub fn zsocket_set_reconnect_ivl(zocket: *mut ::std::os::raw::c_void,
                                     reconnect_ivl: ::std::os::raw::c_int);
    pub fn zsocket_set_reconnect_ivl_max(zocket: *mut ::std::os::raw::c_void,
                                         reconnect_ivl_max:
                                             ::std::os::raw::c_int);
    pub fn zsocket_set_backlog(zocket: *mut ::std::os::raw::c_void,
                               backlog: ::std::os::raw::c_int);
    pub fn zsocket_set_maxmsgsize(zocket: *mut ::std::os::raw::c_void,
                                  maxmsgsize: ::std::os::raw::c_int);
    pub fn zsocket_set_multicast_hops(zocket: *mut ::std::os::raw::c_void,
                                      multicast_hops: ::std::os::raw::c_int);
    pub fn zsocket_set_rcvtimeo(zocket: *mut ::std::os::raw::c_void,
                                rcvtimeo: ::std::os::raw::c_int);
    pub fn zsocket_set_sndtimeo(zocket: *mut ::std::os::raw::c_void,
                                sndtimeo: ::std::os::raw::c_int);
    pub fn zsocket_set_xpub_verbose(zocket: *mut ::std::os::raw::c_void,
                                    xpub_verbose: ::std::os::raw::c_int);
    pub fn zsocket_set_tcp_keepalive(zocket: *mut ::std::os::raw::c_void,
                                     tcp_keepalive: ::std::os::raw::c_int);
    pub fn zsocket_set_tcp_keepalive_idle(zocket: *mut ::std::os::raw::c_void,
                                          tcp_keepalive_idle:
                                              ::std::os::raw::c_int);
    pub fn zsocket_set_tcp_keepalive_cnt(zocket: *mut ::std::os::raw::c_void,
                                         tcp_keepalive_cnt:
                                             ::std::os::raw::c_int);
    pub fn zsocket_set_tcp_keepalive_intvl(zocket:
                                               *mut ::std::os::raw::c_void,
                                           tcp_keepalive_intvl:
                                               ::std::os::raw::c_int);
    pub fn zsocket_set_tcp_accept_filter(zocket: *mut ::std::os::raw::c_void,
                                         tcp_accept_filter:
                                             *const ::std::os::raw::c_char);
    pub fn zsockopt_test(verbose: u8);
    pub fn zthread_new(thread_fn: *mut zthread_detached_fn,
                       args: *mut ::std::os::raw::c_void)
     -> ::std::os::raw::c_int;
    pub fn zthread_fork(ctx: *mut zctx_t, thread_fn: *mut zthread_attached_fn,
                        args: *mut ::std::os::raw::c_void)
     -> *mut ::std::os::raw::c_void;
    pub fn zthread_test(verbose: u8);
}
